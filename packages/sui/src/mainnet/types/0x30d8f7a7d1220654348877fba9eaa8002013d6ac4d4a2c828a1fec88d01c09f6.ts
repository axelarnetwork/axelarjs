/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

/* Generated types for 0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6, original address 0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6 */

import { TypeDescriptor, ANY_TYPE } from "@typemove/move";
import { MoveCoder, TypedEventInstance } from "@typemove/sui";

import { defaultMoveCoder } from "@typemove/sui";

import {
  ZERO_ADDRESS,
  TypedDevInspectResults,
  getMoveCoder,
} from "@typemove/sui";
import {
  Transaction,
  TransactionArgument,
  TransactionObjectArgument,
} from "@mysten/sui/transactions";
import { SuiClient } from "@mysten/sui/client";
import {
  transactionArgumentOrObject,
  transactionArgumentOrVec,
  transactionArgumentOrPure,
  transactionArgumentOrPureU8,
  transactionArgumentOrPureU16,
  transactionArgumentOrPureU32,
  transactionArgumentOrPureU64,
  transactionArgumentOrPureU128,
  transactionArgumentOrPureU256,
  transactionArgumentOrPureBool,
  transactionArgumentOrPureString,
  transactionArgumentOrPureAddress,
} from "@typemove/sui";

import * as _0x2 from "@typemove/sui/builtin/0x2";
import * as _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373 from "./0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.js";
import * as _0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c from "./0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c.js";
import * as _0x695f612a1ee9268d25ca5c03e705819a285ff0c5b4f7720fc75a00cb8c6f3b63 from "./0x695f612a1ee9268d25ca5c03e705819a285ff0c5b4f7720fc75a00cb8c6f3b63.js";
import * as _0x1 from "@typemove/sui/builtin/0x1";
import * as _0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca from "./0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca.js";

export namespace gmp {
  export interface Executed {
    data: number[];
  }

  export namespace Executed {
    export const TYPE_QNAME =
      "0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6::gmp::Executed";

    const TYPE = new TypeDescriptor<Executed>(Executed.TYPE_QNAME);

    export function type(): TypeDescriptor<Executed> {
      return TYPE.apply();
    }
  }

  export type ExecutedInstance = TypedEventInstance<Executed> & {
    data_decoded: Executed;
    type_arguments: [];
  };

  export interface Singleton {
    id: _0x2.object$.UID;
    channel: _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.channel.Channel;
  }

  export namespace Singleton {
    export const TYPE_QNAME =
      "0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6::gmp::Singleton";

    const TYPE = new TypeDescriptor<Singleton>(Singleton.TYPE_QNAME);

    export function type(): TypeDescriptor<Singleton> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function execute(
      tx: Transaction,
      args: [
        (
          | _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.channel.ApprovedMessage
          | TransactionArgument
        ),
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6::gmp::execute",
        arguments: _args,
      });
    }
    export function registerTransaction(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6::gmp::register_transaction",
        arguments: _args,
      });
    }
    export function sendCall(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionArgument,
        _0x2.coin.Coin<_0x2.sui.SUI> | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrPureAddress(args[6], tx));
      _args.push(transactionArgumentOrPure(args[7], tx));
      _args.push(transactionArgumentOrVec(args[8], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6::gmp::send_call",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function execute(
      client: SuiClient,
      args: [
        _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.channel.ApprovedMessage,
        string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.execute(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function registerTransaction(
      client: SuiClient,
      args: [string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.registerTransaction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function sendCall(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        _0x1.ascii.String,
        _0x1.ascii.String,
        string[],
        string,
        _0x2.coin.Coin<_0x2.sui.SUI>,
        string[],
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.sendCall(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace its {
  export interface ExecutedWithToken {
    source_chain: _0x1.ascii.String;
    source_address: number[];
    data: number[];
    amount: bigint;
  }

  export namespace ExecutedWithToken {
    export const TYPE_QNAME =
      "0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6::its::ExecutedWithToken";

    const TYPE = new TypeDescriptor<ExecutedWithToken>(
      ExecutedWithToken.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<ExecutedWithToken> {
      return TYPE.apply();
    }
  }

  export type ExecutedWithTokenInstance =
    TypedEventInstance<ExecutedWithToken> & {
      data_decoded: ExecutedWithToken;
      type_arguments: [];
    };

  export interface Singleton {
    id: _0x2.object$.UID;
    channel: _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.channel.Channel;
  }

  export namespace Singleton {
    export const TYPE_QNAME =
      "0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6::its::Singleton";

    const TYPE = new TypeDescriptor<Singleton>(Singleton.TYPE_QNAME);

    export function type(): TypeDescriptor<Singleton> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function deployRemoteInterchainToken<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        (
          | _0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca.token_id.TokenId
          | TransactionArgument
        ),
        _0x2.coin.Coin<_0x2.sui.SUI> | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrVec(args[6], tx));
      _args.push(transactionArgumentOrPureAddress(args[7], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6::its::deploy_remote_interchain_token",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function getFinalTransaction(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6::its::get_final_transaction",
        arguments: _args,
      });
    }
    export function receiveInterchainTransfer<T0 = any>(
      tx: Transaction,
      args: [
        (
          | _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.channel.ApprovedMessage
          | TransactionArgument
        ),
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6::its::receive_interchain_transfer",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function registerCoin<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6::its::register_coin",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function registerCoinWithCap<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.TreasuryCap<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6::its::register_coin_with_cap",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function registerTransaction(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6::its::register_transaction",
        arguments: _args,
      });
    }
    export function sendInterchainTransferCall<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca.token_id.TokenId
          | TransactionArgument
        ),
        _0x2.coin.Coin<T0> | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionArgument,
        _0x2.coin.Coin<_0x2.sui.SUI> | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrVec(args[7], tx));
      _args.push(transactionArgumentOrVec(args[8], tx));
      _args.push(transactionArgumentOrPureAddress(args[9], tx));
      _args.push(transactionArgumentOrPure(args[10], tx));
      _args.push(transactionArgumentOrVec(args[11], tx));
      _args.push(transactionArgumentOrObject(args[12], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6::its::send_interchain_transfer_call",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function deployRemoteInterchainToken<T0 = any>(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        _0x1.ascii.String,
        _0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca.token_id.TokenId,
        _0x2.coin.Coin<_0x2.sui.SUI>,
        string[],
        string,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.deployRemoteInterchainToken(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function getFinalTransaction(
      client: SuiClient,
      args: [string, string, string[], string],
    ): Promise<
      TypedDevInspectResults<
        [
          _0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c.transaction.TxCall,
        ]
      >
    > {
      const tx = new Transaction();
      builder.getFinalTransaction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c.transaction.TxCall,
        ]
      >(inspectRes);
    }
    export async function receiveInterchainTransfer<T0 = any>(
      client: SuiClient,
      args: [
        _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.channel.ApprovedMessage,
        string,
        string,
        string,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.receiveInterchainTransfer(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function registerCoin<T0 = any>(
      client: SuiClient,
      args: [string, string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<
        [
          _0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca.token_id.TokenId,
        ]
      >
    > {
      const tx = new Transaction();
      builder.registerCoin(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca.token_id.TokenId,
        ]
      >(inspectRes);
    }
    export async function registerCoinWithCap<T0 = any>(
      client: SuiClient,
      args: [string, string, _0x2.coin.TreasuryCap<T0>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<
        [
          _0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca.token_id.TokenId,
        ]
      >
    > {
      const tx = new Transaction();
      builder.registerCoinWithCap(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca.token_id.TokenId,
        ]
      >(inspectRes);
    }
    export async function registerTransaction(
      client: SuiClient,
      args: [string, string, string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.registerTransaction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function sendInterchainTransferCall<T0 = any>(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        _0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca.token_id.TokenId,
        _0x2.coin.Coin<T0>,
        _0x1.ascii.String,
        string[],
        string[],
        string,
        _0x2.coin.Coin<_0x2.sui.SUI>,
        string[],
        string,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.sendInterchainTransferCall(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace token {
  export interface TOKEN {
    dummy_field: boolean;
  }

  export namespace TOKEN {
    export const TYPE_QNAME =
      "0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6::token::TOKEN";

    const TYPE = new TypeDescriptor<TOKEN>(TOKEN.TYPE_QNAME);

    export function type(): TypeDescriptor<TOKEN> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function mint(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureAddress(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6::token::mint",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function mint(
      client: SuiClient,
      args: [string, bigint, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.mint(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace token_a {
  export interface TOKEN_A {
    dummy_field: boolean;
  }

  export namespace TOKEN_A {
    export const TYPE_QNAME =
      "0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6::token_a::TOKEN_A";

    const TYPE = new TypeDescriptor<TOKEN_A>(TOKEN_A.TYPE_QNAME);

    export function type(): TypeDescriptor<TOKEN_A> {
      return TYPE.apply();
    }
  }

  export namespace builder {}
  export namespace view {}
}

export namespace token_b {
  export interface TOKEN_B {
    dummy_field: boolean;
  }

  export namespace TOKEN_B {
    export const TYPE_QNAME =
      "0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6::token_b::TOKEN_B";

    const TYPE = new TypeDescriptor<TOKEN_B>(TOKEN_B.TYPE_QNAME);

    export function type(): TypeDescriptor<TOKEN_B> {
      return TYPE.apply();
    }
  }

  export namespace builder {}
  export namespace view {}
}

export namespace token_c {
  export interface TOKEN_C {
    dummy_field: boolean;
  }

  export namespace TOKEN_C {
    export const TYPE_QNAME =
      "0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6::token_c::TOKEN_C";

    const TYPE = new TypeDescriptor<TOKEN_C>(TOKEN_C.TYPE_QNAME);

    export function type(): TypeDescriptor<TOKEN_C> {
      return TYPE.apply();
    }
  }

  export namespace builder {}
  export namespace view {}
}

export namespace utils {
  export namespace builder {
    export function concat<T0 = any>(
      tx: Transaction,
      args: [
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6::utils::concat",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function concat<T0 = any>(
      client: SuiClient,
      args: [string[], string[]],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[T0[]]>> {
      const tx = new Transaction();
      builder.concat(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[T0[]]>(
        inspectRes,
      );
    }
  }
}

const MODULES = JSON.parse(
  '{"gmp":{"fileFormatVersion":6,"address":"0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6","name":"gmp","friends":[],"structs":{"Executed":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"data","type":{"Vector":"U8"}}]},"Singleton":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"channel","type":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"Channel","typeArguments":[]}}}]}},"exposedFunctions":{"execute":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"ApprovedMessage","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6","module":"gmp","name":"Singleton","typeArguments":[]}}}],"return":[]},"register_transaction":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"discovery","name":"RelayerDiscovery","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6","module":"gmp","name":"Singleton","typeArguments":[]}}}],"return":[]},"send_call":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6","module":"gmp","name":"Singleton","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"gateway","name":"Gateway","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x695f612a1ee9268d25ca5c03e705819a285ff0c5b4f7720fc75a00cb8c6f3b63","module":"gas_service","name":"GasService","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Vector":"U8"},"Address",{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}},{"Vector":"U8"}],"return":[]}}},"its":{"fileFormatVersion":6,"address":"0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6","name":"its","friends":[],"structs":{"ExecutedWithToken":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"source_chain","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"source_address","type":{"Vector":"U8"}},{"name":"data","type":{"Vector":"U8"}},{"name":"amount","type":"U64"}]},"Singleton":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"channel","type":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"Channel","typeArguments":[]}}}]}},"exposedFunctions":{"deploy_remote_interchain_token":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"gateway","name":"Gateway","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x695f612a1ee9268d25ca5c03e705819a285ff0c5b4f7720fc75a00cb8c6f3b63","module":"gas_service","name":"GasService","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}},{"Vector":"U8"},"Address"],"return":[]},"get_final_transaction":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6","module":"its","name":"Singleton","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"transaction","name":"TxCall","typeArguments":[]}}]},"receive_interchain_transfer":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"ApprovedMessage","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6","module":"its","name":"Singleton","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"register_coin":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}}]},"register_coin_with_cap":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}}]},"register_transaction":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"discovery","name":"RelayerDiscovery","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6","module":"its","name":"Singleton","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[]},"send_interchain_transfer_call":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6","module":"its","name":"Singleton","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"gateway","name":"Gateway","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x695f612a1ee9268d25ca5c03e705819a285ff0c5b4f7720fc75a00cb8c6f3b63","module":"gas_service","name":"GasService","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Vector":"U8"},{"Vector":"U8"},"Address",{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[]}}},"token":{"fileFormatVersion":6,"address":"0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6","name":"token","friends":[],"structs":{"TOKEN":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{"mint":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"Struct":{"address":"0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6","module":"token","name":"TOKEN","typeArguments":[]}}]}}},"U64","Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}},"token_a":{"fileFormatVersion":6,"address":"0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6","name":"token_a","friends":[],"structs":{"TOKEN_A":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{}},"token_b":{"fileFormatVersion":6,"address":"0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6","name":"token_b","friends":[],"structs":{"TOKEN_B":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{}},"token_c":{"fileFormatVersion":6,"address":"0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6","name":"token_c","friends":[],"structs":{"TOKEN_C":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{}},"utils":{"fileFormatVersion":6,"address":"0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6","name":"utils","friends":[{"address":"0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6","name":"gmp"},{"address":"0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6","name":"its"}],"structs":{},"exposedFunctions":{"concat":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Copy"]}],"parameters":[{"Vector":{"TypeParameter":0}},{"Vector":{"TypeParameter":0}}],"return":[{"Vector":{"TypeParameter":0}}]}}}}',
);

export function loadAllTypes(coder: MoveCoder) {
  _0x2.loadAllTypes(coder);
  _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.loadAllTypes(
    coder,
  );
  _0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c.loadAllTypes(
    coder,
  );
  _0x695f612a1ee9268d25ca5c03e705819a285ff0c5b4f7720fc75a00cb8c6f3b63.loadAllTypes(
    coder,
  );
  _0x1.loadAllTypes(coder);
  _0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca.loadAllTypes(
    coder,
  );
  for (const m of Object.values(MODULES)) {
    coder.load(
      m as any,
      "0x30d8f7a7d1220654348877fba9eaa8002013d6ac4d4a2c828a1fec88d01c09f6",
    );
  }
}

loadAllTypes(defaultMoveCoder());
