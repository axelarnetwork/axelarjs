/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

/* Generated types for 0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca, original address 0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca */

import { TypeDescriptor, ANY_TYPE } from "@typemove/move";
import { MoveCoder, TypedEventInstance } from "@typemove/sui";

import { defaultMoveCoder } from "@typemove/sui";

import {
  ZERO_ADDRESS,
  TypedDevInspectResults,
  getMoveCoder,
} from "@typemove/sui";
import {
  Transaction,
  TransactionArgument,
  TransactionObjectArgument,
} from "@mysten/sui/transactions";
import { SuiClient } from "@mysten/sui/client";
import {
  transactionArgumentOrObject,
  transactionArgumentOrVec,
  transactionArgumentOrPure,
  transactionArgumentOrPureU8,
  transactionArgumentOrPureU16,
  transactionArgumentOrPureU32,
  transactionArgumentOrPureU64,
  transactionArgumentOrPureU128,
  transactionArgumentOrPureU256,
  transactionArgumentOrPureBool,
  transactionArgumentOrPureString,
  transactionArgumentOrPureAddress,
} from "@typemove/sui";

import * as _0x1 from "@typemove/sui/builtin/0x1";
import * as _0x2 from "@typemove/sui/builtin/0x2";
import * as _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373 from "./0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.js";
import * as _0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c from "./0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c.js";
import * as _0x647a3b34b3a16f5f00443bdafd13d281983b2280703ab4f416cf706e6d739087 from "./0x647a3b34b3a16f5f00443bdafd13d281983b2280703ab4f416cf706e6d739087.js";

export namespace coin_data {
  export interface CoinData<T0> {
    coin_management: coin_management.CoinManagement<T0>;
    coin_info: coin_info.CoinInfo<T0>;
  }

  export namespace CoinData {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_data::CoinData";

    const TYPE = new TypeDescriptor<CoinData<any>>(CoinData.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<CoinData<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export namespace builder {
    export function coinInfo<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_data::coin_info",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function coinManagement<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_data::coin_management",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function coinManagementMut<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_data::coin_management_mut",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function new$<T0 = any>(
      tx: Transaction,
      args: [
        coin_management.CoinManagement<T0> | TransactionArgument,
        coin_info.CoinInfo<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_data::new",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function coinInfo<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.coinInfo(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function coinManagement<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.coinManagement(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function coinManagementMut<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.coinManagementMut(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function new$<T0 = any>(
      client: SuiClient,
      args: [coin_management.CoinManagement<T0>, coin_info.CoinInfo<T0>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[coin_data.CoinData<T0>]>> {
      const tx = new Transaction();
      builder.new$(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [coin_data.CoinData<T0>]
      >(inspectRes);
    }
  }
}

export namespace coin_info {
  export interface CoinInfo<T0> {
    name: string;
    symbol: _0x1.ascii.String;
    decimals: number;
    metadata: _0x1.option.Option<_0x2.coin.CoinMetadata<T0>>;
  }

  export namespace CoinInfo {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_info::CoinInfo";

    const TYPE = new TypeDescriptor<CoinInfo<any>>(CoinInfo.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<CoinInfo<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export namespace builder {
    export function decimals<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_info::decimals",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function fromInfo<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        number | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPureU8(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_info::from_info",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function fromMetadata<T0 = any>(
      tx: Transaction,
      args: [_0x2.coin.CoinMetadata<T0> | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_info::from_metadata",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function metadata<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_info::metadata",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function name<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_info::name",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function symbol$<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_info::symbol",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function decimals<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.decimals(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function fromInfo<T0 = any>(
      client: SuiClient,
      args: [string, _0x1.ascii.String, number],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[coin_info.CoinInfo<T0>]>> {
      const tx = new Transaction();
      builder.fromInfo(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [coin_info.CoinInfo<T0>]
      >(inspectRes);
    }
    export async function fromMetadata<T0 = any>(
      client: SuiClient,
      args: [_0x2.coin.CoinMetadata<T0>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[coin_info.CoinInfo<T0>]>> {
      const tx = new Transaction();
      builder.fromMetadata(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [coin_info.CoinInfo<T0>]
      >(inspectRes);
    }
    export async function metadata<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.metadata(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function name<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.name(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function symbol$<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x1.ascii.String]>> {
      const tx = new Transaction();
      builder.symbol$(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.ascii.String]
      >(inspectRes);
    }
  }
}

export namespace coin_management {
  export interface CoinManagement<T0> {
    treasury_cap: _0x1.option.Option<_0x2.coin.TreasuryCap<T0>>;
    balance: _0x1.option.Option<_0x2.balance.Balance<T0>>;
    distributor: _0x1.option.Option<string>;
    operator: _0x1.option.Option<string>;
    flow_limit: flow_limit.FlowLimit;
    dust: bigint;
  }

  export namespace CoinManagement {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_management::CoinManagement";

    const TYPE = new TypeDescriptor<CoinManagement<any>>(
      CoinManagement.TYPE_QNAME,
    );

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<CoinManagement<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export namespace builder {
    export function addDistributor<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_management::add_distributor",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function addOperator<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_management::add_operator",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function burn<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.balance.Balance<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_management::burn",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function distributor<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_management::distributor",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function giveCoin<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_management::give_coin",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function hasTreasuryCap<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_management::has_treasury_cap",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function isDistributor<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_management::is_distributor",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function mint<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_management::mint",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function newLocked<T0 = any>(
      tx: Transaction,
      args: [],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_management::new_locked",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function newWithCap<T0 = any>(
      tx: Transaction,
      args: [_0x2.coin.TreasuryCap<T0> | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_management::new_with_cap",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function operator<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_management::operator",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function setFlowLimit<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_management::set_flow_limit",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function setFlowLimitInternal<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_management::set_flow_limit_internal",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function takeBalance<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.balance.Balance<T0> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_management::take_balance",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function treasuryCap<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_management::treasury_cap",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function updateDistributorship<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.option.Option<string> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_management::update_distributorship",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function updateOperatorship<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.option.Option<string> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::coin_management::update_operatorship",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function addDistributor<T0 = any>(
      client: SuiClient,
      args: [string, string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.addDistributor(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function addOperator<T0 = any>(
      client: SuiClient,
      args: [string, string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.addOperator(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function burn<T0 = any>(
      client: SuiClient,
      args: [string, _0x2.balance.Balance<T0>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.burn(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function distributor<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.distributor(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function giveCoin<T0 = any>(
      client: SuiClient,
      args: [string, bigint, string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.giveCoin(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function hasTreasuryCap<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.hasTreasuryCap(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function isDistributor<T0 = any>(
      client: SuiClient,
      args: [string, string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.isDistributor(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function mint<T0 = any>(
      client: SuiClient,
      args: [string, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.mint(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function newLocked<T0 = any>(
      client: SuiClient,
      args: [],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[coin_management.CoinManagement<T0>]>> {
      const tx = new Transaction();
      builder.newLocked(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [coin_management.CoinManagement<T0>]
      >(inspectRes);
    }
    export async function newWithCap<T0 = any>(
      client: SuiClient,
      args: [_0x2.coin.TreasuryCap<T0>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[coin_management.CoinManagement<T0>]>> {
      const tx = new Transaction();
      builder.newWithCap(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [coin_management.CoinManagement<T0>]
      >(inspectRes);
    }
    export async function operator<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.operator(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function setFlowLimit<T0 = any>(
      client: SuiClient,
      args: [string, string, _0x1.option.Option<bigint>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.setFlowLimit(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function setFlowLimitInternal<T0 = any>(
      client: SuiClient,
      args: [string, _0x1.option.Option<bigint>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.setFlowLimitInternal(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function takeBalance<T0 = any>(
      client: SuiClient,
      args: [string, _0x2.balance.Balance<T0>, string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.takeBalance(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function treasuryCap<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.treasuryCap(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function updateDistributorship<T0 = any>(
      client: SuiClient,
      args: [string, _0x1.option.Option<string>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updateDistributorship(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updateOperatorship<T0 = any>(
      client: SuiClient,
      args: [string, string, _0x1.option.Option<string>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updateOperatorship(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace creator_cap {
  export interface CreatorCap {
    id: _0x2.object$.UID;
  }

  export namespace CreatorCap {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::creator_cap::CreatorCap";

    const TYPE = new TypeDescriptor<CreatorCap>(CreatorCap.TYPE_QNAME);

    export function type(): TypeDescriptor<CreatorCap> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function create(
      tx: Transaction,
      args: [],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::creator_cap::create",
        arguments: _args,
      });
    }
    export function destroy(
      tx: Transaction,
      args: [creator_cap.CreatorCap | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::creator_cap::destroy",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function create(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[creator_cap.CreatorCap]>> {
      const tx = new Transaction();
      builder.create(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [creator_cap.CreatorCap]
      >(inspectRes);
    }
    export async function destroy(
      client: SuiClient,
      args: [creator_cap.CreatorCap],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.destroy(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace discovery {
  export namespace builder {
    export function callInfo(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::discovery::call_info",
        arguments: _args,
      });
    }
    export function interchainTransferInfo(
      tx: Transaction,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::discovery::interchain_transfer_info",
        arguments: _args,
      });
    }
    export function registerTransaction(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::discovery::register_transaction",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function callInfo(
      client: SuiClient,
      args: [string, string[]],
    ): Promise<
      TypedDevInspectResults<
        [
          _0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c.transaction.TxCall,
        ]
      >
    > {
      const tx = new Transaction();
      builder.callInfo(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c.transaction.TxCall,
        ]
      >(inspectRes);
    }
    export async function interchainTransferInfo(
      client: SuiClient,
      args: [string[]],
    ): Promise<
      TypedDevInspectResults<[token_id.TokenId, string, bigint, number[]]>
    > {
      const tx = new Transaction();
      builder.interchainTransferInfo(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [token_id.TokenId, string, bigint, number[]]
      >(inspectRes);
    }
    export async function registerTransaction(
      client: SuiClient,
      args: [string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.registerTransaction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace events {
  export interface CoinRegistered<T0> {
    token_id: token_id.TokenId;
  }

  export namespace CoinRegistered {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::events::CoinRegistered";

    const TYPE = new TypeDescriptor<CoinRegistered<any>>(
      CoinRegistered.TYPE_QNAME,
    );

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<CoinRegistered<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export type CoinRegisteredInstance = TypedEventInstance<
    CoinRegistered<any>
  > & {
    data_decoded: CoinRegistered<any>;
    type_arguments: [string];
  };

  export interface DistributorshipTransfered<T0> {
    token_id: token_id.TokenId;
    new_distributor: _0x1.option.Option<string>;
  }

  export namespace DistributorshipTransfered {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::events::DistributorshipTransfered";

    const TYPE = new TypeDescriptor<DistributorshipTransfered<any>>(
      DistributorshipTransfered.TYPE_QNAME,
    );

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<DistributorshipTransfered<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export type DistributorshipTransferedInstance = TypedEventInstance<
    DistributorshipTransfered<any>
  > & {
    data_decoded: DistributorshipTransfered<any>;
    type_arguments: [string];
  };

  export interface FlowLimitSet<T0> {
    token_id: token_id.TokenId;
    flow_limit: _0x1.option.Option<bigint>;
  }

  export namespace FlowLimitSet {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::events::FlowLimitSet";

    const TYPE = new TypeDescriptor<FlowLimitSet<any>>(FlowLimitSet.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<FlowLimitSet<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export type FlowLimitSetInstance = TypedEventInstance<FlowLimitSet<any>> & {
    data_decoded: FlowLimitSet<any>;
    type_arguments: [string];
  };

  export interface InterchainTokenDeploymentStarted<T0> {
    token_id: token_id.TokenId;
    name: string;
    symbol: _0x1.ascii.String;
    decimals: number;
    destination_chain: _0x1.ascii.String;
  }

  export namespace InterchainTokenDeploymentStarted {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::events::InterchainTokenDeploymentStarted";

    const TYPE = new TypeDescriptor<InterchainTokenDeploymentStarted<any>>(
      InterchainTokenDeploymentStarted.TYPE_QNAME,
    );

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<InterchainTokenDeploymentStarted<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export type InterchainTokenDeploymentStartedInstance = TypedEventInstance<
    InterchainTokenDeploymentStarted<any>
  > & {
    data_decoded: InterchainTokenDeploymentStarted<any>;
    type_arguments: [string];
  };

  export interface InterchainTransfer<T0> {
    token_id: token_id.TokenId;
    source_address: string;
    destination_chain: _0x1.ascii.String;
    destination_address: number[];
    amount: bigint;
    data_hash: _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.bytes32.Bytes32;
  }

  export namespace InterchainTransfer {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::events::InterchainTransfer";

    const TYPE = new TypeDescriptor<InterchainTransfer<any>>(
      InterchainTransfer.TYPE_QNAME,
    );

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<InterchainTransfer<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export type InterchainTransferInstance = TypedEventInstance<
    InterchainTransfer<any>
  > & {
    data_decoded: InterchainTransfer<any>;
    type_arguments: [string];
  };

  export interface InterchainTransferReceived<T0> {
    message_id: _0x1.ascii.String;
    token_id: token_id.TokenId;
    source_chain: _0x1.ascii.String;
    source_address: number[];
    destination_address: string;
    amount: bigint;
    data_hash: _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.bytes32.Bytes32;
  }

  export namespace InterchainTransferReceived {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::events::InterchainTransferReceived";

    const TYPE = new TypeDescriptor<InterchainTransferReceived<any>>(
      InterchainTransferReceived.TYPE_QNAME,
    );

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<InterchainTransferReceived<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export type InterchainTransferReceivedInstance = TypedEventInstance<
    InterchainTransferReceived<any>
  > & {
    data_decoded: InterchainTransferReceived<any>;
    type_arguments: [string];
  };

  export interface OperatorshipTransfered<T0> {
    token_id: token_id.TokenId;
    new_operator: _0x1.option.Option<string>;
  }

  export namespace OperatorshipTransfered {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::events::OperatorshipTransfered";

    const TYPE = new TypeDescriptor<OperatorshipTransfered<any>>(
      OperatorshipTransfered.TYPE_QNAME,
    );

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<OperatorshipTransfered<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export type OperatorshipTransferedInstance = TypedEventInstance<
    OperatorshipTransfered<any>
  > & {
    data_decoded: OperatorshipTransfered<any>;
    type_arguments: [string];
  };

  export interface TrustedChainAdded {
    chain_name: _0x1.ascii.String;
  }

  export namespace TrustedChainAdded {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::events::TrustedChainAdded";

    const TYPE = new TypeDescriptor<TrustedChainAdded>(
      TrustedChainAdded.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<TrustedChainAdded> {
      return TYPE.apply();
    }
  }

  export type TrustedChainAddedInstance =
    TypedEventInstance<TrustedChainAdded> & {
      data_decoded: TrustedChainAdded;
      type_arguments: [];
    };

  export interface TrustedChainRemoved {
    chain_name: _0x1.ascii.String;
  }

  export namespace TrustedChainRemoved {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::events::TrustedChainRemoved";

    const TYPE = new TypeDescriptor<TrustedChainRemoved>(
      TrustedChainRemoved.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<TrustedChainRemoved> {
      return TYPE.apply();
    }
  }

  export type TrustedChainRemovedInstance =
    TypedEventInstance<TrustedChainRemoved> & {
      data_decoded: TrustedChainRemoved;
      type_arguments: [];
    };

  export interface UnregisteredCoinReceived<T0> {
    token_id: token_id.UnregisteredTokenId;
    symbol: _0x1.ascii.String;
    decimals: number;
  }

  export namespace UnregisteredCoinReceived {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::events::UnregisteredCoinReceived";

    const TYPE = new TypeDescriptor<UnregisteredCoinReceived<any>>(
      UnregisteredCoinReceived.TYPE_QNAME,
    );

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<UnregisteredCoinReceived<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export type UnregisteredCoinReceivedInstance = TypedEventInstance<
    UnregisteredCoinReceived<any>
  > & {
    data_decoded: UnregisteredCoinReceived<any>;
    type_arguments: [string];
  };

  export namespace builder {
    export function coinRegistered<T0 = any>(
      tx: Transaction,
      args: [token_id.TokenId | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::events::coin_registered",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function distributorshipTransfered<T0 = any>(
      tx: Transaction,
      args: [
        token_id.TokenId | TransactionArgument,
        _0x1.option.Option<string> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::events::distributorship_transfered",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function flowLimitSet<T0 = any>(
      tx: Transaction,
      args: [
        token_id.TokenId | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::events::flow_limit_set",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function interchainTokenDeploymentStarted<T0 = any>(
      tx: Transaction,
      args: [
        token_id.TokenId | TransactionArgument,
        string | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        number | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPureU8(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::events::interchain_token_deployment_started",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function interchainTransfer<T0 = any>(
      tx: Transaction,
      args: [
        token_id.TokenId | TransactionArgument,
        string | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::events::interchain_transfer",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function interchainTransferReceived<T0 = any>(
      tx: Transaction,
      args: [
        _0x1.ascii.String | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrPureAddress(args[4], tx));
      _args.push(transactionArgumentOrPureU64(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::events::interchain_transfer_received",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function operatorshipTransfered<T0 = any>(
      tx: Transaction,
      args: [
        token_id.TokenId | TransactionArgument,
        _0x1.option.Option<string> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::events::operatorship_transfered",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function trustedChainAdded(
      tx: Transaction,
      args: [_0x1.ascii.String | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::events::trusted_chain_added",
        arguments: _args,
      });
    }
    export function trustedChainRemoved(
      tx: Transaction,
      args: [_0x1.ascii.String | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::events::trusted_chain_removed",
        arguments: _args,
      });
    }
    export function unregisteredCoinReceived<T0 = any>(
      tx: Transaction,
      args: [
        token_id.UnregisteredTokenId | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        number | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPureU8(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::events::unregistered_coin_received",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function coinRegistered<T0 = any>(
      client: SuiClient,
      args: [token_id.TokenId],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.coinRegistered(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function distributorshipTransfered<T0 = any>(
      client: SuiClient,
      args: [token_id.TokenId, _0x1.option.Option<string>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.distributorshipTransfered(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function flowLimitSet<T0 = any>(
      client: SuiClient,
      args: [token_id.TokenId, _0x1.option.Option<bigint>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.flowLimitSet(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function interchainTokenDeploymentStarted<T0 = any>(
      client: SuiClient,
      args: [
        token_id.TokenId,
        string,
        _0x1.ascii.String,
        number,
        _0x1.ascii.String,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.interchainTokenDeploymentStarted(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function interchainTransfer<T0 = any>(
      client: SuiClient,
      args: [
        token_id.TokenId,
        string,
        _0x1.ascii.String,
        string[],
        bigint,
        string,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.interchainTransfer(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function interchainTransferReceived<T0 = any>(
      client: SuiClient,
      args: [
        _0x1.ascii.String,
        token_id.TokenId,
        _0x1.ascii.String,
        string[],
        string,
        bigint,
        string,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.interchainTransferReceived(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function operatorshipTransfered<T0 = any>(
      client: SuiClient,
      args: [token_id.TokenId, _0x1.option.Option<string>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.operatorshipTransfered(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function trustedChainAdded(
      client: SuiClient,
      args: [_0x1.ascii.String],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.trustedChainAdded(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function trustedChainRemoved(
      client: SuiClient,
      args: [_0x1.ascii.String],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.trustedChainRemoved(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function unregisteredCoinReceived<T0 = any>(
      client: SuiClient,
      args: [token_id.UnregisteredTokenId, _0x1.ascii.String, number],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.unregisteredCoinReceived(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace flow_limit {
  export interface FlowLimit {
    flow_limit: _0x1.option.Option<bigint>;
    flow_in: bigint;
    flow_out: bigint;
    current_epoch: bigint;
  }

  export namespace FlowLimit {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::flow_limit::FlowLimit";

    const TYPE = new TypeDescriptor<FlowLimit>(FlowLimit.TYPE_QNAME);

    export function type(): TypeDescriptor<FlowLimit> {
      return TYPE.apply();
    }
  }

  export type FlowLimitInstance = TypedEventInstance<FlowLimit> & {
    data_decoded: FlowLimit;
    type_arguments: [];
  };

  export namespace builder {
    export function addFlowIn(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::flow_limit::add_flow_in",
        arguments: _args,
      });
    }
    export function addFlowOut(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::flow_limit::add_flow_out",
        arguments: _args,
      });
    }
    export function new$(tx: Transaction, args: []): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::flow_limit::new",
        arguments: _args,
      });
    }
    export function setFlowLimit(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::flow_limit::set_flow_limit",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function addFlowIn(
      client: SuiClient,
      args: [string, bigint, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.addFlowIn(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function addFlowOut(
      client: SuiClient,
      args: [string, bigint, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.addFlowOut(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function new$(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[flow_limit.FlowLimit]>> {
      const tx = new Transaction();
      builder.new$(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [flow_limit.FlowLimit]
      >(inspectRes);
    }
    export async function setFlowLimit(
      client: SuiClient,
      args: [string, _0x1.option.Option<bigint>],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.setFlowLimit(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace interchain_token_service {
  export interface InterchainTokenService {
    id: _0x2.object$.UID;
    inner: _0x2.versioned.Versioned;
  }

  export namespace InterchainTokenService {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::InterchainTokenService";

    const TYPE = new TypeDescriptor<InterchainTokenService>(
      InterchainTokenService.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<InterchainTokenService> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function addTrustedChains(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::add_trusted_chains",
        arguments: _args,
      });
    }
    export function allowFunction(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::allow_function",
        arguments: _args,
      });
    }
    export function burnAsDistributor<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::burn_as_distributor",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function channelAddress(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::channel_address",
        arguments: _args,
      });
    }
    export function deployRemoteInterchainToken<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::deploy_remote_interchain_token",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function disallowFunction(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::disallow_function",
        arguments: _args,
      });
    }
    export function giveUnregisteredCoin<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.TreasuryCap<T0> | TransactionArgument,
        _0x2.coin.CoinMetadata<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::give_unregistered_coin",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function mintAsDistributor<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::mint_as_distributor",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function mintToAsDistributor<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPureAddress(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::mint_to_as_distributor",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function packageValue(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::package_value",
        arguments: _args,
      });
    }
    export function prepareInterchainTransfer<T0 = any>(
      tx: Transaction,
      args: [
        token_id.TokenId | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::prepare_interchain_transfer",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function receiveDeployInterchainToken<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.channel.ApprovedMessage
          | TransactionArgument
        ),
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::receive_deploy_interchain_token",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function receiveInterchainTransfer<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.channel.ApprovedMessage
          | TransactionArgument
        ),
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::receive_interchain_transfer",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function receiveInterchainTransferWithData<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.channel.ApprovedMessage
          | TransactionArgument
        ),
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::receive_interchain_transfer_with_data",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function registerCoin<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        coin_info.CoinInfo<T0> | TransactionArgument,
        coin_management.CoinManagement<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::register_coin",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function registerTransaction(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c.transaction.TxCall
          | TransactionArgument
        ),
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::register_transaction",
        arguments: _args,
      });
    }
    export function registeredCoinData<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::registered_coin_data",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function registeredCoinType(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::registered_coin_type",
        arguments: _args,
      });
    }
    export function removeTrustedChains(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::remove_trusted_chains",
        arguments: _args,
      });
    }
    export function sendInterchainTransfer<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | interchain_transfer_ticket.InterchainTransferTicket<T0>
          | TransactionArgument
        ),
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::send_interchain_transfer",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function setFlowLimit<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::set_flow_limit",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function setFlowLimitAsTokenOperator<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::set_flow_limit_as_token_operator",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function setup(
      tx: Transaction,
      args: [
        creator_cap.CreatorCap | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::setup",
        arguments: _args,
      });
    }
    export function transferDistributorship<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        _0x1.option.Option<string> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::transfer_distributorship",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function transferOperatorship<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        _0x1.option.Option<string> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service::transfer_operatorship",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function addTrustedChains(
      client: SuiClient,
      args: [string, string, string[]],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.addTrustedChains(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }

    export async function burnAsDistributor<T0 = any>(
      client: SuiClient,
      args: [string, string, token_id.TokenId, _0x2.coin.Coin<T0>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.burnAsDistributor(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function channelAddress(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.channelAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function deployRemoteInterchainToken<T0 = any>(
      client: SuiClient,
      args: [string, token_id.TokenId, _0x1.ascii.String],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<
        [
          _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.message_ticket.MessageTicket,
        ]
      >
    > {
      const tx = new Transaction();
      builder.deployRemoteInterchainToken(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.message_ticket.MessageTicket,
        ]
      >(inspectRes);
    }

    export async function giveUnregisteredCoin<T0 = any>(
      client: SuiClient,
      args: [string, _0x2.coin.TreasuryCap<T0>, _0x2.coin.CoinMetadata<T0>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.giveUnregisteredCoin(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function mintAsDistributor<T0 = any>(
      client: SuiClient,
      args: [string, string, token_id.TokenId, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.mintAsDistributor(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function mintToAsDistributor<T0 = any>(
      client: SuiClient,
      args: [string, string, token_id.TokenId, string, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.mintToAsDistributor(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function packageValue(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.packageValue(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function prepareInterchainTransfer<T0 = any>(
      client: SuiClient,
      args: [
        token_id.TokenId,
        _0x2.coin.Coin<T0>,
        _0x1.ascii.String,
        string[],
        string[],
        string,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<
        [interchain_transfer_ticket.InterchainTransferTicket<T0>]
      >
    > {
      const tx = new Transaction();
      builder.prepareInterchainTransfer(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [interchain_transfer_ticket.InterchainTransferTicket<T0>]
      >(inspectRes);
    }
    export async function receiveDeployInterchainToken<T0 = any>(
      client: SuiClient,
      args: [
        string,
        _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.channel.ApprovedMessage,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.receiveDeployInterchainToken(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function receiveInterchainTransfer<T0 = any>(
      client: SuiClient,
      args: [
        string,
        _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.channel.ApprovedMessage,
        string,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.receiveInterchainTransfer(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function receiveInterchainTransferWithData<T0 = any>(
      client: SuiClient,
      args: [
        string,
        _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.channel.ApprovedMessage,
        string,
        string,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<
        [_0x1.ascii.String, number[], number[], _0x2.coin.Coin<T0>]
      >
    > {
      const tx = new Transaction();
      builder.receiveInterchainTransferWithData(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.ascii.String, number[], number[], _0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function registerCoin<T0 = any>(
      client: SuiClient,
      args: [
        string,
        coin_info.CoinInfo<T0>,
        coin_management.CoinManagement<T0>,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[token_id.TokenId]>> {
      const tx = new Transaction();
      builder.registerCoin(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [token_id.TokenId]
      >(inspectRes);
    }
    export async function registerTransaction(
      client: SuiClient,
      args: [
        string,
        string,
        _0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c.transaction.TxCall,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.registerTransaction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function registeredCoinData<T0 = any>(
      client: SuiClient,
      args: [string, token_id.TokenId],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.registeredCoinData(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function registeredCoinType(
      client: SuiClient,
      args: [string, token_id.TokenId],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.registeredCoinType(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function removeTrustedChains(
      client: SuiClient,
      args: [string, string, string[]],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.removeTrustedChains(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function sendInterchainTransfer<T0 = any>(
      client: SuiClient,
      args: [
        string,
        interchain_transfer_ticket.InterchainTransferTicket<T0>,
        string,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<
        [
          _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.message_ticket.MessageTicket,
        ]
      >
    > {
      const tx = new Transaction();
      builder.sendInterchainTransfer(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.message_ticket.MessageTicket,
        ]
      >(inspectRes);
    }
    export async function setFlowLimit<T0 = any>(
      client: SuiClient,
      args: [string, string, token_id.TokenId, _0x1.option.Option<bigint>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.setFlowLimit(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function setFlowLimitAsTokenOperator<T0 = any>(
      client: SuiClient,
      args: [string, string, token_id.TokenId, _0x1.option.Option<bigint>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.setFlowLimitAsTokenOperator(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }

    export async function transferDistributorship<T0 = any>(
      client: SuiClient,
      args: [string, string, token_id.TokenId, _0x1.option.Option<string>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.transferDistributorship(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function transferOperatorship<T0 = any>(
      client: SuiClient,
      args: [string, string, token_id.TokenId, _0x1.option.Option<string>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.transferOperatorship(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace interchain_token_service_v0 {
  export interface InterchainTokenService_v0 {
    channel: _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.channel.Channel;
    trusted_chains: trusted_chains.TrustedChains;
    unregistered_coin_types: _0x2.table.Table<
      token_id.UnregisteredTokenId,
      _0x1.type_name.TypeName
    >;
    unregistered_coins: _0x2.bag.Bag;
    registered_coin_types: _0x2.table.Table<
      token_id.TokenId,
      _0x1.type_name.TypeName
    >;
    registered_coins: _0x2.bag.Bag;
    relayer_discovery_id: _0x2.object$.ID;
    its_hub_address: _0x1.ascii.String;
    chain_name_hash: _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.bytes32.Bytes32;
    version_control: _0x647a3b34b3a16f5f00443bdafd13d281983b2280703ab4f416cf706e6d739087.version_control.VersionControl;
  }

  export namespace InterchainTokenService_v0 {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::InterchainTokenService_v0";

    const TYPE = new TypeDescriptor<InterchainTokenService_v0>(
      InterchainTokenService_v0.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<InterchainTokenService_v0> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function addTrustedChain(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::add_trusted_chain",
        arguments: _args,
      });
    }
    export function addTrustedChains(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::add_trusted_chains",
        arguments: _args,
      });
    }
    export function allowFunction(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::allow_function",
        arguments: _args,
      });
    }
    export function burnAsDistributor<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::burn_as_distributor",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function channel(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::channel",
        arguments: _args,
      });
    }
    export function channelAddress(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::channel_address",
        arguments: _args,
      });
    }
    export function coinData<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::coin_data",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function deployRemoteInterchainToken<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::deploy_remote_interchain_token",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function disallowFunction(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::disallow_function",
        arguments: _args,
      });
    }
    export function giveUnregisteredCoin<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.TreasuryCap<T0> | TransactionArgument,
        _0x2.coin.CoinMetadata<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::give_unregistered_coin",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function mintAsDistributor<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::mint_as_distributor",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function mintToAsDistributor<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPureAddress(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::mint_to_as_distributor",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function new$(
      tx: Transaction,
      args: [
        (
          | _0x647a3b34b3a16f5f00443bdafd13d281983b2280703ab4f416cf706e6d739087.version_control.VersionControl
          | TransactionArgument
        ),
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::new",
        arguments: _args,
      });
    }
    export function receiveDeployInterchainToken<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.channel.ApprovedMessage
          | TransactionArgument
        ),
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::receive_deploy_interchain_token",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function receiveInterchainTransfer<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.channel.ApprovedMessage
          | TransactionArgument
        ),
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::receive_interchain_transfer",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function receiveInterchainTransferWithData<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.channel.ApprovedMessage
          | TransactionArgument
        ),
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::receive_interchain_transfer_with_data",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function registerCoin<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        coin_info.CoinInfo<T0> | TransactionArgument,
        coin_management.CoinManagement<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::register_coin",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function registeredCoinType(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::registered_coin_type",
        arguments: _args,
      });
    }
    export function relayerDiscoveryId(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::relayer_discovery_id",
        arguments: _args,
      });
    }
    export function removeTrustedChain(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::remove_trusted_chain",
        arguments: _args,
      });
    }
    export function removeTrustedChains(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::remove_trusted_chains",
        arguments: _args,
      });
    }
    export function sendInterchainTransfer<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | interchain_transfer_ticket.InterchainTransferTicket<T0>
          | TransactionArgument
        ),
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::send_interchain_transfer",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function setFlowLimit<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::set_flow_limit",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function setFlowLimitAsTokenOperator<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::set_flow_limit_as_token_operator",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function setRelayerDiscoveryId(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::set_relayer_discovery_id",
        arguments: _args,
      });
    }
    export function transferDistributorship<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        _0x1.option.Option<string> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::transfer_distributorship",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function transferOperatorship<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        _0x1.option.Option<string> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::transfer_operatorship",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function unregisteredCoinType(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU8(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::unregistered_coin_type",
        arguments: _args,
      });
    }
    export function versionControl(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_token_service_v0::version_control",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function addTrustedChain(
      client: SuiClient,
      args: [string, _0x1.ascii.String],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.addTrustedChain(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function addTrustedChains(
      client: SuiClient,
      args: [string, string[]],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.addTrustedChains(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function allowFunction(
      client: SuiClient,
      args: [string, bigint, _0x1.ascii.String],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.allowFunction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function burnAsDistributor<T0 = any>(
      client: SuiClient,
      args: [string, string, token_id.TokenId, _0x2.coin.Coin<T0>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.burnAsDistributor(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function channel(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.channel(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function channelAddress(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.channelAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function coinData<T0 = any>(
      client: SuiClient,
      args: [string, token_id.TokenId],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.coinData(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function deployRemoteInterchainToken<T0 = any>(
      client: SuiClient,
      args: [string, token_id.TokenId, _0x1.ascii.String],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<
        [
          _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.message_ticket.MessageTicket,
        ]
      >
    > {
      const tx = new Transaction();
      builder.deployRemoteInterchainToken(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.message_ticket.MessageTicket,
        ]
      >(inspectRes);
    }
    export async function disallowFunction(
      client: SuiClient,
      args: [string, bigint, _0x1.ascii.String],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.disallowFunction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function giveUnregisteredCoin<T0 = any>(
      client: SuiClient,
      args: [string, _0x2.coin.TreasuryCap<T0>, _0x2.coin.CoinMetadata<T0>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.giveUnregisteredCoin(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function mintAsDistributor<T0 = any>(
      client: SuiClient,
      args: [string, string, token_id.TokenId, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.mintAsDistributor(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function mintToAsDistributor<T0 = any>(
      client: SuiClient,
      args: [string, string, token_id.TokenId, string, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.mintToAsDistributor(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function new$(
      client: SuiClient,
      args: [
        _0x647a3b34b3a16f5f00443bdafd13d281983b2280703ab4f416cf706e6d739087.version_control.VersionControl,
        _0x1.ascii.String,
        _0x1.ascii.String,
      ],
    ): Promise<
      TypedDevInspectResults<
        [interchain_token_service_v0.InterchainTokenService_v0]
      >
    > {
      const tx = new Transaction();
      builder.new$(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [interchain_token_service_v0.InterchainTokenService_v0]
      >(inspectRes);
    }
    export async function receiveDeployInterchainToken<T0 = any>(
      client: SuiClient,
      args: [
        string,
        _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.channel.ApprovedMessage,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.receiveDeployInterchainToken(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function receiveInterchainTransfer<T0 = any>(
      client: SuiClient,
      args: [
        string,
        _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.channel.ApprovedMessage,
        string,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.receiveInterchainTransfer(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function receiveInterchainTransferWithData<T0 = any>(
      client: SuiClient,
      args: [
        string,
        _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.channel.ApprovedMessage,
        string,
        string,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<
        [_0x1.ascii.String, number[], number[], _0x2.coin.Coin<T0>]
      >
    > {
      const tx = new Transaction();
      builder.receiveInterchainTransferWithData(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.ascii.String, number[], number[], _0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function registerCoin<T0 = any>(
      client: SuiClient,
      args: [
        string,
        coin_info.CoinInfo<T0>,
        coin_management.CoinManagement<T0>,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[token_id.TokenId]>> {
      const tx = new Transaction();
      builder.registerCoin(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [token_id.TokenId]
      >(inspectRes);
    }
    export async function registeredCoinType(
      client: SuiClient,
      args: [string, token_id.TokenId],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.registeredCoinType(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function relayerDiscoveryId(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[_0x2.object$.ID]>> {
      const tx = new Transaction();
      builder.relayerDiscoveryId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.object$.ID]
      >(inspectRes);
    }
    export async function removeTrustedChain(
      client: SuiClient,
      args: [string, _0x1.ascii.String],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.removeTrustedChain(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function removeTrustedChains(
      client: SuiClient,
      args: [string, string[]],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.removeTrustedChains(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function sendInterchainTransfer<T0 = any>(
      client: SuiClient,
      args: [
        string,
        interchain_transfer_ticket.InterchainTransferTicket<T0>,
        bigint,
        string,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<
        [
          _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.message_ticket.MessageTicket,
        ]
      >
    > {
      const tx = new Transaction();
      builder.sendInterchainTransfer(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.message_ticket.MessageTicket,
        ]
      >(inspectRes);
    }
    export async function setFlowLimit<T0 = any>(
      client: SuiClient,
      args: [string, token_id.TokenId, _0x1.option.Option<bigint>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.setFlowLimit(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function setFlowLimitAsTokenOperator<T0 = any>(
      client: SuiClient,
      args: [string, string, token_id.TokenId, _0x1.option.Option<bigint>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.setFlowLimitAsTokenOperator(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function setRelayerDiscoveryId(
      client: SuiClient,
      args: [string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.setRelayerDiscoveryId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function transferDistributorship<T0 = any>(
      client: SuiClient,
      args: [string, string, token_id.TokenId, _0x1.option.Option<string>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.transferDistributorship(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function transferOperatorship<T0 = any>(
      client: SuiClient,
      args: [string, string, token_id.TokenId, _0x1.option.Option<string>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.transferOperatorship(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function unregisteredCoinType(
      client: SuiClient,
      args: [string, string, number],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.unregisteredCoinType(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function versionControl(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.versionControl(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
  }
}

export namespace interchain_transfer_ticket {
  export interface InterchainTransferTicket<T0> {
    token_id: token_id.TokenId;
    balance: _0x2.balance.Balance<T0>;
    source_address: string;
    destination_chain: _0x1.ascii.String;
    destination_address: number[];
    metadata: number[];
    version: bigint;
  }

  export namespace InterchainTransferTicket {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_transfer_ticket::InterchainTransferTicket";

    const TYPE = new TypeDescriptor<InterchainTransferTicket<any>>(
      InterchainTransferTicket.TYPE_QNAME,
    );

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<InterchainTransferTicket<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export namespace builder {
    export function destroy<T0 = any>(
      tx: Transaction,
      args: [
        | interchain_transfer_ticket.InterchainTransferTicket<T0>
        | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_transfer_ticket::destroy",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function new$<T0 = any>(
      tx: Transaction,
      args: [
        token_id.TokenId | TransactionArgument,
        _0x2.balance.Balance<T0> | TransactionArgument,
        string | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPureAddress(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrPureU64(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::interchain_transfer_ticket::new",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function destroy<T0 = any>(
      client: SuiClient,
      args: [interchain_transfer_ticket.InterchainTransferTicket<T0>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<
        [
          token_id.TokenId,
          _0x2.balance.Balance<T0>,
          string,
          _0x1.ascii.String,
          number[],
          number[],
          bigint,
        ]
      >
    > {
      const tx = new Transaction();
      builder.destroy(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          token_id.TokenId,
          _0x2.balance.Balance<T0>,
          string,
          _0x1.ascii.String,
          number[],
          number[],
          bigint,
        ]
      >(inspectRes);
    }
    export async function new$<T0 = any>(
      client: SuiClient,
      args: [
        token_id.TokenId,
        _0x2.balance.Balance<T0>,
        string,
        _0x1.ascii.String,
        string[],
        string[],
        bigint,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<
        [interchain_transfer_ticket.InterchainTransferTicket<T0>]
      >
    > {
      const tx = new Transaction();
      builder.new$(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [interchain_transfer_ticket.InterchainTransferTicket<T0>]
      >(inspectRes);
    }
  }
}

export namespace operator_cap {
  export interface OperatorCap {
    id: _0x2.object$.UID;
  }

  export namespace OperatorCap {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::operator_cap::OperatorCap";

    const TYPE = new TypeDescriptor<OperatorCap>(OperatorCap.TYPE_QNAME);

    export function type(): TypeDescriptor<OperatorCap> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function create(
      tx: Transaction,
      args: [],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::operator_cap::create",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function create(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[operator_cap.OperatorCap]>> {
      const tx = new Transaction();
      builder.create(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [operator_cap.OperatorCap]
      >(inspectRes);
    }
  }
}

export namespace owner_cap {
  export interface OwnerCap {
    id: _0x2.object$.UID;
  }

  export namespace OwnerCap {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::owner_cap::OwnerCap";

    const TYPE = new TypeDescriptor<OwnerCap>(OwnerCap.TYPE_QNAME);

    export function type(): TypeDescriptor<OwnerCap> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function create(
      tx: Transaction,
      args: [],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::owner_cap::create",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function create(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[owner_cap.OwnerCap]>> {
      const tx = new Transaction();
      builder.create(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [owner_cap.OwnerCap]
      >(inspectRes);
    }
  }
}

export namespace token_id {
  export interface TokenId {
    id: string;
  }

  export namespace TokenId {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::token_id::TokenId";

    const TYPE = new TypeDescriptor<TokenId>(TokenId.TYPE_QNAME);

    export function type(): TypeDescriptor<TokenId> {
      return TYPE.apply();
    }
  }

  export type TokenIdInstance = TypedEventInstance<TokenId> & {
    data_decoded: TokenId;
    type_arguments: [];
  };

  export interface UnregisteredTokenId {
    id: string;
  }

  export namespace UnregisteredTokenId {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::token_id::UnregisteredTokenId";

    const TYPE = new TypeDescriptor<UnregisteredTokenId>(
      UnregisteredTokenId.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<UnregisteredTokenId> {
      return TYPE.apply();
    }
  }

  export type UnregisteredTokenIdInstance =
    TypedEventInstance<UnregisteredTokenId> & {
      data_decoded: UnregisteredTokenId;
      type_arguments: [];
    };

  export namespace builder {
    export function fromAddress(
      tx: Transaction,
      args: [string | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureAddress(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::token_id::from_address",
        arguments: _args,
      });
    }
    export function fromCoinData<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::token_id::from_coin_data",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function fromInfo<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::token_id::from_info",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function fromU256(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU256(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::token_id::from_u256",
        arguments: _args,
      });
    }
    export function toU256(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::token_id::to_u256",
        arguments: _args,
      });
    }
    export function unregisteredTokenId(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU8(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::token_id::unregistered_token_id",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function fromAddress(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[token_id.TokenId]>> {
      const tx = new Transaction();
      builder.fromAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [token_id.TokenId]
      >(inspectRes);
    }
    export async function fromCoinData<T0 = any>(
      client: SuiClient,
      args: [string, string, string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[token_id.TokenId]>> {
      const tx = new Transaction();
      builder.fromCoinData(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [token_id.TokenId]
      >(inspectRes);
    }
    export async function fromInfo<T0 = any>(
      client: SuiClient,
      args: [string, string, string, string, string, string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[token_id.TokenId]>> {
      const tx = new Transaction();
      builder.fromInfo(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [token_id.TokenId]
      >(inspectRes);
    }
    export async function fromU256(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[token_id.TokenId]>> {
      const tx = new Transaction();
      builder.fromU256(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [token_id.TokenId]
      >(inspectRes);
    }
    export async function toU256(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.toU256(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function unregisteredTokenId(
      client: SuiClient,
      args: [string, number],
    ): Promise<TypedDevInspectResults<[token_id.UnregisteredTokenId]>> {
      const tx = new Transaction();
      builder.unregisteredTokenId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [token_id.UnregisteredTokenId]
      >(inspectRes);
    }
  }
}

export namespace trusted_chains {
  export interface TrustedChain {
    dummy_field: boolean;
  }

  export namespace TrustedChain {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::trusted_chains::TrustedChain";

    const TYPE = new TypeDescriptor<TrustedChain>(TrustedChain.TYPE_QNAME);

    export function type(): TypeDescriptor<TrustedChain> {
      return TYPE.apply();
    }
  }

  export interface TrustedChains {
    trusted_chains: _0x2.bag.Bag;
  }

  export namespace TrustedChains {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::trusted_chains::TrustedChains";

    const TYPE = new TypeDescriptor<TrustedChains>(TrustedChains.TYPE_QNAME);

    export function type(): TypeDescriptor<TrustedChains> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function add(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::trusted_chains::add",
        arguments: _args,
      });
    }
    export function isTrusted(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::trusted_chains::is_trusted",
        arguments: _args,
      });
    }
    export function new$(tx: Transaction, args: []): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::trusted_chains::new",
        arguments: _args,
      });
    }
    export function remove(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::trusted_chains::remove",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function add(
      client: SuiClient,
      args: [string, _0x1.ascii.String],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.add(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function isTrusted(
      client: SuiClient,
      args: [string, _0x1.ascii.String],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.isTrusted(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function new$(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[trusted_chains.TrustedChains]>> {
      const tx = new Transaction();
      builder.new$(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [trusted_chains.TrustedChains]
      >(inspectRes);
    }
    export async function remove(
      client: SuiClient,
      args: [string, _0x1.ascii.String],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.remove(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace unregistered_coin_data {
  export interface UnregisteredCoinData<T0> {
    treasury_cap: _0x2.coin.TreasuryCap<T0>;
    coin_metadata: _0x2.coin.CoinMetadata<T0>;
  }

  export namespace UnregisteredCoinData {
    export const TYPE_QNAME =
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::unregistered_coin_data::UnregisteredCoinData";

    const TYPE = new TypeDescriptor<UnregisteredCoinData<any>>(
      UnregisteredCoinData.TYPE_QNAME,
    );

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<UnregisteredCoinData<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export namespace builder {
    export function destroy<T0 = any>(
      tx: Transaction,
      args: [
        unregistered_coin_data.UnregisteredCoinData<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::unregistered_coin_data::destroy",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function new$<T0 = any>(
      tx: Transaction,
      args: [
        _0x2.coin.TreasuryCap<T0> | TransactionArgument,
        _0x2.coin.CoinMetadata<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::unregistered_coin_data::new",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function destroy<T0 = any>(
      client: SuiClient,
      args: [unregistered_coin_data.UnregisteredCoinData<T0>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<
        [_0x2.coin.TreasuryCap<T0>, _0x2.coin.CoinMetadata<T0>]
      >
    > {
      const tx = new Transaction();
      builder.destroy(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.TreasuryCap<T0>, _0x2.coin.CoinMetadata<T0>]
      >(inspectRes);
    }
    export async function new$<T0 = any>(
      client: SuiClient,
      args: [_0x2.coin.TreasuryCap<T0>, _0x2.coin.CoinMetadata<T0>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<[unregistered_coin_data.UnregisteredCoinData<T0>]>
    > {
      const tx = new Transaction();
      builder.new$(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [unregistered_coin_data.UnregisteredCoinData<T0>]
      >(inspectRes);
    }
  }
}

export namespace utils {
  export namespace builder {
    export function decodeMetadata(
      tx: Transaction,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::utils::decode_metadata",
        arguments: _args,
      });
    }
    export function isLowercase(
      tx: Transaction,
      args: [number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU8(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::utils::is_lowercase",
        arguments: _args,
      });
    }
    export function isNumber(
      tx: Transaction,
      args: [number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU8(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::utils::is_number",
        arguments: _args,
      });
    }
    export function isUppercase(
      tx: Transaction,
      args: [number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU8(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::utils::is_uppercase",
        arguments: _args,
      });
    }
    export function moduleFromSymbol(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca::utils::module_from_symbol",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function decodeMetadata(
      client: SuiClient,
      args: [string[]],
    ): Promise<TypedDevInspectResults<[number, number[]]>> {
      const tx = new Transaction();
      builder.decodeMetadata(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [number, number[]]
      >(inspectRes);
    }

    export async function moduleFromSymbol(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[_0x1.ascii.String]>> {
      const tx = new Transaction();
      builder.moduleFromSymbol(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.ascii.String]
      >(inspectRes);
    }
  }
}

const MODULES = JSON.parse(
  '{"coin_data":{"fileFormatVersion":6,"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"coin_data","friends":[{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"interchain_token_service_v0"}],"structs":{"CoinData":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"coin_management","type":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}},{"name":"coin_info","type":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}}]}},"exposedFunctions":{"coin_info":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_data","name":"CoinData","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}}]},"coin_management":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_data","name":"CoinData","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}}]},"coin_management_mut":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_data","name":"CoinData","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}}]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_data","name":"CoinData","typeArguments":[{"TypeParameter":0}]}}]}}},"coin_info":{"fileFormatVersion":6,"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"coin_info","friends":[],"structs":{"CoinInfo":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"name","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"symbol","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"decimals","type":"U8"},{"name":"metadata","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}]}}}]}},"exposedFunctions":{"decimals":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}}],"return":["U8"]},"from_info":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},"U8"],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}]},"from_metadata":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}]},"metadata":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}]}}}]},"name":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"symbol":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}]}}},"coin_management":{"fileFormatVersion":6,"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"coin_management","friends":[{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"interchain_token_service_v0"}],"structs":{"CoinManagement":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"treasury_cap","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}]}}},{"name":"balance","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}]}}},{"name":"distributor","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}},{"name":"operator","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}},{"name":"flow_limit","type":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"flow_limit","name":"FlowLimit","typeArguments":[]}}},{"name":"dust","type":"U256"}]}},"exposedFunctions":{"add_distributor":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}},"Address"],"return":[]},"add_operator":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}},"Address"],"return":[]},"burn":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"distributor":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}}]},"give_coin":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}},"U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"has_treasury_cap":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}}],"return":["Bool"]},"is_distributor":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}},"Address"],"return":["Bool"]},"mint":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"new_locked":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}]},"new_with_cap":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}]},"operator":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}}]},"set_flow_limit":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"Channel","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}}],"return":[]},"set_flow_limit_internal":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}}],"return":[]},"take_balance":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":["U64"]},"treasury_cap":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}]}}}]},"update_distributorship":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}],"return":[]},"update_operatorship":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"Channel","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}],"return":[]}}},"creator_cap":{"fileFormatVersion":6,"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"creator_cap","friends":[{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"interchain_token_service"}],"structs":{"CreatorCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]}},"exposedFunctions":{"create":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"creator_cap","name":"CreatorCap","typeArguments":[]}}]},"destroy":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"creator_cap","name":"CreatorCap","typeArguments":[]}}],"return":[]}}},"discovery":{"fileFormatVersion":6,"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"discovery","friends":[],"structs":{},"exposedFunctions":{"call_info":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Vector":"U8"}],"return":[{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"transaction","name":"TxCall","typeArguments":[]}}]},"interchain_transfer_info":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},"Address","U64",{"Vector":"U8"}]},"register_transaction":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"discovery","name":"RelayerDiscovery","typeArguments":[]}}}],"return":[]}}},"events":{"fileFormatVersion":6,"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"events","friends":[{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"interchain_token_service_v0"},{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"trusted_chains"}],"structs":{"CoinRegistered":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"token_id","type":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}}}]},"DistributorshipTransfered":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"token_id","type":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}}},{"name":"new_distributor","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}}]},"FlowLimitSet":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"token_id","type":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}}},{"name":"flow_limit","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}}}]},"InterchainTokenDeploymentStarted":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"token_id","type":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}}},{"name":"name","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"symbol","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"decimals","type":"U8"},{"name":"destination_chain","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}]},"InterchainTransfer":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"token_id","type":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}}},{"name":"source_address","type":"Address"},{"name":"destination_chain","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"destination_address","type":{"Vector":"U8"}},{"name":"amount","type":"U64"},{"name":"data_hash","type":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"bytes32","name":"Bytes32","typeArguments":[]}}}]},"InterchainTransferReceived":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"message_id","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"token_id","type":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}}},{"name":"source_chain","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"source_address","type":{"Vector":"U8"}},{"name":"destination_address","type":"Address"},{"name":"amount","type":"U64"},{"name":"data_hash","type":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"bytes32","name":"Bytes32","typeArguments":[]}}}]},"OperatorshipTransfered":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"token_id","type":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}}},{"name":"new_operator","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}}]},"TrustedChainAdded":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"chain_name","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}]},"TrustedChainRemoved":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"chain_name","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}]},"UnregisteredCoinReceived":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"token_id","type":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"UnregisteredTokenId","typeArguments":[]}}},{"name":"symbol","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"decimals","type":"U8"}]}},"exposedFunctions":{"coin_registered":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}}],"return":[]},"distributorship_transfered":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}],"return":[]},"flow_limit_set":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}}],"return":[]},"interchain_token_deployment_started":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},"U8",{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[]},"interchain_transfer":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},"Address",{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Vector":"U8"},"U64",{"Reference":{"Vector":"U8"}}],"return":[]},"interchain_transfer_received":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Vector":"U8"},"Address","U64",{"Reference":{"Vector":"U8"}}],"return":[]},"operatorship_transfered":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}],"return":[]},"trusted_chain_added":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[]},"trusted_chain_removed":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[]},"unregistered_coin_received":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"UnregisteredTokenId","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},"U8"],"return":[]}}},"flow_limit":{"fileFormatVersion":6,"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"flow_limit","friends":[{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"coin_management"}],"structs":{"FlowLimit":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"flow_limit","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}}},{"name":"flow_in","type":"U128"},{"name":"flow_out","type":"U128"},{"name":"current_epoch","type":"U64"}]}},"exposedFunctions":{"add_flow_in":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"flow_limit","name":"FlowLimit","typeArguments":[]}}},"U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[]},"add_flow_out":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"flow_limit","name":"FlowLimit","typeArguments":[]}}},"U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"flow_limit","name":"FlowLimit","typeArguments":[]}}]},"set_flow_limit":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"flow_limit","name":"FlowLimit","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}}],"return":[]}}},"interchain_token_service":{"fileFormatVersion":6,"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"interchain_token_service","friends":[{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"discovery"}],"structs":{"InterchainTokenService":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"inner","type":{"Struct":{"address":"0x2","module":"versioned","name":"Versioned","typeArguments":[]}}}]}},"exposedFunctions":{"add_trusted_chains":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"owner_cap","name":"OwnerCap","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}],"return":[]},"allow_function":{"visibility":"Private","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"owner_cap","name":"OwnerCap","typeArguments":[]}}},"U64",{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[]},"burn_as_distributor":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"Channel","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"channel_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}}],"return":["Address"]},"deploy_remote_interchain_token":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"message_ticket","name":"MessageTicket","typeArguments":[]}}]},"disallow_function":{"visibility":"Private","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"owner_cap","name":"OwnerCap","typeArguments":[]}}},"U64",{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[]},"give_unregistered_coin":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"mint_as_distributor":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"Channel","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"mint_to_as_distributor":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"Channel","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},"Address","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"package_value":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}}]},"prepare_interchain_transfer":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Vector":"U8"},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"Channel","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_transfer_ticket","name":"InterchainTransferTicket","typeArguments":[{"TypeParameter":0}]}}]},"receive_deploy_interchain_token":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"ApprovedMessage","typeArguments":[]}}],"return":[]},"receive_interchain_transfer":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"ApprovedMessage","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"receive_interchain_transfer_with_data":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"ApprovedMessage","typeArguments":[]}},{"Reference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"Channel","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Vector":"U8"},{"Vector":"U8"},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"register_coin":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}}]},"register_transaction":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"discovery","name":"RelayerDiscovery","typeArguments":[]}}},{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"transaction","name":"TxCall","typeArguments":[]}}],"return":[]},"registered_coin_data":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}}],"return":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_data","name":"CoinData","typeArguments":[{"TypeParameter":0}]}}}]},"registered_coin_type":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}}]},"remove_trusted_chains":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"owner_cap","name":"OwnerCap","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}],"return":[]},"send_interchain_transfer":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_transfer_ticket","name":"InterchainTransferTicket","typeArguments":[{"TypeParameter":0}]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"message_ticket","name":"MessageTicket","typeArguments":[]}}]},"set_flow_limit":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"operator_cap","name":"OperatorCap","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}}],"return":[]},"set_flow_limit_as_token_operator":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"Channel","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}}],"return":[]},"setup":{"visibility":"Private","isEntry":true,"typeParameters":[],"parameters":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"creator_cap","name":"CreatorCap","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"transfer_distributorship":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"Channel","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}],"return":[]},"transfer_operatorship":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service","name":"InterchainTokenService","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"Channel","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}],"return":[]}}},"interchain_token_service_v0":{"fileFormatVersion":6,"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"interchain_token_service_v0","friends":[{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"discovery"},{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"interchain_token_service"}],"structs":{"InterchainTokenService_v0":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"channel","type":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"Channel","typeArguments":[]}}},{"name":"trusted_chains","type":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"trusted_chains","name":"TrustedChains","typeArguments":[]}}},{"name":"unregistered_coin_types","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"UnregisteredTokenId","typeArguments":[]}},{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}]}}},{"name":"unregistered_coins","type":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}},{"name":"registered_coin_types","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}]}}},{"name":"registered_coins","type":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}},{"name":"relayer_discovery_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"its_hub_address","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"chain_name_hash","type":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"bytes32","name":"Bytes32","typeArguments":[]}}},{"name":"version_control","type":{"Struct":{"address":"0x647a3b34b3a16f5f00443bdafd13d281983b2280703ab4f416cf706e6d739087","module":"version_control","name":"VersionControl","typeArguments":[]}}}]}},"exposedFunctions":{"add_trusted_chain":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[]},"add_trusted_chains":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}],"return":[]},"allow_function":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},"U64",{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[]},"burn_as_distributor":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"Channel","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"channel":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"Channel","typeArguments":[]}}}]},"channel_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}}],"return":["Address"]},"coin_data":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}}],"return":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_data","name":"CoinData","typeArguments":[{"TypeParameter":0}]}}}]},"deploy_remote_interchain_token":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"message_ticket","name":"MessageTicket","typeArguments":[]}}]},"disallow_function":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},"U64",{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[]},"give_unregistered_coin":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"mint_as_distributor":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"Channel","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"mint_to_as_distributor":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"Channel","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},"Address","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x647a3b34b3a16f5f00443bdafd13d281983b2280703ab4f416cf706e6d739087","module":"version_control","name":"VersionControl","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}]},"receive_deploy_interchain_token":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"ApprovedMessage","typeArguments":[]}}],"return":[]},"receive_interchain_transfer":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"ApprovedMessage","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"receive_interchain_transfer_with_data":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"ApprovedMessage","typeArguments":[]}},{"Reference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"Channel","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Vector":"U8"},{"Vector":"U8"},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"register_coin":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}}]},"registered_coin_type":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}}]},"relayer_discovery_id":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"remove_trusted_chain":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[]},"remove_trusted_chains":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}],"return":[]},"send_interchain_transfer":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_transfer_ticket","name":"InterchainTransferTicket","typeArguments":[{"TypeParameter":0}]}},"U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"message_ticket","name":"MessageTicket","typeArguments":[]}}]},"set_flow_limit":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}}],"return":[]},"set_flow_limit_as_token_operator":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"Channel","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}}],"return":[]},"set_relayer_discovery_id":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"discovery","name":"RelayerDiscovery","typeArguments":[]}}}],"return":[]},"transfer_distributorship":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"Channel","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}],"return":[]},"transfer_operatorship":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"Channel","typeArguments":[]}}},{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}],"return":[]},"unregistered_coin_type":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},"U8"],"return":[{"Reference":{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}}]},"version_control":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_token_service_v0","name":"InterchainTokenService_v0","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x647a3b34b3a16f5f00443bdafd13d281983b2280703ab4f416cf706e6d739087","module":"version_control","name":"VersionControl","typeArguments":[]}}}]}}},"interchain_transfer_ticket":{"fileFormatVersion":6,"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"interchain_transfer_ticket","friends":[{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"interchain_token_service"},{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"interchain_token_service_v0"}],"structs":{"InterchainTransferTicket":{"abilities":{"abilities":[]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"token_id","type":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}}},{"name":"balance","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}},{"name":"source_address","type":"Address"},{"name":"destination_chain","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"destination_address","type":{"Vector":"U8"}},{"name":"metadata","type":{"Vector":"U8"}},{"name":"version","type":"U64"}]}},"exposedFunctions":{"destroy":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_transfer_ticket","name":"InterchainTransferTicket","typeArguments":[{"TypeParameter":0}]}}],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}},"Address",{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Vector":"U8"},{"Vector":"U8"},"U64"]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}},"Address",{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Vector":"U8"},{"Vector":"U8"},"U64"],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"interchain_transfer_ticket","name":"InterchainTransferTicket","typeArguments":[{"TypeParameter":0}]}}]}}},"operator_cap":{"fileFormatVersion":6,"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"operator_cap","friends":[{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"interchain_token_service"}],"structs":{"OperatorCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]}},"exposedFunctions":{"create":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"operator_cap","name":"OperatorCap","typeArguments":[]}}]}}},"owner_cap":{"fileFormatVersion":6,"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"owner_cap","friends":[{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"interchain_token_service"}],"structs":{"OwnerCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]}},"exposedFunctions":{"create":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"owner_cap","name":"OwnerCap","typeArguments":[]}}]}}},"token_id":{"fileFormatVersion":6,"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"token_id","friends":[{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"interchain_token_service_v0"}],"structs":{"TokenId":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"id","type":"Address"}]},"UnregisteredTokenId":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"id","type":"Address"}]}},"exposedFunctions":{"from_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["Address"],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}}]},"from_coin_data":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"bytes32","name":"Bytes32","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}}]},"from_info":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"bytes32","name":"Bytes32","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"Reference":"U8"},{"Reference":"Bool"},{"Reference":"Bool"}],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}}]},"from_u256":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U256"],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}}]},"to_u256":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"TokenId","typeArguments":[]}}}],"return":["U256"]},"unregistered_token_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},"U8"],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"token_id","name":"UnregisteredTokenId","typeArguments":[]}}]}}},"trusted_chains":{"fileFormatVersion":6,"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"trusted_chains","friends":[{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"interchain_token_service_v0"}],"structs":{"TrustedChain":{"abilities":{"abilities":["Drop","Store"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"TrustedChains":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"trusted_chains","type":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}}]}},"exposedFunctions":{"add":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"trusted_chains","name":"TrustedChains","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[]},"is_trusted":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"trusted_chains","name":"TrustedChains","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":["Bool"]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"trusted_chains","name":"TrustedChains","typeArguments":[]}}]},"remove":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"trusted_chains","name":"TrustedChains","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[]}}},"unregistered_coin_data":{"fileFormatVersion":6,"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"unregistered_coin_data","friends":[{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"interchain_token_service_v0"}],"structs":{"UnregisteredCoinData":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"treasury_cap","type":{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}},{"name":"coin_metadata","type":{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}}]}},"exposedFunctions":{"destroy":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"unregistered_coin_data","name":"UnregisteredCoinData","typeArguments":[{"TypeParameter":0}]}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}],"return":[{"Struct":{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","module":"unregistered_coin_data","name":"UnregisteredCoinData","typeArguments":[{"TypeParameter":0}]}}]}}},"utils":{"fileFormatVersion":6,"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"utils","friends":[{"address":"0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca","name":"interchain_token_service_v0"}],"structs":{},"exposedFunctions":{"decode_metadata":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":["U32",{"Vector":"U8"}]},"is_lowercase":{"visibility":"Private","isEntry":true,"typeParameters":[],"parameters":["U8"],"return":["Bool"]},"is_number":{"visibility":"Private","isEntry":true,"typeParameters":[],"parameters":["U8"],"return":["Bool"]},"is_uppercase":{"visibility":"Private","isEntry":true,"typeParameters":[],"parameters":["U8"],"return":["Bool"]},"module_from_symbol":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}]}}}}',
);

export function loadAllTypes(coder: MoveCoder) {
  _0x1.loadAllTypes(coder);
  _0x2.loadAllTypes(coder);
  _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.loadAllTypes(
    coder,
  );
  _0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c.loadAllTypes(
    coder,
  );
  _0x647a3b34b3a16f5f00443bdafd13d281983b2280703ab4f416cf706e6d739087.loadAllTypes(
    coder,
  );
  for (const m of Object.values(MODULES)) {
    coder.load(
      m as any,
      "0xc3c0222e59c9d3b34ab804840e271ef9a0e6f0adcc280133c9db9b9e060887ca",
    );
  }
}

loadAllTypes(defaultMoveCoder());
