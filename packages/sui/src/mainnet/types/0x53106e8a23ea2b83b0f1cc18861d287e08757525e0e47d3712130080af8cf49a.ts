/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

/* Generated types for 0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a, original address 0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a */

import { TypeDescriptor, ANY_TYPE } from "@typemove/move";
import { MoveCoder, TypedEventInstance } from "@typemove/sui";

import { defaultMoveCoder } from "@typemove/sui";

import {
  ZERO_ADDRESS,
  TypedDevInspectResults,
  getMoveCoder,
} from "@typemove/sui";
import {
  Transaction,
  TransactionArgument,
  TransactionObjectArgument,
} from "@mysten/sui/transactions";
import { SuiClient } from "@mysten/sui/client";
import {
  transactionArgumentOrObject,
  transactionArgumentOrVec,
  transactionArgumentOrPure,
  transactionArgumentOrPureU8,
  transactionArgumentOrPureU16,
  transactionArgumentOrPureU32,
  transactionArgumentOrPureU64,
  transactionArgumentOrPureU128,
  transactionArgumentOrPureU256,
  transactionArgumentOrPureBool,
  transactionArgumentOrPureString,
  transactionArgumentOrPureAddress,
} from "@typemove/sui";

export namespace abi {
  export interface AbiReader {
    bytes: number[];
    head: bigint;
    pos: bigint;
  }

  export namespace AbiReader {
    export const TYPE_QNAME =
      "0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a::abi::AbiReader";

    const TYPE = new TypeDescriptor<AbiReader>(AbiReader.TYPE_QNAME);

    export function type(): TypeDescriptor<AbiReader> {
      return TYPE.apply();
    }
  }

  export type AbiReaderInstance = TypedEventInstance<AbiReader> & {
    data_decoded: AbiReader;
    type_arguments: [];
  };

  export interface AbiWriter {
    bytes: number[];
    pos: bigint;
  }

  export namespace AbiWriter {
    export const TYPE_QNAME =
      "0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a::abi::AbiWriter";

    const TYPE = new TypeDescriptor<AbiWriter>(AbiWriter.TYPE_QNAME);

    export function type(): TypeDescriptor<AbiWriter> {
      return TYPE.apply();
    }
  }

  export type AbiWriterInstance = TypedEventInstance<AbiWriter> & {
    data_decoded: AbiWriter;
    type_arguments: [];
  };

  export namespace builder {
    export function intoBytes(
      tx: Transaction,
      args: [abi.AbiWriter | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a::abi::into_bytes",
        arguments: _args,
      });
    }
    export function newReader(
      tx: Transaction,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a::abi::new_reader",
        arguments: _args,
      });
    }
    export function newWriter(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a::abi::new_writer",
        arguments: _args,
      });
    }
    export function readBytes(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a::abi::read_bytes",
        arguments: _args,
      });
    }
    export function readBytesRaw(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a::abi::read_bytes_raw",
        arguments: _args,
      });
    }
    export function readU256(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a::abi::read_u256",
        arguments: _args,
      });
    }
    export function readU8(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a::abi::read_u8",
        arguments: _args,
      });
    }
    export function readVectorBytes(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a::abi::read_vector_bytes",
        arguments: _args,
      });
    }
    export function readVectorU256(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a::abi::read_vector_u256",
        arguments: _args,
      });
    }
    export function skipSlot(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a::abi::skip_slot",
        arguments: _args,
      });
    }
    export function writeBytes(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a::abi::write_bytes",
        arguments: _args,
      });
    }
    export function writeBytesRaw(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a::abi::write_bytes_raw",
        arguments: _args,
      });
    }
    export function writeU256(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU256(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a::abi::write_u256",
        arguments: _args,
      });
    }
    export function writeU8(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU8(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a::abi::write_u8",
        arguments: _args,
      });
    }
    export function writeVectorBytes(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a::abi::write_vector_bytes",
        arguments: _args,
      });
    }
    export function writeVectorU256(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a::abi::write_vector_u256",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function intoBytes(
      client: SuiClient,
      args: [abi.AbiWriter],
    ): Promise<TypedDevInspectResults<[number[]]>> {
      const tx = new Transaction();
      builder.intoBytes(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number[]]>(
        inspectRes,
      );
    }
    export async function newReader(
      client: SuiClient,
      args: [string[]],
    ): Promise<TypedDevInspectResults<[abi.AbiReader]>> {
      const tx = new Transaction();
      builder.newReader(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [abi.AbiReader]
      >(inspectRes);
    }
    export async function newWriter(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[abi.AbiWriter]>> {
      const tx = new Transaction();
      builder.newWriter(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [abi.AbiWriter]
      >(inspectRes);
    }
    export async function readBytes(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[number[]]>> {
      const tx = new Transaction();
      builder.readBytes(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number[]]>(
        inspectRes,
      );
    }
    export async function readBytesRaw(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[number[]]>> {
      const tx = new Transaction();
      builder.readBytesRaw(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number[]]>(
        inspectRes,
      );
    }
    export async function readU256(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.readU256(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function readU8(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.readU8(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function readVectorBytes(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[number[][]]>> {
      const tx = new Transaction();
      builder.readVectorBytes(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number[][]]>(
        inspectRes,
      );
    }
    export async function readVectorU256(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint[]]>> {
      const tx = new Transaction();
      builder.readVectorU256(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint[]]>(
        inspectRes,
      );
    }
    export async function skipSlot(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.skipSlot(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function writeBytes(
      client: SuiClient,
      args: [string, string[]],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.writeBytes(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function writeBytesRaw(
      client: SuiClient,
      args: [string, string[]],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.writeBytesRaw(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function writeU256(
      client: SuiClient,
      args: [string, bigint],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.writeU256(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function writeU8(
      client: SuiClient,
      args: [string, number],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.writeU8(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function writeVectorBytes(
      client: SuiClient,
      args: [string, string[]],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.writeVectorBytes(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function writeVectorU256(
      client: SuiClient,
      args: [string, string[]],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.writeVectorU256(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
  }
}

const MODULES = JSON.parse(
  '{"abi":{"fileFormatVersion":6,"address":"0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a","name":"abi","friends":[],"structs":{"AbiReader":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"bytes","type":{"Vector":"U8"}},{"name":"head","type":"U64"},{"name":"pos","type":"U64"}]},"AbiWriter":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"bytes","type":{"Vector":"U8"}},{"name":"pos","type":"U64"}]}},"exposedFunctions":{"into_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a","module":"abi","name":"AbiWriter","typeArguments":[]}}],"return":[{"Vector":"U8"}]},"new_reader":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Struct":{"address":"0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a","module":"abi","name":"AbiReader","typeArguments":[]}}]},"new_writer":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":[{"Struct":{"address":"0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a","module":"abi","name":"AbiWriter","typeArguments":[]}}]},"read_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a","module":"abi","name":"AbiReader","typeArguments":[]}}}],"return":[{"Vector":"U8"}]},"read_bytes_raw":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a","module":"abi","name":"AbiReader","typeArguments":[]}}}],"return":[{"Vector":"U8"}]},"read_u256":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a","module":"abi","name":"AbiReader","typeArguments":[]}}}],"return":["U256"]},"read_u8":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a","module":"abi","name":"AbiReader","typeArguments":[]}}}],"return":["U8"]},"read_vector_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a","module":"abi","name":"AbiReader","typeArguments":[]}}}],"return":[{"Vector":{"Vector":"U8"}}]},"read_vector_u256":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a","module":"abi","name":"AbiReader","typeArguments":[]}}}],"return":[{"Vector":"U256"}]},"skip_slot":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a","module":"abi","name":"AbiReader","typeArguments":[]}}}],"return":[]},"write_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a","module":"abi","name":"AbiWriter","typeArguments":[]}}},{"Vector":"U8"}],"return":[{"MutableReference":{"Struct":{"address":"0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a","module":"abi","name":"AbiWriter","typeArguments":[]}}}]},"write_bytes_raw":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a","module":"abi","name":"AbiWriter","typeArguments":[]}}},{"Vector":"U8"}],"return":[{"MutableReference":{"Struct":{"address":"0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a","module":"abi","name":"AbiWriter","typeArguments":[]}}}]},"write_u256":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a","module":"abi","name":"AbiWriter","typeArguments":[]}}},"U256"],"return":[{"MutableReference":{"Struct":{"address":"0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a","module":"abi","name":"AbiWriter","typeArguments":[]}}}]},"write_u8":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a","module":"abi","name":"AbiWriter","typeArguments":[]}}},"U8"],"return":[{"MutableReference":{"Struct":{"address":"0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a","module":"abi","name":"AbiWriter","typeArguments":[]}}}]},"write_vector_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a","module":"abi","name":"AbiWriter","typeArguments":[]}}},{"Vector":{"Vector":"U8"}}],"return":[{"MutableReference":{"Struct":{"address":"0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a","module":"abi","name":"AbiWriter","typeArguments":[]}}}]},"write_vector_u256":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a","module":"abi","name":"AbiWriter","typeArguments":[]}}},{"Vector":"U256"}],"return":[{"MutableReference":{"Struct":{"address":"0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a","module":"abi","name":"AbiWriter","typeArguments":[]}}}]}}}}',
);

export function loadAllTypes(coder: MoveCoder) {
  for (const m of Object.values(MODULES)) {
    coder.load(
      m as any,
      "0x53106e8a23ea2b83b0f1cc18861d287e08757525e0e47d3712130080af8cf49a",
    );
  }
}

loadAllTypes(defaultMoveCoder());
