/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

/* Generated types for 0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c, original address 0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c */

import { TypeDescriptor, ANY_TYPE } from "@typemove/move";
import { MoveCoder, TypedEventInstance } from "@typemove/sui";

import { defaultMoveCoder } from "@typemove/sui";

import {
  ZERO_ADDRESS,
  TypedDevInspectResults,
  getMoveCoder,
} from "@typemove/sui";
import {
  Transaction,
  TransactionArgument,
  TransactionObjectArgument,
} from "@mysten/sui/transactions";
import { SuiClient } from "@mysten/sui/client";
import {
  transactionArgumentOrObject,
  transactionArgumentOrVec,
  transactionArgumentOrPure,
  transactionArgumentOrPureU8,
  transactionArgumentOrPureU16,
  transactionArgumentOrPureU32,
  transactionArgumentOrPureU64,
  transactionArgumentOrPureU128,
  transactionArgumentOrPureU256,
  transactionArgumentOrPureBool,
  transactionArgumentOrPureString,
  transactionArgumentOrPureAddress,
} from "@typemove/sui";

import * as _0x2 from "@typemove/sui/builtin/0x2";
import * as _0x1 from "@typemove/sui/builtin/0x1";
import * as _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373 from "./0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.js";
import * as _0x647a3b34b3a16f5f00443bdafd13d281983b2280703ab4f416cf706e6d739087 from "./0x647a3b34b3a16f5f00443bdafd13d281983b2280703ab4f416cf706e6d739087.js";

export namespace discovery {
  export interface RelayerDiscovery {
    id: _0x2.object$.UID;
    inner: _0x2.versioned.Versioned;
  }

  export namespace RelayerDiscovery {
    export const TYPE_QNAME =
      "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::discovery::RelayerDiscovery";

    const TYPE = new TypeDescriptor<RelayerDiscovery>(
      RelayerDiscovery.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<RelayerDiscovery> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function allowFunction(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::discovery::allow_function",
        arguments: _args,
      });
    }
    export function disallowFunction(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::discovery::disallow_function",
        arguments: _args,
      });
    }
    export function getTransaction(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::discovery::get_transaction",
        arguments: _args,
      });
    }
    export function registerTransaction(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        transaction.TxCall | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::discovery::register_transaction",
        arguments: _args,
      });
    }
    export function removeTransaction(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::discovery::remove_transaction",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function getTransaction(
      client: SuiClient,
      args: [string, _0x2.object$.ID],
    ): Promise<TypedDevInspectResults<[transaction.TxCall]>> {
      const tx = new Transaction();
      builder.getTransaction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [transaction.TxCall]
      >(inspectRes);
    }
    export async function registerTransaction(
      client: SuiClient,
      args: [string, string, transaction.TxCall],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.registerTransaction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function removeTransaction(
      client: SuiClient,
      args: [string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.removeTransaction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace events {
  export interface TransactionRegistered {
    channel_id: _0x2.object$.ID;
    transaction: transaction.TxCall;
  }

  export namespace TransactionRegistered {
    export const TYPE_QNAME =
      "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::events::TransactionRegistered";

    const TYPE = new TypeDescriptor<TransactionRegistered>(
      TransactionRegistered.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<TransactionRegistered> {
      return TYPE.apply();
    }
  }

  export type TransactionRegisteredInstance =
    TypedEventInstance<TransactionRegistered> & {
      data_decoded: TransactionRegistered;
      type_arguments: [];
    };

  export interface TransactionRemoved {
    channel_id: _0x2.object$.ID;
  }

  export namespace TransactionRemoved {
    export const TYPE_QNAME =
      "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::events::TransactionRemoved";

    const TYPE = new TypeDescriptor<TransactionRemoved>(
      TransactionRemoved.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<TransactionRemoved> {
      return TYPE.apply();
    }
  }

  export type TransactionRemovedInstance =
    TypedEventInstance<TransactionRemoved> & {
      data_decoded: TransactionRemoved;
      type_arguments: [];
    };

  export namespace builder {
    export function transactionRegistered(
      tx: Transaction,
      args: [
        _0x2.object$.ID | TransactionArgument,
        transaction.TxCall | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::events::transaction_registered",
        arguments: _args,
      });
    }
    export function transactionRemoved(
      tx: Transaction,
      args: [_0x2.object$.ID | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::events::transaction_removed",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function transactionRegistered(
      client: SuiClient,
      args: [_0x2.object$.ID, transaction.TxCall],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.transactionRegistered(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function transactionRemoved(
      client: SuiClient,
      args: [_0x2.object$.ID],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.transactionRemoved(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace owner_cap {
  export interface OwnerCap {
    id: _0x2.object$.UID;
  }

  export namespace OwnerCap {
    export const TYPE_QNAME =
      "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::owner_cap::OwnerCap";

    const TYPE = new TypeDescriptor<OwnerCap>(OwnerCap.TYPE_QNAME);

    export function type(): TypeDescriptor<OwnerCap> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function create(
      tx: Transaction,
      args: [],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::owner_cap::create",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function create(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[owner_cap.OwnerCap]>> {
      const tx = new Transaction();
      builder.create(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [owner_cap.OwnerCap]
      >(inspectRes);
    }
  }
}

export namespace relayer_discovery_v0 {
  export interface RelayerDiscovery_v0 {
    configurations: _0x2.table.Table<_0x2.object$.ID, transaction.TxCall>;
    version_control: _0x647a3b34b3a16f5f00443bdafd13d281983b2280703ab4f416cf706e6d739087.version_control.VersionControl;
  }

  export namespace RelayerDiscovery_v0 {
    export const TYPE_QNAME =
      "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::relayer_discovery_v0::RelayerDiscovery_v0";

    const TYPE = new TypeDescriptor<RelayerDiscovery_v0>(
      RelayerDiscovery_v0.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<RelayerDiscovery_v0> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function allowFunction(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::relayer_discovery_v0::allow_function",
        arguments: _args,
      });
    }
    export function disallowFunction(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::relayer_discovery_v0::disallow_function",
        arguments: _args,
      });
    }
    export function getTransaction(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::relayer_discovery_v0::get_transaction",
        arguments: _args,
      });
    }
    export function new$(
      tx: Transaction,
      args: [
        | _0x647a3b34b3a16f5f00443bdafd13d281983b2280703ab4f416cf706e6d739087.version_control.VersionControl
        | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::relayer_discovery_v0::new",
        arguments: _args,
      });
    }
    export function removeTransaction(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::relayer_discovery_v0::remove_transaction",
        arguments: _args,
      });
    }
    export function setTransaction(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
        transaction.TxCall | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::relayer_discovery_v0::set_transaction",
        arguments: _args,
      });
    }
    export function versionControl(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::relayer_discovery_v0::version_control",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function allowFunction(
      client: SuiClient,
      args: [string, bigint, _0x1.ascii.String],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.allowFunction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function disallowFunction(
      client: SuiClient,
      args: [string, bigint, _0x1.ascii.String],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.disallowFunction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function getTransaction(
      client: SuiClient,
      args: [string, _0x2.object$.ID],
    ): Promise<TypedDevInspectResults<[transaction.TxCall]>> {
      const tx = new Transaction();
      builder.getTransaction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [transaction.TxCall]
      >(inspectRes);
    }
    export async function new$(
      client: SuiClient,
      args: [
        _0x647a3b34b3a16f5f00443bdafd13d281983b2280703ab4f416cf706e6d739087.version_control.VersionControl,
      ],
    ): Promise<
      TypedDevInspectResults<[relayer_discovery_v0.RelayerDiscovery_v0]>
    > {
      const tx = new Transaction();
      builder.new$(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [relayer_discovery_v0.RelayerDiscovery_v0]
      >(inspectRes);
    }
    export async function removeTransaction(
      client: SuiClient,
      args: [string, _0x2.object$.ID],
    ): Promise<TypedDevInspectResults<[transaction.TxCall]>> {
      const tx = new Transaction();
      builder.removeTransaction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [transaction.TxCall]
      >(inspectRes);
    }
    export async function setTransaction(
      client: SuiClient,
      args: [string, _0x2.object$.ID, transaction.TxCall],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.setTransaction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function versionControl(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.versionControl(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
  }
}

export namespace transaction {
  export interface Function {
    package_id: string;
    module_name: _0x1.ascii.String;
    name: _0x1.ascii.String;
  }

  export namespace Function {
    export const TYPE_QNAME =
      "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::transaction::Function";

    const TYPE = new TypeDescriptor<Function>(Function.TYPE_QNAME);

    export function type(): TypeDescriptor<Function> {
      return TYPE.apply();
    }
  }

  export type FunctionInstance = TypedEventInstance<Function> & {
    data_decoded: Function;
    type_arguments: [];
  };

  export interface MoveCall {
    function: transaction.Function;
    arguments: number[][];
    type_arguments: _0x1.ascii.String[];
  }

  export namespace MoveCall {
    export const TYPE_QNAME =
      "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::transaction::MoveCall";

    const TYPE = new TypeDescriptor<MoveCall>(MoveCall.TYPE_QNAME);

    export function type(): TypeDescriptor<MoveCall> {
      return TYPE.apply();
    }
  }

  export type MoveCallInstance = TypedEventInstance<MoveCall> & {
    data_decoded: MoveCall;
    type_arguments: [];
  };

  export interface TxCall {
    is_final: boolean;
    move_calls: transaction.MoveCall[];
  }

  export namespace TxCall {
    export const TYPE_QNAME =
      "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::transaction::TxCall";

    const TYPE = new TypeDescriptor<TxCall>(TxCall.TYPE_QNAME);

    export function type(): TypeDescriptor<TxCall> {
      return TYPE.apply();
    }
  }

  export type TxCallInstance = TypedEventInstance<TxCall> & {
    data_decoded: TxCall;
    type_arguments: [];
  };

  export namespace builder {
    export function newFunction(
      tx: Transaction,
      args: [
        string | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureAddress(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::transaction::new_function",
        arguments: _args,
      });
    }
    export function newFunctionFromBcs(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::transaction::new_function_from_bcs",
        arguments: _args,
      });
    }
    export function newMoveCall(
      tx: Transaction,
      args: [
        transaction.Function | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::transaction::new_move_call",
        arguments: _args,
      });
    }
    export function newMoveCallFromBcs(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::transaction::new_move_call_from_bcs",
        arguments: _args,
      });
    }
    export function newTransaction(
      tx: Transaction,
      args: [
        boolean | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureBool(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::transaction::new_transaction",
        arguments: _args,
      });
    }
    export function newTransactionFromBcs(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::transaction::new_transaction_from_bcs",
        arguments: _args,
      });
    }
    export function packageId<T0 = any>(
      tx: Transaction,
      args: [],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c::transaction::package_id",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function newFunction(
      client: SuiClient,
      args: [string, _0x1.ascii.String, _0x1.ascii.String],
    ): Promise<TypedDevInspectResults<[transaction.Function]>> {
      const tx = new Transaction();
      builder.newFunction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [transaction.Function]
      >(inspectRes);
    }
    export async function newFunctionFromBcs(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[transaction.Function]>> {
      const tx = new Transaction();
      builder.newFunctionFromBcs(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [transaction.Function]
      >(inspectRes);
    }
    export async function newMoveCall(
      client: SuiClient,
      args: [transaction.Function, string[], string[]],
    ): Promise<TypedDevInspectResults<[transaction.MoveCall]>> {
      const tx = new Transaction();
      builder.newMoveCall(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [transaction.MoveCall]
      >(inspectRes);
    }
    export async function newMoveCallFromBcs(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[transaction.MoveCall]>> {
      const tx = new Transaction();
      builder.newMoveCallFromBcs(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [transaction.MoveCall]
      >(inspectRes);
    }
    export async function newTransaction(
      client: SuiClient,
      args: [boolean, string[]],
    ): Promise<TypedDevInspectResults<[transaction.TxCall]>> {
      const tx = new Transaction();
      builder.newTransaction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [transaction.TxCall]
      >(inspectRes);
    }
    export async function newTransactionFromBcs(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[transaction.TxCall]>> {
      const tx = new Transaction();
      builder.newTransactionFromBcs(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [transaction.TxCall]
      >(inspectRes);
    }
    export async function packageId<T0 = any>(
      client: SuiClient,
      args: [],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.packageId(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
  }
}

const MODULES = JSON.parse(
  '{"discovery":{"fileFormatVersion":6,"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","name":"discovery","friends":[],"structs":{"RelayerDiscovery":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"inner","type":{"Struct":{"address":"0x2","module":"versioned","name":"Versioned","typeArguments":[]}}}]}},"exposedFunctions":{"allow_function":{"visibility":"Private","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"discovery","name":"RelayerDiscovery","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"owner_cap","name":"OwnerCap","typeArguments":[]}}},"U64",{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[]},"disallow_function":{"visibility":"Private","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"discovery","name":"RelayerDiscovery","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"owner_cap","name":"OwnerCap","typeArguments":[]}}},"U64",{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[]},"get_transaction":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"discovery","name":"RelayerDiscovery","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"transaction","name":"TxCall","typeArguments":[]}}]},"register_transaction":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"discovery","name":"RelayerDiscovery","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"Channel","typeArguments":[]}}},{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"transaction","name":"TxCall","typeArguments":[]}}],"return":[]},"remove_transaction":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"discovery","name":"RelayerDiscovery","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373","module":"channel","name":"Channel","typeArguments":[]}}}],"return":[]}}},"events":{"fileFormatVersion":6,"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","name":"events","friends":[{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","name":"relayer_discovery_v0"}],"structs":{"TransactionRegistered":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"channel_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"transaction","type":{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"transaction","name":"TxCall","typeArguments":[]}}}]},"TransactionRemoved":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"channel_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]}},"exposedFunctions":{"transaction_registered":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"transaction","name":"TxCall","typeArguments":[]}}],"return":[]},"transaction_removed":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[]}}},"owner_cap":{"fileFormatVersion":6,"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","name":"owner_cap","friends":[{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","name":"discovery"}],"structs":{"OwnerCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]}},"exposedFunctions":{"create":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"owner_cap","name":"OwnerCap","typeArguments":[]}}]}}},"relayer_discovery_v0":{"fileFormatVersion":6,"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","name":"relayer_discovery_v0","friends":[{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","name":"discovery"}],"structs":{"RelayerDiscovery_v0":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"configurations","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"transaction","name":"TxCall","typeArguments":[]}}]}}},{"name":"version_control","type":{"Struct":{"address":"0x647a3b34b3a16f5f00443bdafd13d281983b2280703ab4f416cf706e6d739087","module":"version_control","name":"VersionControl","typeArguments":[]}}}]}},"exposedFunctions":{"allow_function":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"relayer_discovery_v0","name":"RelayerDiscovery_v0","typeArguments":[]}}},"U64",{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[]},"disallow_function":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"relayer_discovery_v0","name":"RelayerDiscovery_v0","typeArguments":[]}}},"U64",{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[]},"get_transaction":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"relayer_discovery_v0","name":"RelayerDiscovery_v0","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"transaction","name":"TxCall","typeArguments":[]}}]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x647a3b34b3a16f5f00443bdafd13d281983b2280703ab4f416cf706e6d739087","module":"version_control","name":"VersionControl","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"relayer_discovery_v0","name":"RelayerDiscovery_v0","typeArguments":[]}}]},"remove_transaction":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"relayer_discovery_v0","name":"RelayerDiscovery_v0","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"transaction","name":"TxCall","typeArguments":[]}}]},"set_transaction":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"relayer_discovery_v0","name":"RelayerDiscovery_v0","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"transaction","name":"TxCall","typeArguments":[]}}],"return":[]},"version_control":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"relayer_discovery_v0","name":"RelayerDiscovery_v0","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x647a3b34b3a16f5f00443bdafd13d281983b2280703ab4f416cf706e6d739087","module":"version_control","name":"VersionControl","typeArguments":[]}}}]}}},"transaction":{"fileFormatVersion":6,"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","name":"transaction","friends":[],"structs":{"Function":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"package_id","type":"Address"},{"name":"module_name","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"name","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}]},"MoveCall":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"function","type":{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"transaction","name":"Function","typeArguments":[]}}},{"name":"arguments","type":{"Vector":{"Vector":"U8"}}},{"name":"type_arguments","type":{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}}]},"TxCall":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"is_final","type":"Bool"},{"name":"move_calls","type":{"Vector":{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"transaction","name":"MoveCall","typeArguments":[]}}}}]}},"exposedFunctions":{"new_function":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["Address",{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"transaction","name":"Function","typeArguments":[]}}]},"new_function_from_bcs":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"transaction","name":"Function","typeArguments":[]}}]},"new_move_call":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"transaction","name":"Function","typeArguments":[]}},{"Vector":{"Vector":"U8"}},{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"transaction","name":"MoveCall","typeArguments":[]}}]},"new_move_call_from_bcs":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"transaction","name":"MoveCall","typeArguments":[]}}]},"new_transaction":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["Bool",{"Vector":{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"transaction","name":"MoveCall","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"transaction","name":"TxCall","typeArguments":[]}}]},"new_transaction_from_bcs":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c","module":"transaction","name":"TxCall","typeArguments":[]}}]},"package_id":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[],"return":["Address"]}}}}',
);

export function loadAllTypes(coder: MoveCoder) {
  _0x2.loadAllTypes(coder);
  _0x1.loadAllTypes(coder);
  _0xeb055ffc3237c24e305a2bb760fe6551f6ff7c5fdb68735169c0f528fccab373.loadAllTypes(
    coder,
  );
  _0x647a3b34b3a16f5f00443bdafd13d281983b2280703ab4f416cf706e6d739087.loadAllTypes(
    coder,
  );
  for (const m of Object.values(MODULES)) {
    coder.load(
      m as any,
      "0x2b839b25c7133e5e0f8f585cb2e89bf430a6585a88c4a0343ae3b246372d431c",
    );
  }
}

loadAllTypes(defaultMoveCoder());
