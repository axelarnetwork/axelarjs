/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

/* Generated types for 0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba, original address 0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba */

import { TypeDescriptor, ANY_TYPE } from "@typemove/move";
import { MoveCoder, TypedEventInstance } from "@typemove/sui";

import { defaultMoveCoder } from "@typemove/sui";

import {
  ZERO_ADDRESS,
  TypedDevInspectResults,
  getMoveCoder,
} from "@typemove/sui";
import {
  TransactionBlock,
  TransactionArgument,
  TransactionObjectArgument,
} from "@mysten/sui.js/transactions";
import { SuiClient } from "@mysten/sui.js/client";
import {
  transactionArgumentOrObject,
  transactionArgumentOrPure,
  transactionArgumentOrVec,
} from "@typemove/sui";

import { _0x1 } from "@typemove/sui/builtin";
import { _0x2 } from "@typemove/sui/builtin";
import * as _0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981 from "./0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981.js";
import * as _0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6 from "./0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6.js";

export namespace address_tracker {
  export interface InterchainAddressTracker {
    trusted_addresses: _0x2.table.Table<_0x1.ascii.String, _0x1.ascii.String>;
  }

  export namespace InterchainAddressTracker {
    export const TYPE_QNAME =
      "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::address_tracker::InterchainAddressTracker";

    const TYPE = new TypeDescriptor<InterchainAddressTracker>(
      InterchainAddressTracker.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<InterchainAddressTracker> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function isTrustedAddress(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::address_tracker::is_trusted_address",
        arguments: _args,
      });
    }
    export function new_(
      tx: TransactionBlock,
      args: [],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::address_tracker::new",
        arguments: _args,
      });
    }
    export function removeTrustedAddress(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::address_tracker::remove_trusted_address",
        arguments: _args,
      });
    }
    export function setTrustedAddress(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::address_tracker::set_trusted_address",
        arguments: _args,
      });
    }
    export function trustedAddress(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::address_tracker::trusted_address",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function isTrustedAddress(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[Boolean]>> {
      const tx = new TransactionBlock();
      builder.isTrustedAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[Boolean]>(
        inspectRes,
      );
    }
    export async function new_(
      client: SuiClient,
      args: [],
    ): Promise<
      TypedDevInspectResults<[address_tracker.InterchainAddressTracker]>
    > {
      const tx = new TransactionBlock();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [address_tracker.InterchainAddressTracker]
      >(inspectRes);
    }
    export async function removeTrustedAddress(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.removeTrustedAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function setTrustedAddress(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.setTrustedAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function trustedAddress(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.trustedAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
  }
}

export namespace coin_data {
  export interface CoinData<T0> {
    coin_management: coin_management.CoinManagement<T0>;
    coin_info: coin_info.CoinInfo<T0>;
  }

  export namespace CoinData {
    export const TYPE_QNAME =
      "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_data::CoinData";

    const TYPE = new TypeDescriptor<CoinData<any>>(CoinData.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<CoinData<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export namespace builder {
    export function coinInfo<T0 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_data::coin_info",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function coinManagementMut<T0 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_data::coin_management_mut",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function coinScaling<T0 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_data::coin_scaling",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function new_<T0 = any>(
      tx: TransactionBlock,
      args: [
        coin_management.CoinManagement<T0> | TransactionArgument,
        coin_info.CoinInfo<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_data::new",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function coinInfo<T0 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.coinInfo(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function coinManagementMut<T0 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.coinManagementMut(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function coinScaling<T0 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.coinScaling(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function new_<T0 = any>(
      client: SuiClient,
      args: [
        coin_management.CoinManagement<T0> | TransactionArgument,
        coin_info.CoinInfo<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[coin_data.CoinData<T0>]>> {
      const tx = new TransactionBlock();
      builder.new_(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [coin_data.CoinData<T0>]
      >(inspectRes);
    }
  }
}

export namespace coin_info {
  export interface CoinInfo<T0> {
    name: string;
    symbol: _0x1.ascii.String;
    decimals: number;
    remote_decimals: number;
    metadata: _0x1.option.Option<_0x2.coin.CoinMetadata<T0>>;
  }

  export namespace CoinInfo {
    export const TYPE_QNAME =
      "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_info::CoinInfo";

    const TYPE = new TypeDescriptor<CoinInfo<any>>(CoinInfo.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<CoinInfo<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export namespace builder {
    export function decimals<T0 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_info::decimals",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function fromInfo<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        number | TransactionArgument,
        number | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_info::from_info",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function fromMetadata<T0 = any>(
      tx: TransactionBlock,
      args: [
        _0x2.coin.CoinMetadata<T0> | TransactionArgument,
        number | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_info::from_metadata",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function metadata<T0 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_info::metadata",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function name<T0 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_info::name",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function remoteDecimals<T0 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_info::remote_decimals",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function scaling<T0 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_info::scaling",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function symbol<T0 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_info::symbol",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function decimals<T0 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new TransactionBlock();
      builder.decimals(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function fromInfo<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        number | TransactionArgument,
        number | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[coin_info.CoinInfo<T0>]>> {
      const tx = new TransactionBlock();
      builder.fromInfo(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [coin_info.CoinInfo<T0>]
      >(inspectRes);
    }
    export async function fromMetadata<T0 = any>(
      client: SuiClient,
      args: [
        _0x2.coin.CoinMetadata<T0> | TransactionArgument,
        number | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[coin_info.CoinInfo<T0>]>> {
      const tx = new TransactionBlock();
      builder.fromMetadata(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [coin_info.CoinInfo<T0>]
      >(inspectRes);
    }
    export async function metadata<T0 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.metadata(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function name<T0 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.name(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function remoteDecimals<T0 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new TransactionBlock();
      builder.remoteDecimals(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function scaling<T0 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.scaling(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function symbol<T0 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x1.ascii.String]>> {
      const tx = new TransactionBlock();
      builder.symbol(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.ascii.String]
      >(inspectRes);
    }
  }
}

export namespace coin_management {
  export interface CoinManagement<T0> {
    treasury_cap: _0x1.option.Option<_0x2.coin.TreasuryCap<T0>>;
    balance: _0x1.option.Option<_0x2.balance.Balance<T0>>;
    distributor: _0x1.option.Option<string>;
    operator: _0x1.option.Option<string>;
    flow_limit: flow_limit.FlowLimit;
    scaling: bigint;
    dust: bigint;
  }

  export namespace CoinManagement {
    export const TYPE_QNAME =
      "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_management::CoinManagement";

    const TYPE = new TypeDescriptor<CoinManagement<any>>(
      CoinManagement.TYPE_QNAME,
    );

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<CoinManagement<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export namespace builder {
    export function addDistributor<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_management::add_distributor",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function addOperator<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_management::add_operator",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function burn<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.balance.Balance<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_management::burn",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function giveCoin<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_management::give_coin",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function hasCapability<T0 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_management::has_capability",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function isDistributor<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_management::is_distributor",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function mint<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_management::mint",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function newLocked<T0 = any>(
      tx: TransactionBlock,
      args: [],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_management::new_locked",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function newWithCap<T0 = any>(
      tx: TransactionBlock,
      args: [_0x2.coin.TreasuryCap<T0> | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_management::new_with_cap",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function setFlowLimit<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_management::set_flow_limit",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function setScaling<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_management::set_scaling",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function takeBalance<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.balance.Balance<T0> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::coin_management::take_balance",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function addDistributor<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.addDistributor(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function addOperator<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.addOperator(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function burn<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.balance.Balance<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.burn(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function giveCoin<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new TransactionBlock();
      builder.giveCoin(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function hasCapability<T0 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[Boolean]>> {
      const tx = new TransactionBlock();
      builder.hasCapability(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[Boolean]>(
        inspectRes,
      );
    }
    export async function isDistributor<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[Boolean]>> {
      const tx = new TransactionBlock();
      builder.isDistributor(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[Boolean]>(
        inspectRes,
      );
    }
    export async function mint<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new TransactionBlock();
      builder.mint(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function newLocked<T0 = any>(
      client: SuiClient,
      args: [],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[coin_management.CoinManagement<T0>]>> {
      const tx = new TransactionBlock();
      builder.newLocked(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [coin_management.CoinManagement<T0>]
      >(inspectRes);
    }
    export async function newWithCap<T0 = any>(
      client: SuiClient,
      args: [_0x2.coin.TreasuryCap<T0> | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[coin_management.CoinManagement<T0>]>> {
      const tx = new TransactionBlock();
      builder.newWithCap(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [coin_management.CoinManagement<T0>]
      >(inspectRes);
    }
    export async function setFlowLimit<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.setFlowLimit(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function setScaling<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.setScaling(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function takeBalance<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.balance.Balance<T0> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.takeBalance(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
  }
}

export namespace discovery {
  export namespace builder {
    export function callInfo(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::discovery::call_info",
        arguments: _args,
      });
    }
    export function interchainTransferInfo(
      tx: TransactionBlock,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::discovery::interchain_transfer_info",
        arguments: _args,
      });
    }
    export function registerTransaction(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::discovery::register_transaction",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function callInfo(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): Promise<
      TypedDevInspectResults<
        [
          _0xf7bb3530d09cb7a2da0bf63ec6000b6af0a89a8a3af77b2394d73a879a3651b1.transaction.Transaction,
        ]
      >
    > {
      const tx = new TransactionBlock();
      builder.callInfo(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0xf7bb3530d09cb7a2da0bf63ec6000b6af0a89a8a3af77b2394d73a879a3651b1.transaction.Transaction,
        ]
      >(inspectRes);
    }
    export async function interchainTransferInfo(
      client: SuiClient,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument],
    ): Promise<
      TypedDevInspectResults<[token_id.TokenId, string, bigint, number[]]>
    > {
      const tx = new TransactionBlock();
      builder.interchainTransferInfo(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [token_id.TokenId, string, bigint, number[]]
      >(inspectRes);
    }
    export async function registerTransaction(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.registerTransaction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace flow_limit {
  export interface FlowLimit {
    flow_limit: bigint;
    flow_in: bigint;
    flow_out: bigint;
    current_epoch: bigint;
  }

  export namespace FlowLimit {
    export const TYPE_QNAME =
      "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::flow_limit::FlowLimit";

    const TYPE = new TypeDescriptor<FlowLimit>(FlowLimit.TYPE_QNAME);

    export function type(): TypeDescriptor<FlowLimit> {
      return TYPE.apply();
    }
  }

  export interface FlowLimitInstance extends TypedEventInstance<FlowLimit> {
    data_decoded: FlowLimit;
    type_arguments: [];
  }

  export namespace builder {
    export function addFlowIn(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::flow_limit::add_flow_in",
        arguments: _args,
      });
    }
    export function addFlowOut(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::flow_limit::add_flow_out",
        arguments: _args,
      });
    }
    export function new_(
      tx: TransactionBlock,
      args: [],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::flow_limit::new",
        arguments: _args,
      });
    }
    export function setFlowLimit(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::flow_limit::set_flow_limit",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function addFlowIn(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.addFlowIn(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function addFlowOut(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.addFlowOut(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function new_(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[flow_limit.FlowLimit]>> {
      const tx = new TransactionBlock();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [flow_limit.FlowLimit]
      >(inspectRes);
    }
    export async function setFlowLimit(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.setFlowLimit(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace interchain_transfer_ticket {
  export interface InterchainTransferTicket<T0> {
    token_id: token_id.TokenId;
    balance: _0x2.balance.Balance<T0>;
    source_address: string;
    destination_chain: _0x1.ascii.String;
    destination_address: number[];
    metadata: number[];
    version: bigint;
  }

  export namespace InterchainTransferTicket {
    export const TYPE_QNAME =
      "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::interchain_transfer_ticket::InterchainTransferTicket";

    const TYPE = new TypeDescriptor<InterchainTransferTicket<any>>(
      InterchainTransferTicket.TYPE_QNAME,
    );

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<InterchainTransferTicket<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export namespace builder {
    export function destroy<T0 = any>(
      tx: TransactionBlock,
      args: [
        | interchain_transfer_ticket.InterchainTransferTicket<T0>
        | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::interchain_transfer_ticket::destroy",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function new_<T0 = any>(
      tx: TransactionBlock,
      args: [
        token_id.TokenId | TransactionArgument,
        _0x2.balance.Balance<T0> | TransactionArgument,
        string | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::interchain_transfer_ticket::new",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function destroy<T0 = any>(
      client: SuiClient,
      args: [
        | interchain_transfer_ticket.InterchainTransferTicket<T0>
        | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<
        [
          token_id.TokenId,
          _0x2.balance.Balance<T0>,
          string,
          _0x1.ascii.String,
          number[],
          number[],
          bigint,
        ]
      >
    > {
      const tx = new TransactionBlock();
      builder.destroy(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          token_id.TokenId,
          _0x2.balance.Balance<T0>,
          string,
          _0x1.ascii.String,
          number[],
          number[],
          bigint,
        ]
      >(inspectRes);
    }
    export async function new_<T0 = any>(
      client: SuiClient,
      args: [
        token_id.TokenId | TransactionArgument,
        _0x2.balance.Balance<T0> | TransactionArgument,
        string | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<
        [interchain_transfer_ticket.InterchainTransferTicket<T0>]
      >
    > {
      const tx = new TransactionBlock();
      builder.new_(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [interchain_transfer_ticket.InterchainTransferTicket<T0>]
      >(inspectRes);
    }
  }
}

export namespace its {
  export interface CoinRegistered<T0> {
    token_id: token_id.TokenId;
  }

  export namespace CoinRegistered {
    export const TYPE_QNAME =
      "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its::CoinRegistered";

    const TYPE = new TypeDescriptor<CoinRegistered<any>>(
      CoinRegistered.TYPE_QNAME,
    );

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<CoinRegistered<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface CoinRegisteredInstance
    extends TypedEventInstance<CoinRegistered<any>> {
    data_decoded: CoinRegistered<any>;
    type_arguments: [string];
  }

  export interface ITS {
    id: _0x2.object_.UID;
    inner: _0x2.versioned.Versioned;
  }

  export namespace ITS {
    export const TYPE_QNAME =
      "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its::ITS";

    const TYPE = new TypeDescriptor<ITS>(ITS.TYPE_QNAME);

    export function type(): TypeDescriptor<ITS> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function burnAsDistributor<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its::burn_as_distributor",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function channelAddress(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its::channel_address",
        arguments: _args,
      });
    }
    export function deployRemoteInterchainToken<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its::deploy_remote_interchain_token",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function giveUnregisteredCoin<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.TreasuryCap<T0> | TransactionArgument,
        _0x2.coin.CoinMetadata<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its::give_unregistered_coin",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function mintAsDistributor<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its::mint_as_distributor",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function mintToAsDistributor<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its::mint_to_as_distributor",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function packageValue(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its::package_value",
        arguments: _args,
      });
    }
    export function prepareInterchainTransfer<T0 = any>(
      tx: TransactionBlock,
      args: [
        token_id.TokenId | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its::prepare_interchain_transfer",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function receiveDeployInterchainToken<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981.channel.ApprovedMessage
          | TransactionArgument
        ),
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its::receive_deploy_interchain_token",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function receiveInterchainTransfer<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981.channel.ApprovedMessage
          | TransactionArgument
        ),
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its::receive_interchain_transfer",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function receiveInterchainTransferWithData<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981.channel.ApprovedMessage
          | TransactionArgument
        ),
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its::receive_interchain_transfer_with_data",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function registerCoin<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        coin_info.CoinInfo<T0> | TransactionArgument,
        coin_management.CoinManagement<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its::register_coin",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function registerTransaction(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0xf7bb3530d09cb7a2da0bf63ec6000b6af0a89a8a3af77b2394d73a879a3651b1.transaction.Transaction
          | TransactionArgument
        ),
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its::register_transaction",
        arguments: _args,
      });
    }
    export function registeredCoinType(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its::registered_coin_type",
        arguments: _args,
      });
    }
    export function removeTrustedAddresses(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its::remove_trusted_addresses",
        arguments: _args,
      });
    }
    export function sendInterchainTransfer<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | interchain_transfer_ticket.InterchainTransferTicket<T0>
          | TransactionArgument
        ),
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its::send_interchain_transfer",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function setTrustedAddresses(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        trusted_addresses.TrustedAddresses | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its::set_trusted_addresses",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function burnAsDistributor<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.burnAsDistributor(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function channelAddress(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.channelAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function deployRemoteInterchainToken<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<
        [
          _0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981.message_ticket.MessageTicket,
        ]
      >
    > {
      const tx = new TransactionBlock();
      builder.deployRemoteInterchainToken(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981.message_ticket.MessageTicket,
        ]
      >(inspectRes);
    }
    export async function giveUnregisteredCoin<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.TreasuryCap<T0> | TransactionArgument,
        _0x2.coin.CoinMetadata<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.giveUnregisteredCoin(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function mintAsDistributor<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new TransactionBlock();
      builder.mintAsDistributor(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function mintToAsDistributor<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.mintToAsDistributor(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function packageValue(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.packageValue(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function prepareInterchainTransfer<T0 = any>(
      client: SuiClient,
      args: [
        token_id.TokenId | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<
        [interchain_transfer_ticket.InterchainTransferTicket<T0>]
      >
    > {
      const tx = new TransactionBlock();
      builder.prepareInterchainTransfer(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [interchain_transfer_ticket.InterchainTransferTicket<T0>]
      >(inspectRes);
    }
    export async function receiveDeployInterchainToken<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981.channel.ApprovedMessage
          | TransactionArgument
        ),
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.receiveDeployInterchainToken(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function receiveInterchainTransfer<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981.channel.ApprovedMessage
          | TransactionArgument
        ),
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.receiveInterchainTransfer(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function receiveInterchainTransferWithData<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981.channel.ApprovedMessage
          | TransactionArgument
        ),
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<
        [_0x1.ascii.String, number[], number[], _0x2.coin.Coin<T0>]
      >
    > {
      const tx = new TransactionBlock();
      builder.receiveInterchainTransferWithData(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.ascii.String, number[], number[], _0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function registerCoin<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        coin_info.CoinInfo<T0> | TransactionArgument,
        coin_management.CoinManagement<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[token_id.TokenId]>> {
      const tx = new TransactionBlock();
      builder.registerCoin(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [token_id.TokenId]
      >(inspectRes);
    }
    export async function registerTransaction(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0xf7bb3530d09cb7a2da0bf63ec6000b6af0a89a8a3af77b2394d73a879a3651b1.transaction.Transaction
          | TransactionArgument
        ),
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.registerTransaction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function registeredCoinType(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.registeredCoinType(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function removeTrustedAddresses(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.removeTrustedAddresses(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function sendInterchainTransfer<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | interchain_transfer_ticket.InterchainTransferTicket<T0>
          | TransactionArgument
        ),
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<
        [
          _0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981.message_ticket.MessageTicket,
        ]
      >
    > {
      const tx = new TransactionBlock();
      builder.sendInterchainTransfer(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981.message_ticket.MessageTicket,
        ]
      >(inspectRes);
    }
    export async function setTrustedAddresses(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        trusted_addresses.TrustedAddresses | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.setTrustedAddresses(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace its_v0 {
  export interface ITS_v0 {
    channel: _0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981.channel.Channel;
    address_tracker: address_tracker.InterchainAddressTracker;
    unregistered_coin_types: _0x2.table.Table<
      token_id.UnregisteredTokenId,
      _0x1.type_name.TypeName
    >;
    unregistered_coins: _0x2.bag.Bag;
    registered_coin_types: _0x2.table.Table<
      token_id.TokenId,
      _0x1.type_name.TypeName
    >;
    registered_coins: _0x2.bag.Bag;
    relayer_discovery_id: _0x2.object_.ID;
    version_control: _0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6.version_control.VersionControl;
  }

  export namespace ITS_v0 {
    export const TYPE_QNAME =
      "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::ITS_v0";

    const TYPE = new TypeDescriptor<ITS_v0>(ITS_v0.TYPE_QNAME);

    export function type(): TypeDescriptor<ITS_v0> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function addRegisteredCoin<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        coin_management.CoinManagement<T0> | TransactionArgument,
        coin_info.CoinInfo<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::add_registered_coin",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function addUnregisteredCoin<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.UnregisteredTokenId | TransactionArgument,
        _0x2.coin.TreasuryCap<T0> | TransactionArgument,
        _0x2.coin.CoinMetadata<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::add_unregistered_coin",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function channel(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::channel",
        arguments: _args,
      });
    }
    export function channelAddress(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::channel_address",
        arguments: _args,
      });
    }
    export function channelId(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::channel_id",
        arguments: _args,
      });
    }
    export function channelMut(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::channel_mut",
        arguments: _args,
      });
    }
    export function coinData<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::coin_data",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function coinDataMut<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::coin_data_mut",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function coinInfo<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::coin_info",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function coinManagementMut<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::coin_management_mut",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function isTrustedAddress(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::is_trusted_address",
        arguments: _args,
      });
    }
    export function new_(
      tx: TransactionBlock,
      args: [
        | _0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6.version_control.VersionControl
        | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::new",
        arguments: _args,
      });
    }
    export function registeredCoinType(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::registered_coin_type",
        arguments: _args,
      });
    }
    export function relayerDiscoveryId(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::relayer_discovery_id",
        arguments: _args,
      });
    }
    export function removeTrustedAddress(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::remove_trusted_address",
        arguments: _args,
      });
    }
    export function removeTrustedAddresses(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::remove_trusted_addresses",
        arguments: _args,
      });
    }
    export function removeUnregisteredCoin<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.UnregisteredTokenId | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::remove_unregistered_coin",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function setRelayerDiscoveryId(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::set_relayer_discovery_id",
        arguments: _args,
      });
    }
    export function setTrustedAddress(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::set_trusted_address",
        arguments: _args,
      });
    }
    export function setTrustedAddresses(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        trusted_addresses.TrustedAddresses | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::set_trusted_addresses",
        arguments: _args,
      });
    }
    export function tokenDecimals<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::token_decimals",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function tokenName<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::token_name",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function tokenRemoteDecimals<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::token_remote_decimals",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function tokenSymbol<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::token_symbol",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function trustedAddress(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::trusted_address",
        arguments: _args,
      });
    }
    export function unregisteredCoinType(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::unregistered_coin_type",
        arguments: _args,
      });
    }
    export function versionControl(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::version_control",
        arguments: _args,
      });
    }
    export function versionControlMut(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::its_v0::version_control_mut",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function addRegisteredCoin<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
        coin_management.CoinManagement<T0> | TransactionArgument,
        coin_info.CoinInfo<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.addRegisteredCoin(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function addUnregisteredCoin<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.UnregisteredTokenId | TransactionArgument,
        _0x2.coin.TreasuryCap<T0> | TransactionArgument,
        _0x2.coin.CoinMetadata<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.addUnregisteredCoin(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function channel(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.channel(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function channelAddress(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.channelAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function channelId(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[_0x2.object_.ID]>> {
      const tx = new TransactionBlock();
      builder.channelId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.object_.ID]
      >(inspectRes);
    }
    export async function channelMut(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.channelMut(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function coinData<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.coinData(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function coinDataMut<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.coinDataMut(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function coinInfo<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.coinInfo(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function coinManagementMut<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.coinManagementMut(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function isTrustedAddress(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[Boolean]>> {
      const tx = new TransactionBlock();
      builder.isTrustedAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[Boolean]>(
        inspectRes,
      );
    }
    export async function new_(
      client: SuiClient,
      args: [
        | _0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6.version_control.VersionControl
        | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[its_v0.ITS_v0]>> {
      const tx = new TransactionBlock();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [its_v0.ITS_v0]
      >(inspectRes);
    }
    export async function registeredCoinType(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.registeredCoinType(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function relayerDiscoveryId(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[_0x2.object_.ID]>> {
      const tx = new TransactionBlock();
      builder.relayerDiscoveryId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.object_.ID]
      >(inspectRes);
    }
    export async function removeTrustedAddress(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.removeTrustedAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function removeTrustedAddresses(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.removeTrustedAddresses(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function removeUnregisteredCoin<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.UnregisteredTokenId | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<
        [_0x2.coin.TreasuryCap<T0>, _0x2.coin.CoinMetadata<T0>]
      >
    > {
      const tx = new TransactionBlock();
      builder.removeUnregisteredCoin(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.TreasuryCap<T0>, _0x2.coin.CoinMetadata<T0>]
      >(inspectRes);
    }
    export async function setRelayerDiscoveryId(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.setRelayerDiscoveryId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function setTrustedAddress(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.setTrustedAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function setTrustedAddresses(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        trusted_addresses.TrustedAddresses | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.setTrustedAddresses(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function tokenDecimals<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new TransactionBlock();
      builder.tokenDecimals(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function tokenName<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.tokenName(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function tokenRemoteDecimals<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new TransactionBlock();
      builder.tokenRemoteDecimals(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function tokenSymbol<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        token_id.TokenId | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x1.ascii.String]>> {
      const tx = new TransactionBlock();
      builder.tokenSymbol(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.ascii.String]
      >(inspectRes);
    }
    export async function trustedAddress(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[_0x1.ascii.String]>> {
      const tx = new TransactionBlock();
      builder.trustedAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.ascii.String]
      >(inspectRes);
    }
    export async function unregisteredCoinType(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        number | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.unregisteredCoinType(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function versionControl(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.versionControl(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function versionControlMut(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.versionControlMut(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
  }
}

export namespace owner_cap {
  export interface OwnerCap {
    id: _0x2.object_.UID;
  }

  export namespace OwnerCap {
    export const TYPE_QNAME =
      "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::owner_cap::OwnerCap";

    const TYPE = new TypeDescriptor<OwnerCap>(OwnerCap.TYPE_QNAME);

    export function type(): TypeDescriptor<OwnerCap> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function create(
      tx: TransactionBlock,
      args: [],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::owner_cap::create",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function create(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[owner_cap.OwnerCap]>> {
      const tx = new TransactionBlock();
      builder.create(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [owner_cap.OwnerCap]
      >(inspectRes);
    }
  }
}

export namespace token_id {
  export interface TokenId {
    id: string;
  }

  export namespace TokenId {
    export const TYPE_QNAME =
      "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::token_id::TokenId";

    const TYPE = new TypeDescriptor<TokenId>(TokenId.TYPE_QNAME);

    export function type(): TypeDescriptor<TokenId> {
      return TYPE.apply();
    }
  }

  export interface TokenIdInstance extends TypedEventInstance<TokenId> {
    data_decoded: TokenId;
    type_arguments: [];
  }

  export interface UnregisteredTokenId {
    id: string;
  }

  export namespace UnregisteredTokenId {
    export const TYPE_QNAME =
      "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::token_id::UnregisteredTokenId";

    const TYPE = new TypeDescriptor<UnregisteredTokenId>(
      UnregisteredTokenId.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<UnregisteredTokenId> {
      return TYPE.apply();
    }
  }

  export interface UnregisteredTokenIdInstance
    extends TypedEventInstance<UnregisteredTokenId> {
    data_decoded: UnregisteredTokenId;
    type_arguments: [];
  }

  export namespace builder {
    export function fromAddress(
      tx: TransactionBlock,
      args: [string | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::token_id::from_address",
        arguments: _args,
      });
    }
    export function fromCoinData<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::token_id::from_coin_data",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function fromInfo<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::token_id::from_info",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function fromU256(
      tx: TransactionBlock,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::token_id::from_u256",
        arguments: _args,
      });
    }
    export function toU256(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::token_id::to_u256",
        arguments: _args,
      });
    }
    export function unregisteredTokenId(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::token_id::unregistered_token_id",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function fromAddress(
      client: SuiClient,
      args: [string | TransactionArgument],
    ): Promise<TypedDevInspectResults<[token_id.TokenId]>> {
      const tx = new TransactionBlock();
      builder.fromAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [token_id.TokenId]
      >(inspectRes);
    }
    export async function fromCoinData<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[token_id.TokenId]>> {
      const tx = new TransactionBlock();
      builder.fromCoinData(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [token_id.TokenId]
      >(inspectRes);
    }
    export async function fromInfo<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[token_id.TokenId]>> {
      const tx = new TransactionBlock();
      builder.fromInfo(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [token_id.TokenId]
      >(inspectRes);
    }
    export async function fromU256(
      client: SuiClient,
      args: [bigint | TransactionArgument],
    ): Promise<TypedDevInspectResults<[token_id.TokenId]>> {
      const tx = new TransactionBlock();
      builder.fromU256(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [token_id.TokenId]
      >(inspectRes);
    }
    export async function toU256(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.toU256(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function unregisteredTokenId(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        number | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[token_id.UnregisteredTokenId]>> {
      const tx = new TransactionBlock();
      builder.unregisteredTokenId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [token_id.UnregisteredTokenId]
      >(inspectRes);
    }
  }
}

export namespace trusted_addresses {
  export interface TrustedAddresses {
    trusted_chains: _0x1.ascii.String[];
    trusted_addresses: _0x1.ascii.String[];
  }

  export namespace TrustedAddresses {
    export const TYPE_QNAME =
      "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::trusted_addresses::TrustedAddresses";

    const TYPE = new TypeDescriptor<TrustedAddresses>(
      TrustedAddresses.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<TrustedAddresses> {
      return TYPE.apply();
    }
  }

  export interface TrustedAddressesInstance
    extends TypedEventInstance<TrustedAddresses> {
    data_decoded: TrustedAddresses;
    type_arguments: [];
  }

  export namespace builder {
    export function destroy(
      tx: TransactionBlock,
      args: [trusted_addresses.TrustedAddresses | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::trusted_addresses::destroy",
        arguments: _args,
      });
    }
    export function new_(
      tx: TransactionBlock,
      args: [
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::trusted_addresses::new",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function destroy(
      client: SuiClient,
      args: [trusted_addresses.TrustedAddresses | TransactionArgument],
    ): Promise<
      TypedDevInspectResults<[_0x1.ascii.String[], _0x1.ascii.String[]]>
    > {
      const tx = new TransactionBlock();
      builder.destroy(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.ascii.String[], _0x1.ascii.String[]]
      >(inspectRes);
    }
    export async function new_(
      client: SuiClient,
      args: [
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[trusted_addresses.TrustedAddresses]>> {
      const tx = new TransactionBlock();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [trusted_addresses.TrustedAddresses]
      >(inspectRes);
    }
  }
}

export namespace unregistered_coin_data {
  export interface UnregisteredCoinData<T0> {
    treasury_cap: _0x2.coin.TreasuryCap<T0>;
    coin_metadata: _0x2.coin.CoinMetadata<T0>;
  }

  export namespace UnregisteredCoinData {
    export const TYPE_QNAME =
      "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::unregistered_coin_data::UnregisteredCoinData";

    const TYPE = new TypeDescriptor<UnregisteredCoinData<any>>(
      UnregisteredCoinData.TYPE_QNAME,
    );

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<UnregisteredCoinData<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export namespace builder {
    export function destroy<T0 = any>(
      tx: TransactionBlock,
      args: [
        unregistered_coin_data.UnregisteredCoinData<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::unregistered_coin_data::destroy",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function new_<T0 = any>(
      tx: TransactionBlock,
      args: [
        _0x2.coin.TreasuryCap<T0> | TransactionArgument,
        _0x2.coin.CoinMetadata<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::unregistered_coin_data::new",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function destroy<T0 = any>(
      client: SuiClient,
      args: [
        unregistered_coin_data.UnregisteredCoinData<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<
        [_0x2.coin.TreasuryCap<T0>, _0x2.coin.CoinMetadata<T0>]
      >
    > {
      const tx = new TransactionBlock();
      builder.destroy(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.TreasuryCap<T0>, _0x2.coin.CoinMetadata<T0>]
      >(inspectRes);
    }
    export async function new_<T0 = any>(
      client: SuiClient,
      args: [
        _0x2.coin.TreasuryCap<T0> | TransactionArgument,
        _0x2.coin.CoinMetadata<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<[unregistered_coin_data.UnregisteredCoinData<T0>]>
    > {
      const tx = new TransactionBlock();
      builder.new_(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [unregistered_coin_data.UnregisteredCoinData<T0>]
      >(inspectRes);
    }
  }
}

export namespace utils {
  export namespace builder {
    export function decodeMetadata(
      tx: TransactionBlock,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::utils::decode_metadata",
        arguments: _args,
      });
    }
    export function hashCoinInfo(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::utils::hash_coin_info",
        arguments: _args,
      });
    }
    export function isLowercase(
      tx: TransactionBlock,
      args: [number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::utils::is_lowercase",
        arguments: _args,
      });
    }
    export function isNumber(
      tx: TransactionBlock,
      args: [number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::utils::is_number",
        arguments: _args,
      });
    }
    export function isUppercase(
      tx: TransactionBlock,
      args: [number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::utils::is_uppercase",
        arguments: _args,
      });
    }
    export function moduleFromSymbol(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::utils::module_from_symbol",
        arguments: _args,
      });
    }
    export function pow(
      tx: TransactionBlock,
      args: [bigint | TransactionArgument, number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba::utils::pow",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function decodeMetadata(
      client: SuiClient,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument],
    ): Promise<TypedDevInspectResults<[number, number[]]>> {
      const tx = new TransactionBlock();
      builder.decodeMetadata(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [number, number[]]
      >(inspectRes);
    }
    export async function hashCoinInfo(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.hashCoinInfo(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }

    export async function moduleFromSymbol(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[_0x1.ascii.String]>> {
      const tx = new TransactionBlock();
      builder.moduleFromSymbol(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.ascii.String]
      >(inspectRes);
    }
    export async function pow(
      client: SuiClient,
      args: [bigint | TransactionArgument, number | TransactionArgument],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.pow(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
  }
}

const MODULES = JSON.parse(
  '{"address_tracker":{"fileFormatVersion":6,"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"address_tracker","friends":[{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"its_v0"}],"structs":{"InterchainAddressTracker":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"trusted_addresses","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}]}}}]}},"exposedFunctions":{"is_trusted_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"address_tracker","name":"InterchainAddressTracker","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":["Bool"]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"address_tracker","name":"InterchainAddressTracker","typeArguments":[]}}]},"remove_trusted_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"address_tracker","name":"InterchainAddressTracker","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[]},"set_trusted_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"address_tracker","name":"InterchainAddressTracker","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[]},"trusted_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"address_tracker","name":"InterchainAddressTracker","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}]}}},"coin_data":{"fileFormatVersion":6,"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"coin_data","friends":[{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"its_v0"}],"structs":{"CoinData":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"coin_management","type":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}},{"name":"coin_info","type":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}}]}},"exposedFunctions":{"coin_info":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_data","name":"CoinData","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}}]},"coin_management_mut":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_data","name":"CoinData","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}}]},"coin_scaling":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_data","name":"CoinData","typeArguments":[{"TypeParameter":0}]}}}],"return":["U256"]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}],"return":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_data","name":"CoinData","typeArguments":[{"TypeParameter":0}]}}]}}},"coin_info":{"fileFormatVersion":6,"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"coin_info","friends":[],"structs":{"CoinInfo":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"name","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"symbol","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"decimals","type":"U8"},{"name":"remote_decimals","type":"U8"},{"name":"metadata","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}]}}}]}},"exposedFunctions":{"decimals":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}}],"return":["U8"]},"from_info":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},"U8","U8"],"return":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}]},"from_metadata":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}},"U8"],"return":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}]},"metadata":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}]}}}]},"name":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"remote_decimals":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}}],"return":["U8"]},"scaling":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}}],"return":["U256"]},"symbol":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}]}}},"coin_management":{"fileFormatVersion":6,"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"coin_management","friends":[{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"its"},{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"its_v0"}],"structs":{"CoinManagement":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"treasury_cap","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}]}}},{"name":"balance","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}]}}},{"name":"distributor","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}},{"name":"operator","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}},{"name":"flow_limit","type":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"flow_limit","name":"FlowLimit","typeArguments":[]}}},{"name":"scaling","type":"U256"},{"name":"dust","type":"U256"}]}},"exposedFunctions":{"add_distributor":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}},"Address"],"return":[]},"add_operator":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}},"Address"],"return":[]},"burn":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"give_coin":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}},"U256",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"has_capability":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}}],"return":["Bool"]},"is_distributor":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}},"Address"],"return":["Bool"]},"mint":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"new_locked":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[],"return":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}]},"new_with_cap":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}],"return":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}]},"set_flow_limit":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"channel","name":"Channel","typeArguments":[]}}},"U64"],"return":[]},"set_scaling":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}},"U256"],"return":[]},"take_balance":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":["U256"]}}},"discovery":{"fileFormatVersion":6,"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"discovery","friends":[],"structs":{},"exposedFunctions":{"call_info":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its","name":"ITS","typeArguments":[]}}},{"Vector":"U8"}],"return":[{"Struct":{"address":"0xf7bb3530d09cb7a2da0bf63ec6000b6af0a89a8a3af77b2394d73a879a3651b1","module":"transaction","name":"Transaction","typeArguments":[]}}]},"interchain_transfer_info":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}},"Address","U64",{"Vector":"U8"}]},"register_transaction":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its","name":"ITS","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xf7bb3530d09cb7a2da0bf63ec6000b6af0a89a8a3af77b2394d73a879a3651b1","module":"discovery","name":"RelayerDiscovery","typeArguments":[]}}}],"return":[]}}},"flow_limit":{"fileFormatVersion":6,"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"flow_limit","friends":[{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"coin_management"}],"structs":{"FlowLimit":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"flow_limit","type":"U64"},{"name":"flow_in","type":"U64"},{"name":"flow_out","type":"U64"},{"name":"current_epoch","type":"U64"}]}},"exposedFunctions":{"add_flow_in":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"flow_limit","name":"FlowLimit","typeArguments":[]}}},"U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[]},"add_flow_out":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"flow_limit","name":"FlowLimit","typeArguments":[]}}},"U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"flow_limit","name":"FlowLimit","typeArguments":[]}}]},"set_flow_limit":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"flow_limit","name":"FlowLimit","typeArguments":[]}}},"U64"],"return":[]}}},"interchain_transfer_ticket":{"fileFormatVersion":6,"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"interchain_transfer_ticket","friends":[{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"its"}],"structs":{"InterchainTransferTicket":{"abilities":{"abilities":[]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"token_id","type":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}}},{"name":"balance","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}},{"name":"source_address","type":"Address"},{"name":"destination_chain","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"destination_address","type":{"Vector":"U8"}},{"name":"metadata","type":{"Vector":"U8"}},{"name":"version","type":"U64"}]}},"exposedFunctions":{"destroy":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"interchain_transfer_ticket","name":"InterchainTransferTicket","typeArguments":[{"TypeParameter":0}]}}],"return":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}},"Address",{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Vector":"U8"},{"Vector":"U8"},"U64"]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}},"Address",{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Vector":"U8"},{"Vector":"U8"},"U64"],"return":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"interchain_transfer_ticket","name":"InterchainTransferTicket","typeArguments":[{"TypeParameter":0}]}}]}}},"its":{"fileFormatVersion":6,"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"its","friends":[{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"discovery"}],"structs":{"CoinRegistered":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"token_id","type":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}}}]},"ITS":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"inner","type":{"Struct":{"address":"0x2","module":"versioned","name":"Versioned","typeArguments":[]}}}]}},"exposedFunctions":{"burn_as_distributor":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its","name":"ITS","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"channel","name":"Channel","typeArguments":[]}}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"channel_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its","name":"ITS","typeArguments":[]}}}],"return":["Address"]},"deploy_remote_interchain_token":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its","name":"ITS","typeArguments":[]}}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message_ticket","name":"MessageTicket","typeArguments":[]}}]},"give_unregistered_coin":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its","name":"ITS","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"mint_as_distributor":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its","name":"ITS","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"channel","name":"Channel","typeArguments":[]}}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"mint_to_as_distributor":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its","name":"ITS","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"channel","name":"Channel","typeArguments":[]}}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}},"Address","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"package_value":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its","name":"ITS","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}}]},"prepare_interchain_transfer":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Vector":"U8"},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"channel","name":"Channel","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"interchain_transfer_ticket","name":"InterchainTransferTicket","typeArguments":[{"TypeParameter":0}]}}]},"receive_deploy_interchain_token":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its","name":"ITS","typeArguments":[]}}},{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"channel","name":"ApprovedMessage","typeArguments":[]}}],"return":[]},"receive_interchain_transfer":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its","name":"ITS","typeArguments":[]}}},{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"channel","name":"ApprovedMessage","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"receive_interchain_transfer_with_data":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its","name":"ITS","typeArguments":[]}}},{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"channel","name":"ApprovedMessage","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"channel","name":"Channel","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Vector":"U8"},{"Vector":"U8"},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"register_coin":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its","name":"ITS","typeArguments":[]}}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}],"return":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}}]},"register_transaction":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its","name":"ITS","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xf7bb3530d09cb7a2da0bf63ec6000b6af0a89a8a3af77b2394d73a879a3651b1","module":"discovery","name":"RelayerDiscovery","typeArguments":[]}}},{"Struct":{"address":"0xf7bb3530d09cb7a2da0bf63ec6000b6af0a89a8a3af77b2394d73a879a3651b1","module":"transaction","name":"Transaction","typeArguments":[]}}],"return":[]},"registered_coin_type":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its","name":"ITS","typeArguments":[]}}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}}]},"remove_trusted_addresses":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its","name":"ITS","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"owner_cap","name":"OwnerCap","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}],"return":[]},"send_interchain_transfer":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its","name":"ITS","typeArguments":[]}}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"interchain_transfer_ticket","name":"InterchainTransferTicket","typeArguments":[{"TypeParameter":0}]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message_ticket","name":"MessageTicket","typeArguments":[]}}]},"set_trusted_addresses":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its","name":"ITS","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"owner_cap","name":"OwnerCap","typeArguments":[]}}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"trusted_addresses","name":"TrustedAddresses","typeArguments":[]}}],"return":[]}}},"its_v0":{"fileFormatVersion":6,"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"its_v0","friends":[{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"discovery"},{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"its"}],"structs":{"ITS_v0":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"channel","type":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"channel","name":"Channel","typeArguments":[]}}},{"name":"address_tracker","type":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"address_tracker","name":"InterchainAddressTracker","typeArguments":[]}}},{"name":"unregistered_coin_types","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"UnregisteredTokenId","typeArguments":[]}},{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}]}}},{"name":"unregistered_coins","type":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}},{"name":"registered_coin_types","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}]}}},{"name":"registered_coins","type":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}},{"name":"relayer_discovery_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"version_control","type":{"Struct":{"address":"0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6","module":"version_control","name":"VersionControl","typeArguments":[]}}}]}},"exposedFunctions":{"add_registered_coin":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"add_unregistered_coin":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"UnregisteredTokenId","typeArguments":[]}},{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"channel":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"channel","name":"Channel","typeArguments":[]}}}]},"channel_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}}],"return":["Address"]},"channel_id":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"channel_mut":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}}],"return":[{"MutableReference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"channel","name":"Channel","typeArguments":[]}}}]},"coin_data":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}}],"return":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_data","name":"CoinData","typeArguments":[{"TypeParameter":0}]}}}]},"coin_data_mut":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}}],"return":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_data","name":"CoinData","typeArguments":[{"TypeParameter":0}]}}}]},"coin_info":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}}],"return":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}}]},"coin_management_mut":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}}],"return":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}}]},"is_trusted_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":["Bool"]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6","module":"version_control","name":"VersionControl","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}]},"registered_coin_type":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}}]},"relayer_discovery_id":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"remove_trusted_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[]},"remove_trusted_addresses":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}],"return":[]},"remove_unregistered_coin":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"UnregisteredTokenId","typeArguments":[]}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}]},"set_relayer_discovery_id":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xf7bb3530d09cb7a2da0bf63ec6000b6af0a89a8a3af77b2394d73a879a3651b1","module":"discovery","name":"RelayerDiscovery","typeArguments":[]}}}],"return":[]},"set_trusted_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[]},"set_trusted_addresses":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"trusted_addresses","name":"TrustedAddresses","typeArguments":[]}}],"return":[]},"token_decimals":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}}],"return":["U8"]},"token_name":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"token_remote_decimals":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}}],"return":["U8"]},"token_symbol":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}},{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}}],"return":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}]},"trusted_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}]},"unregistered_coin_type":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},"U8"],"return":[{"Reference":{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}}]},"version_control":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6","module":"version_control","name":"VersionControl","typeArguments":[]}}}]},"version_control_mut":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"its_v0","name":"ITS_v0","typeArguments":[]}}}],"return":[{"MutableReference":{"Struct":{"address":"0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6","module":"version_control","name":"VersionControl","typeArguments":[]}}}]}}},"owner_cap":{"fileFormatVersion":6,"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"owner_cap","friends":[{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"its"}],"structs":{"OwnerCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]}},"exposedFunctions":{"create":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"owner_cap","name":"OwnerCap","typeArguments":[]}}]}}},"token_id":{"fileFormatVersion":6,"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"token_id","friends":[{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"its"}],"structs":{"TokenId":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"id","type":"Address"}]},"UnregisteredTokenId":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"id","type":"Address"}]}},"exposedFunctions":{"from_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["Address"],"return":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}}]},"from_coin_data":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_info","name":"CoinInfo","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"coin_management","name":"CoinManagement","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}}]},"from_info":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"Reference":"U8"},{"Reference":"Bool"},{"Reference":"Bool"}],"return":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}}]},"from_u256":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U256"],"return":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}}]},"to_u256":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"TokenId","typeArguments":[]}}}],"return":["U256"]},"unregistered_token_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},"U8"],"return":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"token_id","name":"UnregisteredTokenId","typeArguments":[]}}]}}},"trusted_addresses":{"fileFormatVersion":6,"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"trusted_addresses","friends":[],"structs":{"TrustedAddresses":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"trusted_chains","type":{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}},{"name":"trusted_addresses","type":{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}}]}},"exposedFunctions":{"destroy":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"trusted_addresses","name":"TrustedAddresses","typeArguments":[]}}],"return":[{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"trusted_addresses","name":"TrustedAddresses","typeArguments":[]}}]}}},"unregistered_coin_data":{"fileFormatVersion":6,"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"unregistered_coin_data","friends":[{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"its_v0"}],"structs":{"UnregisteredCoinData":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"treasury_cap","type":{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}},{"name":"coin_metadata","type":{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}}]}},"exposedFunctions":{"destroy":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"unregistered_coin_data","name":"UnregisteredCoinData","typeArguments":[{"TypeParameter":0}]}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}],"return":[{"Struct":{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","module":"unregistered_coin_data","name":"UnregisteredCoinData","typeArguments":[{"TypeParameter":0}]}}]}}},"utils":{"fileFormatVersion":6,"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"utils","friends":[{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"coin_info"},{"address":"0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba","name":"its"}],"structs":{},"exposedFunctions":{"decode_metadata":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":["U32",{"Vector":"U8"}]},"hash_coin_info":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"Reference":"U8"}],"return":["Address"]},"is_lowercase":{"visibility":"Private","isEntry":true,"typeParameters":[],"parameters":["U8"],"return":["Bool"]},"is_number":{"visibility":"Private","isEntry":true,"typeParameters":[],"parameters":["U8"],"return":["Bool"]},"is_uppercase":{"visibility":"Private","isEntry":true,"typeParameters":[],"parameters":["U8"],"return":["Bool"]},"module_from_symbol":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}]},"pow":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":["U256","U8"],"return":["U256"]}}}}',
);

export function loadAllTypes(coder: MoveCoder) {
  _0x1.loadAllTypes(coder);
  _0x2.loadAllTypes(coder);
  _0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981.loadAllTypes(
    coder,
  );
  _0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6.loadAllTypes(
    coder,
  );
  for (const m of Object.values(MODULES)) {
    coder.load(
      m as any,
      "0xac68abccc65eb435b5f69b3f81adfadaf0bc174885211345d14cbc19e212b5ba",
    );
  }
}

loadAllTypes(defaultMoveCoder());
