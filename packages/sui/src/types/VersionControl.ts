/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

/* Generated types for 0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6, original address 0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6 */

import { SuiClient } from "@mysten/sui.js/client";
import {
  TransactionArgument,
  TransactionBlock,
  TransactionObjectArgument,
} from "@mysten/sui.js/transactions";
import { ANY_TYPE, TypeDescriptor } from "@typemove/move";
import {
  defaultMoveCoder,
  getMoveCoder,
  MoveCoder,
  transactionArgumentOrObject,
  transactionArgumentOrPure,
  transactionArgumentOrVec,
  TypedDevInspectResults,
  TypedEventInstance,
  ZERO_ADDRESS,
} from "@typemove/sui";
import { _0x1, _0x2 } from "@typemove/sui/builtin";

export namespace version_control {
  export interface VersionControl {
    allowed_functions: _0x2.vec_set.VecSet<_0x1.ascii.String>[];
  }

  export namespace VersionControl {
    export const TYPE_QNAME =
      "0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6::version_control::VersionControl";

    const TYPE = new TypeDescriptor<VersionControl>(VersionControl.TYPE_QNAME);

    export function type(): TypeDescriptor<VersionControl> {
      return TYPE.apply();
    }
  }

  export interface VersionControlInstance
    extends TypedEventInstance<VersionControl> {
    data_decoded: VersionControl;
    type_arguments: [];
  }

  export namespace builder {
    export function allowedFunctions(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6::version_control::allowed_functions",
        arguments: _args,
      });
    }
    export function check(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ]
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6::version_control::check",
        arguments: _args,
      });
    }
    export function new_(
      tx: TransactionBlock,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6::version_control::new",
        arguments: _args,
      });
    }
    export function pushBack(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ]
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6::version_control::push_back",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function allowedFunctions(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.allowedFunctions(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes
      );
    }
    export async function check(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.check(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes
      );
    }
    export async function new_(
      client: SuiClient,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument]
    ): Promise<TypedDevInspectResults<[version_control.VersionControl]>> {
      const tx = new TransactionBlock();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [version_control.VersionControl]
      >(inspectRes);
    }
    export async function pushBack(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.pushBack(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes
      );
    }
  }
}

const MODULES = JSON.parse(
  '[{"fileFormatVersion":6,"address":"0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6","name":"version_control","friends":[],"structs":{"VersionControl":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"allowed_functions","type":{"Vector":{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}]}}}}]}},"exposedFunctions":{"allowed_functions":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6","module":"version_control","name":"VersionControl","typeArguments":[]}}}],"return":[{"MutableReference":{"Vector":{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}]}}}}]},"check":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6","module":"version_control","name":"VersionControl","typeArguments":[]}}},"U64",{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}}],"return":[{"Struct":{"address":"0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6","module":"version_control","name":"VersionControl","typeArguments":[]}}]},"push_back":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6","module":"version_control","name":"VersionControl","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}],"return":[]}}}]'
);

export function loadAllTypes(coder: MoveCoder) {
  _0x1.loadAllTypes(coder);
  _0x2.loadAllTypes(coder);
  for (const m of Object.values(MODULES)) {
    coder.load(
      m as any,
      "0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6"
    );
  }
}

loadAllTypes(defaultMoveCoder());
