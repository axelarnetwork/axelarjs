/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

/* Generated types for 0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981, original address 0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981 */

import { SuiClient } from "@mysten/sui.js/client";
import {
  TransactionArgument,
  TransactionBlock,
  TransactionObjectArgument,
} from "@mysten/sui.js/transactions";
import { ANY_TYPE, TypeDescriptor } from "@typemove/move";
import {
  defaultMoveCoder,
  getMoveCoder,
  MoveCoder,
  transactionArgumentOrObject,
  transactionArgumentOrPure,
  transactionArgumentOrVec,
  TypedDevInspectResults,
  TypedEventInstance,
  ZERO_ADDRESS,
} from "@typemove/sui";
import { _0x1, _0x2 } from "@typemove/sui/builtin";

import * as _0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6 from "./0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6.js";

export namespace auth {
  export interface AxelarSigners {
    epoch: bigint;
    epoch_by_signers_hash: _0x2.table.Table<bytes32.Bytes32, bigint>;
    domain_separator: bytes32.Bytes32;
    minimum_rotation_delay: bigint;
    last_rotation_timestamp: bigint;
    previous_signers_retention: bigint;
  }

  export namespace AxelarSigners {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::auth::AxelarSigners";

    const TYPE = new TypeDescriptor<AxelarSigners>(AxelarSigners.TYPE_QNAME);

    export function type(): TypeDescriptor<AxelarSigners> {
      return TYPE.apply();
    }
  }

  export interface MessageToSign {
    domain_separator: bytes32.Bytes32;
    signers_hash: bytes32.Bytes32;
    data_hash: bytes32.Bytes32;
  }

  export namespace MessageToSign {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::auth::MessageToSign";

    const TYPE = new TypeDescriptor<MessageToSign>(MessageToSign.TYPE_QNAME);

    export function type(): TypeDescriptor<MessageToSign> {
      return TYPE.apply();
    }
  }

  export interface MessageToSignInstance
    extends TypedEventInstance<MessageToSign> {
    data_decoded: MessageToSign;
    type_arguments: [];
  }

  export namespace builder {
    export function new_(
      tx: TransactionBlock,
      args: []
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::auth::new",
        arguments: _args,
      });
    }
    export function rotateSigners(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        weighted_signers.WeightedSigners | TransactionArgument,
        Boolean | TransactionArgument,
      ]
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::auth::rotate_signers",
        arguments: _args,
      });
    }
    export function setup(
      tx: TransactionBlock,
      args: [
        bytes32.Bytes32 | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        weighted_signers.WeightedSigners | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ]
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::auth::setup",
        arguments: _args,
      });
    }
    export function validateProof(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bytes32.Bytes32 | TransactionArgument,
        proof.Proof | TransactionArgument,
      ]
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::auth::validate_proof",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function new_(
      client: SuiClient,
      args: []
    ): Promise<TypedDevInspectResults<[auth.AxelarSigners]>> {
      const tx = new TransactionBlock();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [auth.AxelarSigners]
      >(inspectRes);
    }
    export async function rotateSigners(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        weighted_signers.WeightedSigners | TransactionArgument,
        Boolean | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.rotateSigners(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes
      );
    }
    export async function setup(
      client: SuiClient,
      args: [
        bytes32.Bytes32 | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        weighted_signers.WeightedSigners | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[auth.AxelarSigners]>> {
      const tx = new TransactionBlock();
      builder.setup(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [auth.AxelarSigners]
      >(inspectRes);
    }
    export async function validateProof(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bytes32.Bytes32 | TransactionArgument,
        proof.Proof | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[Boolean]>> {
      const tx = new TransactionBlock();
      builder.validateProof(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[Boolean]>(
        inspectRes
      );
    }
  }
}

export namespace bytes32 {
  export interface Bytes32 {
    bytes: string;
  }

  export namespace Bytes32 {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::bytes32::Bytes32";

    const TYPE = new TypeDescriptor<Bytes32>(Bytes32.TYPE_QNAME);

    export function type(): TypeDescriptor<Bytes32> {
      return TYPE.apply();
    }
  }

  export interface Bytes32Instance extends TypedEventInstance<Bytes32> {
    data_decoded: Bytes32;
    type_arguments: [];
  }

  export namespace builder {
    export function default_(
      tx: TransactionBlock,
      args: []
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::bytes32::default",
        arguments: _args,
      });
    }
    export function fromAddress(
      tx: TransactionBlock,
      args: [string | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::bytes32::from_address",
        arguments: _args,
      });
    }
    export function fromBytes(
      tx: TransactionBlock,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::bytes32::from_bytes",
        arguments: _args,
      });
    }
    export function length(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::bytes32::length",
        arguments: _args,
      });
    }
    export function new_(
      tx: TransactionBlock,
      args: [string | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::bytes32::new",
        arguments: _args,
      });
    }
    export function peel(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::bytes32::peel",
        arguments: _args,
      });
    }
    export function toBytes(
      tx: TransactionBlock,
      args: [bytes32.Bytes32 | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::bytes32::to_bytes",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function default_(
      client: SuiClient,
      args: []
    ): Promise<TypedDevInspectResults<[bytes32.Bytes32]>> {
      const tx = new TransactionBlock();
      builder.default_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bytes32.Bytes32]
      >(inspectRes);
    }
    export async function fromAddress(
      client: SuiClient,
      args: [string | TransactionArgument]
    ): Promise<TypedDevInspectResults<[bytes32.Bytes32]>> {
      const tx = new TransactionBlock();
      builder.fromAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bytes32.Bytes32]
      >(inspectRes);
    }
    export async function fromBytes(
      client: SuiClient,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument]
    ): Promise<TypedDevInspectResults<[bytes32.Bytes32]>> {
      const tx = new TransactionBlock();
      builder.fromBytes(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bytes32.Bytes32]
      >(inspectRes);
    }
    export async function length(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.length(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes
      );
    }
    export async function new_(
      client: SuiClient,
      args: [string | TransactionArgument]
    ): Promise<TypedDevInspectResults<[bytes32.Bytes32]>> {
      const tx = new TransactionBlock();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bytes32.Bytes32]
      >(inspectRes);
    }
    export async function peel(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[bytes32.Bytes32]>> {
      const tx = new TransactionBlock();
      builder.peel(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bytes32.Bytes32]
      >(inspectRes);
    }
    export async function toBytes(
      client: SuiClient,
      args: [bytes32.Bytes32 | TransactionArgument]
    ): Promise<TypedDevInspectResults<[number[]]>> {
      const tx = new TransactionBlock();
      builder.toBytes(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number[]]>(
        inspectRes
      );
    }
  }
}

export namespace channel {
  export interface ApprovedMessage {
    source_chain: _0x1.ascii.String;
    message_id: _0x1.ascii.String;
    source_address: _0x1.ascii.String;
    destination_id: string;
    payload: number[];
  }

  export namespace ApprovedMessage {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::channel::ApprovedMessage";

    const TYPE = new TypeDescriptor<ApprovedMessage>(
      ApprovedMessage.TYPE_QNAME
    );

    export function type(): TypeDescriptor<ApprovedMessage> {
      return TYPE.apply();
    }
  }

  export interface Channel {
    id: _0x2.object_.UID;
  }

  export namespace Channel {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::channel::Channel";

    const TYPE = new TypeDescriptor<Channel>(Channel.TYPE_QNAME);

    export function type(): TypeDescriptor<Channel> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function consumeApprovedMessage(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        channel.ApprovedMessage | TransactionArgument,
      ]
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::channel::consume_approved_message",
        arguments: _args,
      });
    }
    export function createApprovedMessage(
      tx: TransactionBlock,
      args: [
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ]
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::channel::create_approved_message",
        arguments: _args,
      });
    }
    export function destroy(
      tx: TransactionBlock,
      args: [channel.Channel | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::channel::destroy",
        arguments: _args,
      });
    }
    export function id(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::channel::id",
        arguments: _args,
      });
    }
    export function new_(
      tx: TransactionBlock,
      args: []
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::channel::new",
        arguments: _args,
      });
    }
    export function toAddress(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::channel::to_address",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function consumeApprovedMessage(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        channel.ApprovedMessage | TransactionArgument,
      ]
    ): Promise<
      TypedDevInspectResults<
        [_0x1.ascii.String, _0x1.ascii.String, _0x1.ascii.String, number[]]
      >
    > {
      const tx = new TransactionBlock();
      builder.consumeApprovedMessage(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.ascii.String, _0x1.ascii.String, _0x1.ascii.String, number[]]
      >(inspectRes);
    }
    export async function createApprovedMessage(
      client: SuiClient,
      args: [
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[channel.ApprovedMessage]>> {
      const tx = new TransactionBlock();
      builder.createApprovedMessage(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [channel.ApprovedMessage]
      >(inspectRes);
    }
    export async function destroy(
      client: SuiClient,
      args: [channel.Channel | TransactionArgument]
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.destroy(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes
      );
    }
    export async function id(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[_0x2.object_.ID]>> {
      const tx = new TransactionBlock();
      builder.id(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.object_.ID]
      >(inspectRes);
    }
    export async function new_(
      client: SuiClient,
      args: []
    ): Promise<TypedDevInspectResults<[channel.Channel]>> {
      const tx = new TransactionBlock();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [channel.Channel]
      >(inspectRes);
    }
    export async function toAddress(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.toAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes
      );
    }
  }
}

export namespace discovery {
  export interface Function {
    package_id: string;
    module_name: _0x1.ascii.String;
    name: _0x1.ascii.String;
  }

  export namespace Function {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::discovery::Function";

    const TYPE = new TypeDescriptor<Function>(Function.TYPE_QNAME);

    export function type(): TypeDescriptor<Function> {
      return TYPE.apply();
    }
  }

  export interface FunctionInstance extends TypedEventInstance<Function> {
    data_decoded: Function;
    type_arguments: [];
  }

  export interface MoveCall {
    function: discovery.Function;
    arguments: number[][];
    type_arguments: _0x1.ascii.String[];
  }

  export namespace MoveCall {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::discovery::MoveCall";

    const TYPE = new TypeDescriptor<MoveCall>(MoveCall.TYPE_QNAME);

    export function type(): TypeDescriptor<MoveCall> {
      return TYPE.apply();
    }
  }

  export interface MoveCallInstance extends TypedEventInstance<MoveCall> {
    data_decoded: MoveCall;
    type_arguments: [];
  }

  export interface RelayerDiscovery {
    id: _0x2.object_.UID;
    configurations: _0x2.table.Table<_0x2.object_.ID, discovery.Transaction>;
  }

  export namespace RelayerDiscovery {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::discovery::RelayerDiscovery";

    const TYPE = new TypeDescriptor<RelayerDiscovery>(
      RelayerDiscovery.TYPE_QNAME
    );

    export function type(): TypeDescriptor<RelayerDiscovery> {
      return TYPE.apply();
    }
  }

  export interface Transaction {
    is_final: Boolean;
    move_calls: discovery.MoveCall[];
  }

  export namespace Transaction {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::discovery::Transaction";

    const TYPE = new TypeDescriptor<Transaction>(Transaction.TYPE_QNAME);

    export function type(): TypeDescriptor<Transaction> {
      return TYPE.apply();
    }
  }

  export interface TransactionInstance extends TypedEventInstance<Transaction> {
    data_decoded: Transaction;
    type_arguments: [];
  }

  export namespace builder {
    export function getTransaction(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
      ]
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::discovery::get_transaction",
        arguments: _args,
      });
    }
    export function newFunction(
      tx: TransactionBlock,
      args: [
        string | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ]
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::discovery::new_function",
        arguments: _args,
      });
    }
    export function newFunctionFromBcs(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::discovery::new_function_from_bcs",
        arguments: _args,
      });
    }
    export function newMoveCall(
      tx: TransactionBlock,
      args: [
        discovery.Function | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ]
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::discovery::new_move_call",
        arguments: _args,
      });
    }
    export function newMoveCallFromBcs(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::discovery::new_move_call_from_bcs",
        arguments: _args,
      });
    }
    export function newTransaction(
      tx: TransactionBlock,
      args: [
        Boolean | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ]
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::discovery::new_transaction",
        arguments: _args,
      });
    }
    export function newTransactionFromBcs(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::discovery::new_transaction_from_bcs",
        arguments: _args,
      });
    }
    export function packageId<T0 = any>(
      tx: TransactionBlock,
      args: [],
      typeArguments: [TypeDescriptor<T0> | string]
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::discovery::package_id",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function registerTransaction(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        discovery.Transaction | TransactionArgument,
      ]
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::discovery::register_transaction",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function getTransaction(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[discovery.Transaction]>> {
      const tx = new TransactionBlock();
      builder.getTransaction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [discovery.Transaction]
      >(inspectRes);
    }
    export async function newFunction(
      client: SuiClient,
      args: [
        string | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[discovery.Function]>> {
      const tx = new TransactionBlock();
      builder.newFunction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [discovery.Function]
      >(inspectRes);
    }
    export async function newFunctionFromBcs(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[discovery.Function]>> {
      const tx = new TransactionBlock();
      builder.newFunctionFromBcs(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [discovery.Function]
      >(inspectRes);
    }
    export async function newMoveCall(
      client: SuiClient,
      args: [
        discovery.Function | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[discovery.MoveCall]>> {
      const tx = new TransactionBlock();
      builder.newMoveCall(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [discovery.MoveCall]
      >(inspectRes);
    }
    export async function newMoveCallFromBcs(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[discovery.MoveCall]>> {
      const tx = new TransactionBlock();
      builder.newMoveCallFromBcs(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [discovery.MoveCall]
      >(inspectRes);
    }
    export async function newTransaction(
      client: SuiClient,
      args: [
        Boolean | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[discovery.Transaction]>> {
      const tx = new TransactionBlock();
      builder.newTransaction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [discovery.Transaction]
      >(inspectRes);
    }
    export async function newTransactionFromBcs(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[discovery.Transaction]>> {
      const tx = new TransactionBlock();
      builder.newTransactionFromBcs(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [discovery.Transaction]
      >(inspectRes);
    }
    export async function packageId<T0 = any>(
      client: SuiClient,
      args: [],
      typeArguments: [TypeDescriptor<T0> | string]
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.packageId(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes
      );
    }
    export async function registerTransaction(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        discovery.Transaction | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.registerTransaction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes
      );
    }
  }
}

export namespace events {
  export interface ChannelCreated {
    id: string;
  }

  export namespace ChannelCreated {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::events::ChannelCreated";

    const TYPE = new TypeDescriptor<ChannelCreated>(ChannelCreated.TYPE_QNAME);

    export function type(): TypeDescriptor<ChannelCreated> {
      return TYPE.apply();
    }
  }

  export interface ChannelCreatedInstance
    extends TypedEventInstance<ChannelCreated> {
    data_decoded: ChannelCreated;
    type_arguments: [];
  }

  export interface ChannelDestroyed {
    id: string;
  }

  export namespace ChannelDestroyed {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::events::ChannelDestroyed";

    const TYPE = new TypeDescriptor<ChannelDestroyed>(
      ChannelDestroyed.TYPE_QNAME
    );

    export function type(): TypeDescriptor<ChannelDestroyed> {
      return TYPE.apply();
    }
  }

  export interface ChannelDestroyedInstance
    extends TypedEventInstance<ChannelDestroyed> {
    data_decoded: ChannelDestroyed;
    type_arguments: [];
  }

  export interface ContractCall {
    source_id: string;
    destination_chain: _0x1.ascii.String;
    destination_address: _0x1.ascii.String;
    payload: number[];
    payload_hash: string;
  }

  export namespace ContractCall {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::events::ContractCall";

    const TYPE = new TypeDescriptor<ContractCall>(ContractCall.TYPE_QNAME);

    export function type(): TypeDescriptor<ContractCall> {
      return TYPE.apply();
    }
  }

  export interface ContractCallInstance
    extends TypedEventInstance<ContractCall> {
    data_decoded: ContractCall;
    type_arguments: [];
  }

  export interface MessageApproved {
    message: message.Message;
  }

  export namespace MessageApproved {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::events::MessageApproved";

    const TYPE = new TypeDescriptor<MessageApproved>(
      MessageApproved.TYPE_QNAME
    );

    export function type(): TypeDescriptor<MessageApproved> {
      return TYPE.apply();
    }
  }

  export interface MessageApprovedInstance
    extends TypedEventInstance<MessageApproved> {
    data_decoded: MessageApproved;
    type_arguments: [];
  }

  export interface MessageExecuted {
    message: message.Message;
  }

  export namespace MessageExecuted {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::events::MessageExecuted";

    const TYPE = new TypeDescriptor<MessageExecuted>(
      MessageExecuted.TYPE_QNAME
    );

    export function type(): TypeDescriptor<MessageExecuted> {
      return TYPE.apply();
    }
  }

  export interface MessageExecutedInstance
    extends TypedEventInstance<MessageExecuted> {
    data_decoded: MessageExecuted;
    type_arguments: [];
  }

  export interface SignersRotated {
    epoch: bigint;
    signers_hash: bytes32.Bytes32;
    signers: weighted_signers.WeightedSigners;
  }

  export namespace SignersRotated {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::events::SignersRotated";

    const TYPE = new TypeDescriptor<SignersRotated>(SignersRotated.TYPE_QNAME);

    export function type(): TypeDescriptor<SignersRotated> {
      return TYPE.apply();
    }
  }

  export interface SignersRotatedInstance
    extends TypedEventInstance<SignersRotated> {
    data_decoded: SignersRotated;
    type_arguments: [];
  }

  export namespace builder {
    export function channelCreated(
      tx: TransactionBlock,
      args: [string | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::events::channel_created",
        arguments: _args,
      });
    }
    export function channelDestroyed(
      tx: TransactionBlock,
      args: [string | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::events::channel_destroyed",
        arguments: _args,
      });
    }
    export function contractCall(
      tx: TransactionBlock,
      args: [
        string | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionArgument,
      ]
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::events::contract_call",
        arguments: _args,
      });
    }
    export function messageApproved(
      tx: TransactionBlock,
      args: [message.Message | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::events::message_approved",
        arguments: _args,
      });
    }
    export function messageExecuted(
      tx: TransactionBlock,
      args: [message.Message | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::events::message_executed",
        arguments: _args,
      });
    }
    export function signersRotated(
      tx: TransactionBlock,
      args: [
        bigint | TransactionArgument,
        bytes32.Bytes32 | TransactionArgument,
        weighted_signers.WeightedSigners | TransactionArgument,
      ]
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::events::signers_rotated",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function channelCreated(
      client: SuiClient,
      args: [string | TransactionArgument]
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.channelCreated(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes
      );
    }
    export async function channelDestroyed(
      client: SuiClient,
      args: [string | TransactionArgument]
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.channelDestroyed(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes
      );
    }
    export async function contractCall(
      client: SuiClient,
      args: [
        string | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.contractCall(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes
      );
    }
    export async function messageApproved(
      client: SuiClient,
      args: [message.Message | TransactionArgument]
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.messageApproved(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes
      );
    }
    export async function messageExecuted(
      client: SuiClient,
      args: [message.Message | TransactionArgument]
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.messageExecuted(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes
      );
    }
    export async function signersRotated(
      client: SuiClient,
      args: [
        bigint | TransactionArgument,
        bytes32.Bytes32 | TransactionArgument,
        weighted_signers.WeightedSigners | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.signersRotated(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes
      );
    }
  }
}

export namespace gateway {
  export interface CreatorCap {
    id: _0x2.object_.UID;
  }

  export namespace CreatorCap {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::gateway::CreatorCap";

    const TYPE = new TypeDescriptor<CreatorCap>(CreatorCap.TYPE_QNAME);

    export function type(): TypeDescriptor<CreatorCap> {
      return TYPE.apply();
    }
  }

  export interface Gateway {
    id: _0x2.object_.UID;
    inner: _0x2.versioned.Versioned;
  }

  export namespace Gateway {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::gateway::Gateway";

    const TYPE = new TypeDescriptor<Gateway>(Gateway.TYPE_QNAME);

    export function type(): TypeDescriptor<Gateway> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function approveMessages(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ]
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::gateway::approve_messages",
        arguments: _args,
      });
    }
    export function isMessageApproved(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        string | TransactionArgument,
        bytes32.Bytes32 | TransactionArgument,
      ]
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::gateway::is_message_approved",
        arguments: _args,
      });
    }
    export function isMessageExecuted(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ]
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::gateway::is_message_executed",
        arguments: _args,
      });
    }
    export function prepareMessage(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ]
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::gateway::prepare_message",
        arguments: _args,
      });
    }
    export function rotateSigners(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ]
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::gateway::rotate_signers",
        arguments: _args,
      });
    }
    export function sendMessage(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        message_ticket.MessageTicket | TransactionArgument,
      ]
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::gateway::send_message",
        arguments: _args,
      });
    }
    export function setup(
      tx: TransactionBlock,
      args: [
        gateway.CreatorCap | TransactionArgument,
        string | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ]
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::gateway::setup",
        arguments: _args,
      });
    }
    export function takeApprovedMessage(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ]
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::gateway::take_approved_message",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function isMessageApproved(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        string | TransactionArgument,
        bytes32.Bytes32 | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[Boolean]>> {
      const tx = new TransactionBlock();
      builder.isMessageApproved(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[Boolean]>(
        inspectRes
      );
    }
    export async function isMessageExecuted(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[Boolean]>> {
      const tx = new TransactionBlock();
      builder.isMessageExecuted(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[Boolean]>(
        inspectRes
      );
    }
    export async function prepareMessage(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[message_ticket.MessageTicket]>> {
      const tx = new TransactionBlock();
      builder.prepareMessage(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [message_ticket.MessageTicket]
      >(inspectRes);
    }

    export async function sendMessage(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        message_ticket.MessageTicket | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.sendMessage(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes
      );
    }

    export async function takeApprovedMessage(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[channel.ApprovedMessage]>> {
      const tx = new TransactionBlock();
      builder.takeApprovedMessage(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [channel.ApprovedMessage]
      >(inspectRes);
    }
  }
}

export namespace gateway_v0 {
  export interface Gateway_v0 {
    operator: string;
    messages: _0x2.table.Table<bytes32.Bytes32, message_status.MessageStatus>;
    signers: auth.AxelarSigners;
    version_control: _0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6.version_control.VersionControl;
  }

  export namespace Gateway_v0 {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::gateway_v0::Gateway_v0";

    const TYPE = new TypeDescriptor<Gateway_v0>(Gateway_v0.TYPE_QNAME);

    export function type(): TypeDescriptor<Gateway_v0> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function approveMessages(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ]
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::gateway_v0::approve_messages",
        arguments: _args,
      });
    }
    export function isMessageApproved(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        string | TransactionArgument,
        bytes32.Bytes32 | TransactionArgument,
      ]
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::gateway_v0::is_message_approved",
        arguments: _args,
      });
    }
    export function isMessageExecuted(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ]
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::gateway_v0::is_message_executed",
        arguments: _args,
      });
    }
    export function new_(
      tx: TransactionBlock,
      args: [
        string | TransactionArgument,
        (
          | _0x2.table.Table<bytes32.Bytes32, message_status.MessageStatus>
          | TransactionArgument
        ),
        auth.AxelarSigners | TransactionArgument,
        (
          | _0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6.version_control.VersionControl
          | TransactionArgument
        ),
      ]
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::gateway_v0::new",
        arguments: _args,
      });
    }
    export function rotateSigners(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ]
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::gateway_v0::rotate_signers",
        arguments: _args,
      });
    }
    export function sendMessage(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        message_ticket.MessageTicket | TransactionArgument,
        bigint | TransactionArgument,
      ]
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::gateway_v0::send_message",
        arguments: _args,
      });
    }
    export function takeApprovedMessage(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ]
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::gateway_v0::take_approved_message",
        arguments: _args,
      });
    }
    export function versionControl(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::gateway_v0::version_control",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function approveMessages(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.approveMessages(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes
      );
    }
    export async function isMessageApproved(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        string | TransactionArgument,
        bytes32.Bytes32 | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[Boolean]>> {
      const tx = new TransactionBlock();
      builder.isMessageApproved(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[Boolean]>(
        inspectRes
      );
    }
    export async function isMessageExecuted(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[Boolean]>> {
      const tx = new TransactionBlock();
      builder.isMessageExecuted(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[Boolean]>(
        inspectRes
      );
    }
    export async function new_(
      client: SuiClient,
      args: [
        string | TransactionArgument,
        (
          | _0x2.table.Table<bytes32.Bytes32, message_status.MessageStatus>
          | TransactionArgument
        ),
        auth.AxelarSigners | TransactionArgument,
        (
          | _0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6.version_control.VersionControl
          | TransactionArgument
        ),
      ]
    ): Promise<TypedDevInspectResults<[gateway_v0.Gateway_v0]>> {
      const tx = new TransactionBlock();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [gateway_v0.Gateway_v0]
      >(inspectRes);
    }
    export async function rotateSigners(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.rotateSigners(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes
      );
    }
    export async function sendMessage(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        message_ticket.MessageTicket | TransactionArgument,
        bigint | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.sendMessage(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes
      );
    }
    export async function takeApprovedMessage(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[channel.ApprovedMessage]>> {
      const tx = new TransactionBlock();
      builder.takeApprovedMessage(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [channel.ApprovedMessage]
      >(inspectRes);
    }
    export async function versionControl(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.versionControl(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes
      );
    }
  }
}

export namespace message {
  export interface Message {
    source_chain: _0x1.ascii.String;
    message_id: _0x1.ascii.String;
    source_address: _0x1.ascii.String;
    destination_id: string;
    payload_hash: bytes32.Bytes32;
  }

  export namespace Message {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::message::Message";

    const TYPE = new TypeDescriptor<Message>(Message.TYPE_QNAME);

    export function type(): TypeDescriptor<Message> {
      return TYPE.apply();
    }
  }

  export interface MessageInstance extends TypedEventInstance<Message> {
    data_decoded: Message;
    type_arguments: [];
  }

  export namespace builder {
    export function commandId(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::message::command_id",
        arguments: _args,
      });
    }
    export function hash(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::message::hash",
        arguments: _args,
      });
    }
    export function messageToCommandId(
      tx: TransactionBlock,
      args: [
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ]
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::message::message_to_command_id",
        arguments: _args,
      });
    }
    export function new_(
      tx: TransactionBlock,
      args: [
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        string | TransactionArgument,
        bytes32.Bytes32 | TransactionArgument,
      ]
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::message::new",
        arguments: _args,
      });
    }
    export function peel(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::message::peel",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function commandId(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[bytes32.Bytes32]>> {
      const tx = new TransactionBlock();
      builder.commandId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bytes32.Bytes32]
      >(inspectRes);
    }
    export async function hash(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[bytes32.Bytes32]>> {
      const tx = new TransactionBlock();
      builder.hash(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bytes32.Bytes32]
      >(inspectRes);
    }
    export async function messageToCommandId(
      client: SuiClient,
      args: [
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[bytes32.Bytes32]>> {
      const tx = new TransactionBlock();
      builder.messageToCommandId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bytes32.Bytes32]
      >(inspectRes);
    }
    export async function new_(
      client: SuiClient,
      args: [
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        string | TransactionArgument,
        bytes32.Bytes32 | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[message.Message]>> {
      const tx = new TransactionBlock();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [message.Message]
      >(inspectRes);
    }
    export async function peel(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[message.Message]>> {
      const tx = new TransactionBlock();
      builder.peel(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [message.Message]
      >(inspectRes);
    }
  }
}

export namespace message_status {
  export namespace builder {
    export function approved(
      tx: TransactionBlock,
      args: [bytes32.Bytes32 | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::message_status::approved",
        arguments: _args,
      });
    }
    export function executed(
      tx: TransactionBlock,
      args: []
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::message_status::executed",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function approved(
      client: SuiClient,
      args: [bytes32.Bytes32 | TransactionArgument]
    ): Promise<TypedDevInspectResults<[message_status.MessageStatus]>> {
      const tx = new TransactionBlock();
      builder.approved(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [message_status.MessageStatus]
      >(inspectRes);
    }
    export async function executed(
      client: SuiClient,
      args: []
    ): Promise<TypedDevInspectResults<[message_status.MessageStatus]>> {
      const tx = new TransactionBlock();
      builder.executed(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [message_status.MessageStatus]
      >(inspectRes);
    }
  }
}

export namespace message_ticket {
  export interface MessageTicket {
    source_id: string;
    destination_chain: _0x1.ascii.String;
    destination_address: _0x1.ascii.String;
    payload: number[];
    version: bigint;
  }

  export namespace MessageTicket {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::message_ticket::MessageTicket";

    const TYPE = new TypeDescriptor<MessageTicket>(MessageTicket.TYPE_QNAME);

    export function type(): TypeDescriptor<MessageTicket> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function destinationAddress(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::message_ticket::destination_address",
        arguments: _args,
      });
    }
    export function destinationChain(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::message_ticket::destination_chain",
        arguments: _args,
      });
    }
    export function destroy(
      tx: TransactionBlock,
      args: [message_ticket.MessageTicket | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::message_ticket::destroy",
        arguments: _args,
      });
    }
    export function new_(
      tx: TransactionBlock,
      args: [
        string | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
      ]
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::message_ticket::new",
        arguments: _args,
      });
    }
    export function payload(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::message_ticket::payload",
        arguments: _args,
      });
    }
    export function sourceId(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::message_ticket::source_id",
        arguments: _args,
      });
    }
    export function version(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::message_ticket::version",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function destinationAddress(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[_0x1.ascii.String]>> {
      const tx = new TransactionBlock();
      builder.destinationAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.ascii.String]
      >(inspectRes);
    }
    export async function destinationChain(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[_0x1.ascii.String]>> {
      const tx = new TransactionBlock();
      builder.destinationChain(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.ascii.String]
      >(inspectRes);
    }
    export async function destroy(
      client: SuiClient,
      args: [message_ticket.MessageTicket | TransactionArgument]
    ): Promise<
      TypedDevInspectResults<
        [string, _0x1.ascii.String, _0x1.ascii.String, number[], bigint]
      >
    > {
      const tx = new TransactionBlock();
      builder.destroy(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [string, _0x1.ascii.String, _0x1.ascii.String, number[], bigint]
      >(inspectRes);
    }
    export async function new_(
      client: SuiClient,
      args: [
        string | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[message_ticket.MessageTicket]>> {
      const tx = new TransactionBlock();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [message_ticket.MessageTicket]
      >(inspectRes);
    }
    export async function payload(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[number[]]>> {
      const tx = new TransactionBlock();
      builder.payload(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number[]]>(
        inspectRes
      );
    }
    export async function sourceId(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.sourceId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes
      );
    }
    export async function version(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.version(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes
      );
    }
  }
}

export namespace proof {
  export interface Proof {
    signers: weighted_signers.WeightedSigners;
    signatures: proof.Signature[];
  }

  export namespace Proof {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::proof::Proof";

    const TYPE = new TypeDescriptor<Proof>(Proof.TYPE_QNAME);

    export function type(): TypeDescriptor<Proof> {
      return TYPE.apply();
    }
  }

  export interface ProofInstance extends TypedEventInstance<Proof> {
    data_decoded: Proof;
    type_arguments: [];
  }

  export interface Signature {
    bytes: number[];
  }

  export namespace Signature {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::proof::Signature";

    const TYPE = new TypeDescriptor<Signature>(Signature.TYPE_QNAME);

    export function type(): TypeDescriptor<Signature> {
      return TYPE.apply();
    }
  }

  export interface SignatureInstance extends TypedEventInstance<Signature> {
    data_decoded: Signature;
    type_arguments: [];
  }

  export namespace builder {
    export function newSignature(
      tx: TransactionBlock,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::proof::new_signature",
        arguments: _args,
      });
    }
    export function peel(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::proof::peel",
        arguments: _args,
      });
    }
    export function peelSignature(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::proof::peel_signature",
        arguments: _args,
      });
    }
    export function recoverPubKey(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ]
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::proof::recover_pub_key",
        arguments: _args,
      });
    }
    export function signatures(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::proof::signatures",
        arguments: _args,
      });
    }
    export function signers(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::proof::signers",
        arguments: _args,
      });
    }
    export function validate(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ]
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::proof::validate",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function newSignature(
      client: SuiClient,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument]
    ): Promise<TypedDevInspectResults<[proof.Signature]>> {
      const tx = new TransactionBlock();
      builder.newSignature(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [proof.Signature]
      >(inspectRes);
    }
    export async function peel(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[proof.Proof]>> {
      const tx = new TransactionBlock();
      builder.peel(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[proof.Proof]>(
        inspectRes
      );
    }
    export async function peelSignature(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[proof.Signature]>> {
      const tx = new TransactionBlock();
      builder.peelSignature(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [proof.Signature]
      >(inspectRes);
    }
    export async function recoverPubKey(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[number[]]>> {
      const tx = new TransactionBlock();
      builder.recoverPubKey(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number[]]>(
        inspectRes
      );
    }
    export async function signatures(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.signatures(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes
      );
    }
    export async function signers(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.signers(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes
      );
    }
    export async function validate(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.validate(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes
      );
    }
  }
}

export namespace weighted_signer {
  export interface WeightedSigner {
    pub_key: number[];
    weight: bigint;
  }

  export namespace WeightedSigner {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::weighted_signer::WeightedSigner";

    const TYPE = new TypeDescriptor<WeightedSigner>(WeightedSigner.TYPE_QNAME);

    export function type(): TypeDescriptor<WeightedSigner> {
      return TYPE.apply();
    }
  }

  export interface WeightedSignerInstance
    extends TypedEventInstance<WeightedSigner> {
    data_decoded: WeightedSigner;
    type_arguments: [];
  }

  export namespace builder {
    export function default_(
      tx: TransactionBlock,
      args: []
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::weighted_signer::default",
        arguments: _args,
      });
    }
    export function lt(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ]
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::weighted_signer::lt",
        arguments: _args,
      });
    }
    export function new_(
      tx: TransactionBlock,
      args: [
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
      ]
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::weighted_signer::new",
        arguments: _args,
      });
    }
    export function peel(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::weighted_signer::peel",
        arguments: _args,
      });
    }
    export function pubKey(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::weighted_signer::pub_key",
        arguments: _args,
      });
    }
    export function validate(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::weighted_signer::validate",
        arguments: _args,
      });
    }
    export function weight(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::weighted_signer::weight",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function default_(
      client: SuiClient,
      args: []
    ): Promise<TypedDevInspectResults<[weighted_signer.WeightedSigner]>> {
      const tx = new TransactionBlock();
      builder.default_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [weighted_signer.WeightedSigner]
      >(inspectRes);
    }
    export async function lt(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[Boolean]>> {
      const tx = new TransactionBlock();
      builder.lt(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[Boolean]>(
        inspectRes
      );
    }
    export async function new_(
      client: SuiClient,
      args: [
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
      ]
    ): Promise<TypedDevInspectResults<[weighted_signer.WeightedSigner]>> {
      const tx = new TransactionBlock();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [weighted_signer.WeightedSigner]
      >(inspectRes);
    }
    export async function peel(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[weighted_signer.WeightedSigner]>> {
      const tx = new TransactionBlock();
      builder.peel(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [weighted_signer.WeightedSigner]
      >(inspectRes);
    }
    export async function pubKey(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[number[]]>> {
      const tx = new TransactionBlock();
      builder.pubKey(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number[]]>(
        inspectRes
      );
    }
    export async function validate(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.validate(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes
      );
    }
    export async function weight(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.weight(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes
      );
    }
  }
}

export namespace weighted_signers {
  export interface WeightedSigners {
    signers: weighted_signer.WeightedSigner[];
    threshold: bigint;
    nonce: bytes32.Bytes32;
  }

  export namespace WeightedSigners {
    export const TYPE_QNAME =
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::weighted_signers::WeightedSigners";

    const TYPE = new TypeDescriptor<WeightedSigners>(
      WeightedSigners.TYPE_QNAME
    );

    export function type(): TypeDescriptor<WeightedSigners> {
      return TYPE.apply();
    }
  }

  export interface WeightedSignersInstance
    extends TypedEventInstance<WeightedSigners> {
    data_decoded: WeightedSigners;
    type_arguments: [];
  }

  export namespace builder {
    export function hash(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::weighted_signers::hash",
        arguments: _args,
      });
    }
    export function nonce(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::weighted_signers::nonce",
        arguments: _args,
      });
    }
    export function peel(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::weighted_signers::peel",
        arguments: _args,
      });
    }
    export function signers(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::weighted_signers::signers",
        arguments: _args,
      });
    }
    export function threshold(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::weighted_signers::threshold",
        arguments: _args,
      });
    }
    export function validate(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981::weighted_signers::validate",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function hash(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[bytes32.Bytes32]>> {
      const tx = new TransactionBlock();
      builder.hash(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bytes32.Bytes32]
      >(inspectRes);
    }
    export async function nonce(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[bytes32.Bytes32]>> {
      const tx = new TransactionBlock();
      builder.nonce(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bytes32.Bytes32]
      >(inspectRes);
    }
    export async function peel(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[weighted_signers.WeightedSigners]>> {
      const tx = new TransactionBlock();
      builder.peel(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [weighted_signers.WeightedSigners]
      >(inspectRes);
    }
    export async function signers(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.signers(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes
      );
    }
    export async function threshold(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.threshold(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes
      );
    }
    export async function validate(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument]
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.validate(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes
      );
    }
  }
}

const MODULES = JSON.parse(
  '[{"fileFormatVersion":6,"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"auth","friends":[{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"gateway"},{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"gateway_v0"}],"structs":{"AxelarSigners":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"epoch","type":"U64"},{"name":"epoch_by_signers_hash","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}},"U64"]}}},{"name":"domain_separator","type":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}}},{"name":"minimum_rotation_delay","type":"U64"},{"name":"last_rotation_timestamp","type":"U64"},{"name":"previous_signers_retention","type":"U64"}]},"MessageToSign":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"domain_separator","type":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}}},{"name":"signers_hash","type":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}}},{"name":"data_hash","type":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}}}]}},"exposedFunctions":{"new":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"auth","name":"AxelarSigners","typeArguments":[]}}]},"rotate_signers":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"auth","name":"AxelarSigners","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"weighted_signers","name":"WeightedSigners","typeArguments":[]}},"Bool"],"return":[]},"setup":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}},"U64","U64",{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"weighted_signers","name":"WeightedSigners","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"auth","name":"AxelarSigners","typeArguments":[]}}]},"validate_proof":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"auth","name":"AxelarSigners","typeArguments":[]}}},{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}},{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"proof","name":"Proof","typeArguments":[]}}],"return":["Bool"]}}},{"fileFormatVersion":6,"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"bytes32","friends":[{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"message"},{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"weighted_signers"}],"structs":{"Bytes32":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"bytes","type":"Address"}]}},"exposedFunctions":{"default":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"from_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["Address"],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"from_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"length":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}}}],"return":["U64"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["Address"],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"peel":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"to_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}}],"return":[{"Vector":"U8"}]}}},{"fileFormatVersion":6,"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"channel","friends":[{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"gateway_v0"}],"structs":{"ApprovedMessage":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"source_chain","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"message_id","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"source_address","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"destination_id","type":"Address"},{"name":"payload","type":{"Vector":"U8"}}]},"Channel":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]}},"exposedFunctions":{"consume_approved_message":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"channel","name":"Channel","typeArguments":[]}}},{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"channel","name":"ApprovedMessage","typeArguments":[]}}],"return":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Vector":"U8"}]},"create_approved_message":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},"Address",{"Vector":"U8"}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"channel","name":"ApprovedMessage","typeArguments":[]}}]},"destroy":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"channel","name":"Channel","typeArguments":[]}}],"return":[]},"id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"channel","name":"Channel","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"channel","name":"Channel","typeArguments":[]}}]},"to_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"channel","name":"Channel","typeArguments":[]}}}],"return":["Address"]}}},{"fileFormatVersion":6,"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"discovery","friends":[],"structs":{"Function":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"package_id","type":"Address"},{"name":"module_name","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"name","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}]},"MoveCall":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"function","type":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"discovery","name":"Function","typeArguments":[]}}},{"name":"arguments","type":{"Vector":{"Vector":"U8"}}},{"name":"type_arguments","type":{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}}]},"RelayerDiscovery":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"configurations","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"discovery","name":"Transaction","typeArguments":[]}}]}}}]},"Transaction":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"is_final","type":"Bool"},{"name":"move_calls","type":{"Vector":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"discovery","name":"MoveCall","typeArguments":[]}}}}]}},"exposedFunctions":{"get_transaction":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"discovery","name":"RelayerDiscovery","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"discovery","name":"Transaction","typeArguments":[]}}]},"new_function":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["Address",{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"discovery","name":"Function","typeArguments":[]}}]},"new_function_from_bcs":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"discovery","name":"Function","typeArguments":[]}}]},"new_move_call":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"discovery","name":"Function","typeArguments":[]}},{"Vector":{"Vector":"U8"}},{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"discovery","name":"MoveCall","typeArguments":[]}}]},"new_move_call_from_bcs":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"discovery","name":"MoveCall","typeArguments":[]}}]},"new_transaction":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["Bool",{"Vector":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"discovery","name":"MoveCall","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"discovery","name":"Transaction","typeArguments":[]}}]},"new_transaction_from_bcs":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"discovery","name":"Transaction","typeArguments":[]}}]},"package_id":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[],"return":["Address"]},"register_transaction":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"discovery","name":"RelayerDiscovery","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"channel","name":"Channel","typeArguments":[]}}},{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"discovery","name":"Transaction","typeArguments":[]}}],"return":[]}}},{"fileFormatVersion":6,"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"events","friends":[{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"auth"},{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"channel"},{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"gateway_v0"}],"structs":{"ChannelCreated":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"id","type":"Address"}]},"ChannelDestroyed":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"id","type":"Address"}]},"ContractCall":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"source_id","type":"Address"},{"name":"destination_chain","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"destination_address","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"payload","type":{"Vector":"U8"}},{"name":"payload_hash","type":"Address"}]},"MessageApproved":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"message","type":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message","name":"Message","typeArguments":[]}}}]},"MessageExecuted":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"message","type":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message","name":"Message","typeArguments":[]}}}]},"SignersRotated":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"epoch","type":"U64"},{"name":"signers_hash","type":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}}},{"name":"signers","type":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"weighted_signers","name":"WeightedSigners","typeArguments":[]}}}]}},"exposedFunctions":{"channel_created":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":["Address"],"return":[]},"channel_destroyed":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":["Address"],"return":[]},"contract_call":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":["Address",{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Vector":"U8"},"Address"],"return":[]},"message_approved":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message","name":"Message","typeArguments":[]}}],"return":[]},"message_executed":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message","name":"Message","typeArguments":[]}}],"return":[]},"signers_rotated":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":["U64",{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}},{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"weighted_signers","name":"WeightedSigners","typeArguments":[]}}],"return":[]}}},{"fileFormatVersion":6,"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"gateway","friends":[],"structs":{"CreatorCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]},"Gateway":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"inner","type":{"Struct":{"address":"0x2","module":"versioned","name":"Versioned","typeArguments":[]}}}]}},"exposedFunctions":{"approve_messages":{"visibility":"Private","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"gateway","name":"Gateway","typeArguments":[]}}},{"Vector":"U8"},{"Vector":"U8"}],"return":[]},"is_message_approved":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"gateway","name":"Gateway","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},"Address",{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}}],"return":["Bool"]},"is_message_executed":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"gateway","name":"Gateway","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":["Bool"]},"prepare_message":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"channel","name":"Channel","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Vector":"U8"}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message_ticket","name":"MessageTicket","typeArguments":[]}}]},"rotate_signers":{"visibility":"Private","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"gateway","name":"Gateway","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"Vector":"U8"},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"send_message":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"gateway","name":"Gateway","typeArguments":[]}}},{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message_ticket","name":"MessageTicket","typeArguments":[]}}],"return":[]},"setup":{"visibility":"Private","isEntry":true,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"gateway","name":"CreatorCap","typeArguments":[]}},"Address","Address","U64","U64",{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"take_approved_message":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"gateway","name":"Gateway","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},"Address",{"Vector":"U8"}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"channel","name":"ApprovedMessage","typeArguments":[]}}]}}},{"fileFormatVersion":7,"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"gateway_v0","friends":[{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"gateway"}],"structs":{"Gateway_v0":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"operator","type":"Address"},{"name":"messages","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}},{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message_status","name":"MessageStatus","typeArguments":[]}}]}}},{"name":"signers","type":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"auth","name":"AxelarSigners","typeArguments":[]}}},{"name":"version_control","type":{"Struct":{"address":"0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6","module":"version_control","name":"VersionControl","typeArguments":[]}}}]}},"exposedFunctions":{"approve_messages":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"gateway_v0","name":"Gateway_v0","typeArguments":[]}}},{"Vector":"U8"},{"Vector":"U8"}],"return":[]},"is_message_approved":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"gateway_v0","name":"Gateway_v0","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},"Address",{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}}],"return":["Bool"]},"is_message_executed":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"gateway_v0","name":"Gateway_v0","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":["Bool"]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":["Address",{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}},{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message_status","name":"MessageStatus","typeArguments":[]}}]}},{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"auth","name":"AxelarSigners","typeArguments":[]}},{"Struct":{"address":"0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6","module":"version_control","name":"VersionControl","typeArguments":[]}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"gateway_v0","name":"Gateway_v0","typeArguments":[]}}]},"rotate_signers":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"gateway_v0","name":"Gateway_v0","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"Vector":"U8"},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"send_message":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"gateway_v0","name":"Gateway_v0","typeArguments":[]}}},{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message_ticket","name":"MessageTicket","typeArguments":[]}},"U64"],"return":[]},"take_approved_message":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"gateway_v0","name":"Gateway_v0","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},"Address",{"Vector":"U8"}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"channel","name":"ApprovedMessage","typeArguments":[]}}]},"version_control":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"gateway_v0","name":"Gateway_v0","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6","module":"version_control","name":"VersionControl","typeArguments":[]}}}]}}},{"fileFormatVersion":6,"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"message","friends":[{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"gateway_v0"}],"structs":{"Message":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"source_chain","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"message_id","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"source_address","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"destination_id","type":"Address"},{"name":"payload_hash","type":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}}}]}},"exposedFunctions":{"command_id":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message","name":"Message","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"hash":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message","name":"Message","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"message_to_command_id":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},"Address",{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message","name":"Message","typeArguments":[]}}]},"peel":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message","name":"Message","typeArguments":[]}}]}}},{"fileFormatVersion":7,"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"message_status","friends":[{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"gateway_v0"}],"structs":{},"exposedFunctions":{"approved":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message_status","name":"MessageStatus","typeArguments":[]}}]},"executed":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message_status","name":"MessageStatus","typeArguments":[]}}]}}},{"fileFormatVersion":6,"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"message_ticket","friends":[{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"gateway"},{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"gateway_v0"}],"structs":{"MessageTicket":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"source_id","type":"Address"},{"name":"destination_chain","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"destination_address","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"payload","type":{"Vector":"U8"}},{"name":"version","type":"U64"}]}},"exposedFunctions":{"destination_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message_ticket","name":"MessageTicket","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}]},"destination_chain":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message_ticket","name":"MessageTicket","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}]},"destroy":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message_ticket","name":"MessageTicket","typeArguments":[]}}],"return":["Address",{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Vector":"U8"},"U64"]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":["Address",{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Vector":"U8"},"U64"],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message_ticket","name":"MessageTicket","typeArguments":[]}}]},"payload":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message_ticket","name":"MessageTicket","typeArguments":[]}}}],"return":[{"Vector":"U8"}]},"source_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message_ticket","name":"MessageTicket","typeArguments":[]}}}],"return":["Address"]},"version":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"message_ticket","name":"MessageTicket","typeArguments":[]}}}],"return":["U64"]}}},{"fileFormatVersion":6,"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"proof","friends":[{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"auth"},{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"gateway_v0"}],"structs":{"Proof":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"signers","type":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"weighted_signers","name":"WeightedSigners","typeArguments":[]}}},{"name":"signatures","type":{"Vector":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"proof","name":"Signature","typeArguments":[]}}}}]},"Signature":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"bytes","type":{"Vector":"U8"}}]}},"exposedFunctions":{"new_signature":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"proof","name":"Signature","typeArguments":[]}}]},"peel":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"proof","name":"Proof","typeArguments":[]}}]},"peel_signature":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"proof","name":"Signature","typeArguments":[]}}]},"recover_pub_key":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"proof","name":"Signature","typeArguments":[]}}},{"Reference":{"Vector":"U8"}}],"return":[{"Vector":"U8"}]},"signatures":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"proof","name":"Proof","typeArguments":[]}}}],"return":[{"Reference":{"Vector":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"proof","name":"Signature","typeArguments":[]}}}}]},"signers":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"proof","name":"Proof","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"weighted_signers","name":"WeightedSigners","typeArguments":[]}}}]},"validate":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"proof","name":"Proof","typeArguments":[]}}},{"Vector":"U8"}],"return":[]}}},{"fileFormatVersion":6,"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"weighted_signer","friends":[{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"weighted_signers"}],"structs":{"WeightedSigner":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"pub_key","type":{"Vector":"U8"}},{"name":"weight","type":"U128"}]}},"exposedFunctions":{"default":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"weighted_signer","name":"WeightedSigner","typeArguments":[]}}]},"lt":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"weighted_signer","name":"WeightedSigner","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"weighted_signer","name":"WeightedSigner","typeArguments":[]}}}],"return":["Bool"]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"},"U128"],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"weighted_signer","name":"WeightedSigner","typeArguments":[]}}]},"peel":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"weighted_signer","name":"WeightedSigner","typeArguments":[]}}]},"pub_key":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"weighted_signer","name":"WeightedSigner","typeArguments":[]}}}],"return":[{"Vector":"U8"}]},"validate":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"weighted_signer","name":"WeightedSigner","typeArguments":[]}}}],"return":[]},"weight":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"weighted_signer","name":"WeightedSigner","typeArguments":[]}}}],"return":["U128"]}}},{"fileFormatVersion":6,"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"weighted_signers","friends":[{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"auth"},{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"gateway"},{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"gateway_v0"},{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","name":"proof"}],"structs":{"WeightedSigners":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"signers","type":{"Vector":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"weighted_signer","name":"WeightedSigner","typeArguments":[]}}}},{"name":"threshold","type":"U128"},{"name":"nonce","type":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}}}]}},"exposedFunctions":{"hash":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"weighted_signers","name":"WeightedSigners","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"nonce":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"weighted_signers","name":"WeightedSigners","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"peel":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"weighted_signers","name":"WeightedSigners","typeArguments":[]}}]},"signers":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"weighted_signers","name":"WeightedSigners","typeArguments":[]}}}],"return":[{"Reference":{"Vector":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"weighted_signer","name":"WeightedSigner","typeArguments":[]}}}}]},"threshold":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"weighted_signers","name":"WeightedSigners","typeArguments":[]}}}],"return":["U128"]},"validate":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981","module":"weighted_signers","name":"WeightedSigners","typeArguments":[]}}}],"return":[]}}}]'
);

export function loadAllTypes(coder: MoveCoder) {
  _0x2.loadAllTypes(coder);
  _0x1.loadAllTypes(coder);
  _0xa246daa865d57f3f63529fb80ac963a8a899561609c5a5e170d6509605185e6.loadAllTypes(
    coder
  );
  for (const m of Object.values(MODULES)) {
    coder.load(
      m as any,
      "0x5b63815164c78c7d16bf2170f3444ea28d16a4af51da8385a783f91e42312981"
    );
  }
}

loadAllTypes(defaultMoveCoder());
