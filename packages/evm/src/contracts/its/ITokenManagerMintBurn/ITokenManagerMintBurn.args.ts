/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - node_modules/@axelar-network/interchain-token-service/artifacts/contracts/interfaces/ITokenManagerMintBurn.sol/ITokenManagerMintBurn.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import ABI_FILE from "./ITokenManagerMintBurn.abi";

export type ITokenManagerMintBurnAcceptOperatorshipArgs = {
  fromOperator: `0x${string}`;
};

/**
 * Factory function for ITokenManagerMintBurn.acceptOperatorship function args
 */
export const encodeITokenManagerMintBurnAcceptOperatorshipArgs = ({
  fromOperator,
}: ITokenManagerMintBurnAcceptOperatorshipArgs) => [fromOperator] as const;

/**
 * Encoder function for ITokenManagerMintBurn.acceptOperatorship function data
 */
export const encodeITokenManagerMintBurnAcceptOperatorshipData = ({
  fromOperator,
}: ITokenManagerMintBurnAcceptOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "acceptOperatorship",
    abi: ABI_FILE.abi,
    args: [fromOperator],
  });

export type ITokenManagerMintBurnAddFlowLimiterArgs = {
  flowLimiter: `0x${string}`;
};

/**
 * Factory function for ITokenManagerMintBurn.addFlowLimiter function args
 */
export const encodeITokenManagerMintBurnAddFlowLimiterArgs = ({
  flowLimiter,
}: ITokenManagerMintBurnAddFlowLimiterArgs) => [flowLimiter] as const;

/**
 * Encoder function for ITokenManagerMintBurn.addFlowLimiter function data
 */
export const encodeITokenManagerMintBurnAddFlowLimiterData = ({
  flowLimiter,
}: ITokenManagerMintBurnAddFlowLimiterArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "addFlowLimiter",
    abi: ABI_FILE.abi,
    args: [flowLimiter],
  });

export type ITokenManagerMintBurnCallContractWithInterchainTokenArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  data: `0x${string}`;
};

/**
 * Factory function for ITokenManagerMintBurn.callContractWithInterchainToken function args
 */
export const encodeITokenManagerMintBurnCallContractWithInterchainTokenArgs = ({
  destinationChain,
  destinationAddress,
  amount,
  data,
}: ITokenManagerMintBurnCallContractWithInterchainTokenArgs) =>
  [destinationChain, destinationAddress, amount, data] as const;

/**
 * Encoder function for ITokenManagerMintBurn.callContractWithInterchainToken function data
 */
export const encodeITokenManagerMintBurnCallContractWithInterchainTokenData = ({
  destinationChain,
  destinationAddress,
  amount,
  data,
}: ITokenManagerMintBurnCallContractWithInterchainTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "callContractWithInterchainToken",
    abi: ABI_FILE.abi,
    args: [destinationChain, destinationAddress, amount, data],
  });

export type ITokenManagerMintBurnGiveTokenArgs = {
  destinationAddress: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for ITokenManagerMintBurn.giveToken function args
 */
export const encodeITokenManagerMintBurnGiveTokenArgs = ({
  destinationAddress,
  amount,
}: ITokenManagerMintBurnGiveTokenArgs) => [destinationAddress, amount] as const;

/**
 * Encoder function for ITokenManagerMintBurn.giveToken function data
 */
export const encodeITokenManagerMintBurnGiveTokenData = ({
  destinationAddress,
  amount,
}: ITokenManagerMintBurnGiveTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "giveToken",
    abi: ABI_FILE.abi,
    args: [destinationAddress, amount],
  });

export type ITokenManagerMintBurnHasRoleArgs = {
  account: `0x${string}`;
  role: number;
};

/**
 * Factory function for ITokenManagerMintBurn.hasRole function args
 */
export const encodeITokenManagerMintBurnHasRoleArgs = ({
  account,
  role,
}: ITokenManagerMintBurnHasRoleArgs) => [account, role] as const;

/**
 * Encoder function for ITokenManagerMintBurn.hasRole function data
 */
export const encodeITokenManagerMintBurnHasRoleData = ({
  account,
  role,
}: ITokenManagerMintBurnHasRoleArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "hasRole",
    abi: ABI_FILE.abi,
    args: [account, role],
  });

export type ITokenManagerMintBurnInterchainTransferArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for ITokenManagerMintBurn.interchainTransfer function args
 */
export const encodeITokenManagerMintBurnInterchainTransferArgs = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: ITokenManagerMintBurnInterchainTransferArgs) =>
  [destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for ITokenManagerMintBurn.interchainTransfer function data
 */
export const encodeITokenManagerMintBurnInterchainTransferData = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: ITokenManagerMintBurnInterchainTransferArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "interchainTransfer",
    abi: ABI_FILE.abi,
    args: [destinationChain, destinationAddress, amount, metadata],
  });

export type ITokenManagerMintBurnIsOperatorArgs = { addr: `0x${string}` };

/**
 * Factory function for ITokenManagerMintBurn.isOperator function args
 */
export const encodeITokenManagerMintBurnIsOperatorArgs = ({
  addr,
}: ITokenManagerMintBurnIsOperatorArgs) => [addr] as const;

/**
 * Encoder function for ITokenManagerMintBurn.isOperator function data
 */
export const encodeITokenManagerMintBurnIsOperatorData = ({
  addr,
}: ITokenManagerMintBurnIsOperatorArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "isOperator",
    abi: ABI_FILE.abi,
    args: [addr],
  });

export type ITokenManagerMintBurnParamsArgs = {
  operator_: `0x${string}`;
  tokenAddress_: `0x${string}`;
};

/**
 * Factory function for ITokenManagerMintBurn.params function args
 */
export const encodeITokenManagerMintBurnParamsArgs = ({
  operator_,
  tokenAddress_,
}: ITokenManagerMintBurnParamsArgs) => [operator_, tokenAddress_] as const;

/**
 * Encoder function for ITokenManagerMintBurn.params function data
 */
export const encodeITokenManagerMintBurnParamsData = ({
  operator_,
  tokenAddress_,
}: ITokenManagerMintBurnParamsArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "params",
    abi: ABI_FILE.abi,
    args: [operator_, tokenAddress_],
  });

export type ITokenManagerMintBurnProposeOperatorshipArgs = {
  operator_: `0x${string}`;
};

/**
 * Factory function for ITokenManagerMintBurn.proposeOperatorship function args
 */
export const encodeITokenManagerMintBurnProposeOperatorshipArgs = ({
  operator_,
}: ITokenManagerMintBurnProposeOperatorshipArgs) => [operator_] as const;

/**
 * Encoder function for ITokenManagerMintBurn.proposeOperatorship function data
 */
export const encodeITokenManagerMintBurnProposeOperatorshipData = ({
  operator_,
}: ITokenManagerMintBurnProposeOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "proposeOperatorship",
    abi: ABI_FILE.abi,
    args: [operator_],
  });

export type ITokenManagerMintBurnRemoveFlowLimiterArgs = {
  flowLimiter: `0x${string}`;
};

/**
 * Factory function for ITokenManagerMintBurn.removeFlowLimiter function args
 */
export const encodeITokenManagerMintBurnRemoveFlowLimiterArgs = ({
  flowLimiter,
}: ITokenManagerMintBurnRemoveFlowLimiterArgs) => [flowLimiter] as const;

/**
 * Encoder function for ITokenManagerMintBurn.removeFlowLimiter function data
 */
export const encodeITokenManagerMintBurnRemoveFlowLimiterData = ({
  flowLimiter,
}: ITokenManagerMintBurnRemoveFlowLimiterArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "removeFlowLimiter",
    abi: ABI_FILE.abi,
    args: [flowLimiter],
  });

export type ITokenManagerMintBurnSetFlowLimitArgs = { flowLimit_: bigint };

/**
 * Factory function for ITokenManagerMintBurn.setFlowLimit function args
 */
export const encodeITokenManagerMintBurnSetFlowLimitArgs = ({
  flowLimit_,
}: ITokenManagerMintBurnSetFlowLimitArgs) => [flowLimit_] as const;

/**
 * Encoder function for ITokenManagerMintBurn.setFlowLimit function data
 */
export const encodeITokenManagerMintBurnSetFlowLimitData = ({
  flowLimit_,
}: ITokenManagerMintBurnSetFlowLimitArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setFlowLimit",
    abi: ABI_FILE.abi,
    args: [flowLimit_],
  });

export type ITokenManagerMintBurnSetupArgs = { data: `0x${string}` };

/**
 * Factory function for ITokenManagerMintBurn.setup function args
 */
export const encodeITokenManagerMintBurnSetupArgs = ({
  data,
}: ITokenManagerMintBurnSetupArgs) => [data] as const;

/**
 * Encoder function for ITokenManagerMintBurn.setup function data
 */
export const encodeITokenManagerMintBurnSetupData = ({
  data,
}: ITokenManagerMintBurnSetupArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setup",
    abi: ABI_FILE.abi,
    args: [data],
  });

export type ITokenManagerMintBurnTakeTokenArgs = {
  sourceAddress: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for ITokenManagerMintBurn.takeToken function args
 */
export const encodeITokenManagerMintBurnTakeTokenArgs = ({
  sourceAddress,
  amount,
}: ITokenManagerMintBurnTakeTokenArgs) => [sourceAddress, amount] as const;

/**
 * Encoder function for ITokenManagerMintBurn.takeToken function data
 */
export const encodeITokenManagerMintBurnTakeTokenData = ({
  sourceAddress,
  amount,
}: ITokenManagerMintBurnTakeTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "takeToken",
    abi: ABI_FILE.abi,
    args: [sourceAddress, amount],
  });

export type ITokenManagerMintBurnTransferOperatorshipArgs = {
  operator_: `0x${string}`;
};

/**
 * Factory function for ITokenManagerMintBurn.transferOperatorship function args
 */
export const encodeITokenManagerMintBurnTransferOperatorshipArgs = ({
  operator_,
}: ITokenManagerMintBurnTransferOperatorshipArgs) => [operator_] as const;

/**
 * Encoder function for ITokenManagerMintBurn.transferOperatorship function data
 */
export const encodeITokenManagerMintBurnTransferOperatorshipData = ({
  operator_,
}: ITokenManagerMintBurnTransferOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transferOperatorship",
    abi: ABI_FILE.abi,
    args: [operator_],
  });

export type ITokenManagerMintBurnTransmitInterchainTransferArgs = {
  sender: `0x${string}`;
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for ITokenManagerMintBurn.transmitInterchainTransfer function args
 */
export const encodeITokenManagerMintBurnTransmitInterchainTransferArgs = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: ITokenManagerMintBurnTransmitInterchainTransferArgs) =>
  [sender, destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for ITokenManagerMintBurn.transmitInterchainTransfer function data
 */
export const encodeITokenManagerMintBurnTransmitInterchainTransferData = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: ITokenManagerMintBurnTransmitInterchainTransferArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transmitInterchainTransfer",
    abi: ABI_FILE.abi,
    args: [sender, destinationChain, destinationAddress, amount, metadata],
  });

export const ITOKEN_MANAGER_MINT_BURN_ENCODERS = {
  acceptOperatorship: encodeITokenManagerMintBurnAcceptOperatorshipArgs,
  addFlowLimiter: encodeITokenManagerMintBurnAddFlowLimiterArgs,
  callContractWithInterchainToken:
    encodeITokenManagerMintBurnCallContractWithInterchainTokenArgs,
  giveToken: encodeITokenManagerMintBurnGiveTokenArgs,
  hasRole: encodeITokenManagerMintBurnHasRoleArgs,
  interchainTransfer: encodeITokenManagerMintBurnInterchainTransferArgs,
  isOperator: encodeITokenManagerMintBurnIsOperatorArgs,
  params: encodeITokenManagerMintBurnParamsArgs,
  proposeOperatorship: encodeITokenManagerMintBurnProposeOperatorshipArgs,
  removeFlowLimiter: encodeITokenManagerMintBurnRemoveFlowLimiterArgs,
  setFlowLimit: encodeITokenManagerMintBurnSetFlowLimitArgs,
  setup: encodeITokenManagerMintBurnSetupArgs,
  takeToken: encodeITokenManagerMintBurnTakeTokenArgs,
  transferOperatorship: encodeITokenManagerMintBurnTransferOperatorshipArgs,
  transmitInterchainTransfer:
    encodeITokenManagerMintBurnTransmitInterchainTransferArgs,
};
