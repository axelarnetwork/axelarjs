/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - node_modules/@axelar-network/interchain-token-service/artifacts/contracts/interfaces/IInterchainTokenFactory.sol/IInterchainTokenFactory.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import type { PublicContractClient } from "../../PublicContractClient";
import ABI_FILE from "./IInterchainTokenFactory.abi";

export type IInterchainTokenFactoryApproveDeployRemoteInterchainTokenArgs = {
  deployer: `0x${string}`;
  salt: `0x${string}`;
  destinationChain: string;
  destinationMinter: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenFactory.approveDeployRemoteInterchainToken function args
 */
export const encodeIInterchainTokenFactoryApproveDeployRemoteInterchainTokenArgs =
  ({
    deployer,
    salt,
    destinationChain,
    destinationMinter,
  }: IInterchainTokenFactoryApproveDeployRemoteInterchainTokenArgs) =>
    [deployer, salt, destinationChain, destinationMinter] as const;

/**
 * Encoder function for IInterchainTokenFactory.approveDeployRemoteInterchainToken function data
 */
export const encodeIInterchainTokenFactoryApproveDeployRemoteInterchainTokenData =
  ({
    deployer,
    salt,
    destinationChain,
    destinationMinter,
  }: IInterchainTokenFactoryApproveDeployRemoteInterchainTokenArgs): `0x${string}` =>
    encodeFunctionData({
      functionName: "approveDeployRemoteInterchainToken",
      abi: ABI_FILE.abi,
      args: [deployer, salt, destinationChain, destinationMinter],
    });

export type IInterchainTokenFactoryCanonicalInterchainTokenDeploySaltArgs = {
  tokenAddress: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenFactory.canonicalInterchainTokenDeploySalt function args
 */
export const encodeIInterchainTokenFactoryCanonicalInterchainTokenDeploySaltArgs =
  ({
    tokenAddress,
  }: IInterchainTokenFactoryCanonicalInterchainTokenDeploySaltArgs) =>
    [tokenAddress] as const;

/**
 * Encoder function for IInterchainTokenFactory.canonicalInterchainTokenDeploySalt function data
 */
export const encodeIInterchainTokenFactoryCanonicalInterchainTokenDeploySaltData =
  ({
    tokenAddress,
  }: IInterchainTokenFactoryCanonicalInterchainTokenDeploySaltArgs): `0x${string}` =>
    encodeFunctionData({
      functionName: "canonicalInterchainTokenDeploySalt",
      abi: ABI_FILE.abi,
      args: [tokenAddress],
    });

export type IInterchainTokenFactoryCanonicalInterchainTokenIdArgs = {
  tokenAddress: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenFactory.canonicalInterchainTokenId function args
 */
export const encodeIInterchainTokenFactoryCanonicalInterchainTokenIdArgs = ({
  tokenAddress,
}: IInterchainTokenFactoryCanonicalInterchainTokenIdArgs) =>
  [tokenAddress] as const;

/**
 * Encoder function for IInterchainTokenFactory.canonicalInterchainTokenId function data
 */
export const encodeIInterchainTokenFactoryCanonicalInterchainTokenIdData = ({
  tokenAddress,
}: IInterchainTokenFactoryCanonicalInterchainTokenIdArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "canonicalInterchainTokenId",
    abi: ABI_FILE.abi,
    args: [tokenAddress],
  });

export type IInterchainTokenFactoryDeployInterchainTokenArgs = {
  salt: `0x${string}`;
  name: string;
  symbol: string;
  decimals: number;
  initialSupply: bigint;
  minter: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenFactory.deployInterchainToken function args
 */
export const encodeIInterchainTokenFactoryDeployInterchainTokenArgs = ({
  salt,
  name,
  symbol,
  decimals,
  initialSupply,
  minter,
}: IInterchainTokenFactoryDeployInterchainTokenArgs) =>
  [salt, name, symbol, decimals, initialSupply, minter] as const;

/**
 * Encoder function for IInterchainTokenFactory.deployInterchainToken function data
 */
export const encodeIInterchainTokenFactoryDeployInterchainTokenData = ({
  salt,
  name,
  symbol,
  decimals,
  initialSupply,
  minter,
}: IInterchainTokenFactoryDeployInterchainTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "deployInterchainToken",
    abi: ABI_FILE.abi,
    args: [salt, name, symbol, decimals, initialSupply, minter],
  });

export type IInterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs2 = {
  originalChain: string;
  originalTokenAddress: `0x${string}`;
  destinationChain: string;
  gasValue: bigint;
};

/**
 * Factory function for IInterchainTokenFactory.deployRemoteCanonicalInterchainToken function args
 */
export const encodeIInterchainTokenFactoryDeployRemoteCanonicalInterchainToken2Args =
  ({
    originalChain,
    originalTokenAddress,
    destinationChain,
    gasValue,
  }: IInterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs2) =>
    [originalChain, originalTokenAddress, destinationChain, gasValue] as const;

/**
 * Encoder function for IInterchainTokenFactory.deployRemoteCanonicalInterchainToken function data
 */
export const encodeIInterchainTokenFactoryDeployRemoteCanonicalInterchainToken2Data =
  ({
    originalChain,
    originalTokenAddress,
    destinationChain,
    gasValue,
  }: IInterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs2): `0x${string}` =>
    encodeFunctionData({
      functionName: "deployRemoteCanonicalInterchainToken",
      abi: ABI_FILE.abi,
      args: [originalChain, originalTokenAddress, destinationChain, gasValue],
    });

export type IInterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs = {
  originalTokenAddress: `0x${string}`;
  destinationChain: string;
  gasValue: bigint;
};

/**
 * Factory function for IInterchainTokenFactory.deployRemoteCanonicalInterchainToken function args
 */
export const encodeIInterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs =
  ({
    originalTokenAddress,
    destinationChain,
    gasValue,
  }: IInterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs) =>
    [originalTokenAddress, destinationChain, gasValue] as const;

/**
 * Encoder function for IInterchainTokenFactory.deployRemoteCanonicalInterchainToken function data
 */
export const encodeIInterchainTokenFactoryDeployRemoteCanonicalInterchainTokenData =
  ({
    originalTokenAddress,
    destinationChain,
    gasValue,
  }: IInterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs): `0x${string}` =>
    encodeFunctionData({
      functionName: "deployRemoteCanonicalInterchainToken",
      abi: ABI_FILE.abi,
      args: [originalTokenAddress, destinationChain, gasValue],
    });

export type IInterchainTokenFactoryDeployRemoteInterchainTokenArgs = {
  salt: `0x${string}`;
  destinationChain: string;
  gasValue: bigint;
};

/**
 * Factory function for IInterchainTokenFactory.deployRemoteInterchainToken function args
 */
export const encodeIInterchainTokenFactoryDeployRemoteInterchainTokenArgs = ({
  salt,
  destinationChain,
  gasValue,
}: IInterchainTokenFactoryDeployRemoteInterchainTokenArgs) =>
  [salt, destinationChain, gasValue] as const;

/**
 * Encoder function for IInterchainTokenFactory.deployRemoteInterchainToken function data
 */
export const encodeIInterchainTokenFactoryDeployRemoteInterchainTokenData = ({
  salt,
  destinationChain,
  gasValue,
}: IInterchainTokenFactoryDeployRemoteInterchainTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "deployRemoteInterchainToken",
    abi: ABI_FILE.abi,
    args: [salt, destinationChain, gasValue],
  });

export type IInterchainTokenFactoryDeployRemoteInterchainTokenArgs2 = {
  originalChainName: string;
  salt: `0x${string}`;
  minter: `0x${string}`;
  destinationChain: string;
  gasValue: bigint;
};

/**
 * Factory function for IInterchainTokenFactory.deployRemoteInterchainToken function args
 */
export const encodeIInterchainTokenFactoryDeployRemoteInterchainToken2Args = ({
  originalChainName,
  salt,
  minter,
  destinationChain,
  gasValue,
}: IInterchainTokenFactoryDeployRemoteInterchainTokenArgs2) =>
  [originalChainName, salt, minter, destinationChain, gasValue] as const;

/**
 * Encoder function for IInterchainTokenFactory.deployRemoteInterchainToken function data
 */
export const encodeIInterchainTokenFactoryDeployRemoteInterchainToken2Data = ({
  originalChainName,
  salt,
  minter,
  destinationChain,
  gasValue,
}: IInterchainTokenFactoryDeployRemoteInterchainTokenArgs2): `0x${string}` =>
  encodeFunctionData({
    functionName: "deployRemoteInterchainToken",
    abi: ABI_FILE.abi,
    args: [originalChainName, salt, minter, destinationChain, gasValue],
  });

export type IInterchainTokenFactoryDeployRemoteInterchainTokenWithMinterArgs = {
  salt: `0x${string}`;
  minter: `0x${string}`;
  destinationChain: string;
  destinationMinter: `0x${string}`;
  gasValue: bigint;
};

/**
 * Factory function for IInterchainTokenFactory.deployRemoteInterchainTokenWithMinter function args
 */
export const encodeIInterchainTokenFactoryDeployRemoteInterchainTokenWithMinterArgs =
  ({
    salt,
    minter,
    destinationChain,
    destinationMinter,
    gasValue,
  }: IInterchainTokenFactoryDeployRemoteInterchainTokenWithMinterArgs) =>
    [salt, minter, destinationChain, destinationMinter, gasValue] as const;

/**
 * Encoder function for IInterchainTokenFactory.deployRemoteInterchainTokenWithMinter function data
 */
export const encodeIInterchainTokenFactoryDeployRemoteInterchainTokenWithMinterData =
  ({
    salt,
    minter,
    destinationChain,
    destinationMinter,
    gasValue,
  }: IInterchainTokenFactoryDeployRemoteInterchainTokenWithMinterArgs): `0x${string}` =>
    encodeFunctionData({
      functionName: "deployRemoteInterchainTokenWithMinter",
      abi: ABI_FILE.abi,
      args: [salt, minter, destinationChain, destinationMinter, gasValue],
    });

export type IInterchainTokenFactoryInterchainTokenDeploySaltArgs = {
  deployer: `0x${string}`;
  salt: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenFactory.interchainTokenDeploySalt function args
 */
export const encodeIInterchainTokenFactoryInterchainTokenDeploySaltArgs = ({
  deployer,
  salt,
}: IInterchainTokenFactoryInterchainTokenDeploySaltArgs) =>
  [deployer, salt] as const;

/**
 * Encoder function for IInterchainTokenFactory.interchainTokenDeploySalt function data
 */
export const encodeIInterchainTokenFactoryInterchainTokenDeploySaltData = ({
  deployer,
  salt,
}: IInterchainTokenFactoryInterchainTokenDeploySaltArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "interchainTokenDeploySalt",
    abi: ABI_FILE.abi,
    args: [deployer, salt],
  });

export type IInterchainTokenFactoryInterchainTokenIdArgs = {
  deployer: `0x${string}`;
  salt: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenFactory.interchainTokenId function args
 */
export const encodeIInterchainTokenFactoryInterchainTokenIdArgs = ({
  deployer,
  salt,
}: IInterchainTokenFactoryInterchainTokenIdArgs) => [deployer, salt] as const;

/**
 * Encoder function for IInterchainTokenFactory.interchainTokenId function data
 */
export const encodeIInterchainTokenFactoryInterchainTokenIdData = ({
  deployer,
  salt,
}: IInterchainTokenFactoryInterchainTokenIdArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "interchainTokenId",
    abi: ABI_FILE.abi,
    args: [deployer, salt],
  });

export type IInterchainTokenFactoryLinkTokenArgs = {
  salt: `0x${string}`;
  destinationChain: string;
  destinationTokenAddress: `0x${string}`;
  tokenManagerType: number;
  linkParams: `0x${string}`;
  gasValue: bigint;
};

/**
 * Factory function for IInterchainTokenFactory.linkToken function args
 */
export const encodeIInterchainTokenFactoryLinkTokenArgs = ({
  salt,
  destinationChain,
  destinationTokenAddress,
  tokenManagerType,
  linkParams,
  gasValue,
}: IInterchainTokenFactoryLinkTokenArgs) =>
  [
    salt,
    destinationChain,
    destinationTokenAddress,
    tokenManagerType,
    linkParams,
    gasValue,
  ] as const;

/**
 * Encoder function for IInterchainTokenFactory.linkToken function data
 */
export const encodeIInterchainTokenFactoryLinkTokenData = ({
  salt,
  destinationChain,
  destinationTokenAddress,
  tokenManagerType,
  linkParams,
  gasValue,
}: IInterchainTokenFactoryLinkTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "linkToken",
    abi: ABI_FILE.abi,
    args: [
      salt,
      destinationChain,
      destinationTokenAddress,
      tokenManagerType,
      linkParams,
      gasValue,
    ],
  });

export type IInterchainTokenFactoryLinkedTokenDeploySaltArgs = {
  deployer: `0x${string}`;
  salt: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenFactory.linkedTokenDeploySalt function args
 */
export const encodeIInterchainTokenFactoryLinkedTokenDeploySaltArgs = ({
  deployer,
  salt,
}: IInterchainTokenFactoryLinkedTokenDeploySaltArgs) =>
  [deployer, salt] as const;

/**
 * Encoder function for IInterchainTokenFactory.linkedTokenDeploySalt function data
 */
export const encodeIInterchainTokenFactoryLinkedTokenDeploySaltData = ({
  deployer,
  salt,
}: IInterchainTokenFactoryLinkedTokenDeploySaltArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "linkedTokenDeploySalt",
    abi: ABI_FILE.abi,
    args: [deployer, salt],
  });

export type IInterchainTokenFactoryLinkedTokenIdArgs = {
  deployer: `0x${string}`;
  salt: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenFactory.linkedTokenId function args
 */
export const encodeIInterchainTokenFactoryLinkedTokenIdArgs = ({
  deployer,
  salt,
}: IInterchainTokenFactoryLinkedTokenIdArgs) => [deployer, salt] as const;

/**
 * Encoder function for IInterchainTokenFactory.linkedTokenId function data
 */
export const encodeIInterchainTokenFactoryLinkedTokenIdData = ({
  deployer,
  salt,
}: IInterchainTokenFactoryLinkedTokenIdArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "linkedTokenId",
    abi: ABI_FILE.abi,
    args: [deployer, salt],
  });

export type IInterchainTokenFactoryMulticallArgs = { data: any };

/**
 * Factory function for IInterchainTokenFactory.multicall function args
 */
export const encodeIInterchainTokenFactoryMulticallArgs = ({
  data,
}: IInterchainTokenFactoryMulticallArgs) => [data] as const;

/**
 * Encoder function for IInterchainTokenFactory.multicall function data
 */
export const encodeIInterchainTokenFactoryMulticallData = ({
  data,
}: IInterchainTokenFactoryMulticallArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "multicall",
    abi: ABI_FILE.abi,
    args: [data],
  });

export type IInterchainTokenFactoryProposeOwnershipArgs = {
  newOwner: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenFactory.proposeOwnership function args
 */
export const encodeIInterchainTokenFactoryProposeOwnershipArgs = ({
  newOwner,
}: IInterchainTokenFactoryProposeOwnershipArgs) => [newOwner] as const;

/**
 * Encoder function for IInterchainTokenFactory.proposeOwnership function data
 */
export const encodeIInterchainTokenFactoryProposeOwnershipData = ({
  newOwner,
}: IInterchainTokenFactoryProposeOwnershipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "proposeOwnership",
    abi: ABI_FILE.abi,
    args: [newOwner],
  });

export type IInterchainTokenFactoryRegisterCanonicalInterchainTokenArgs = {
  tokenAddress: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenFactory.registerCanonicalInterchainToken function args
 */
export const encodeIInterchainTokenFactoryRegisterCanonicalInterchainTokenArgs =
  ({
    tokenAddress,
  }: IInterchainTokenFactoryRegisterCanonicalInterchainTokenArgs) =>
    [tokenAddress] as const;

/**
 * Encoder function for IInterchainTokenFactory.registerCanonicalInterchainToken function data
 */
export const encodeIInterchainTokenFactoryRegisterCanonicalInterchainTokenData =
  ({
    tokenAddress,
  }: IInterchainTokenFactoryRegisterCanonicalInterchainTokenArgs): `0x${string}` =>
    encodeFunctionData({
      functionName: "registerCanonicalInterchainToken",
      abi: ABI_FILE.abi,
      args: [tokenAddress],
    });

export type IInterchainTokenFactoryRegisterCustomTokenArgs = {
  salt: `0x${string}`;
  tokenAddress: `0x${string}`;
  tokenManagerType: number;
  operator: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenFactory.registerCustomToken function args
 */
export const encodeIInterchainTokenFactoryRegisterCustomTokenArgs = ({
  salt,
  tokenAddress,
  tokenManagerType,
  operator,
}: IInterchainTokenFactoryRegisterCustomTokenArgs) =>
  [salt, tokenAddress, tokenManagerType, operator] as const;

/**
 * Encoder function for IInterchainTokenFactory.registerCustomToken function data
 */
export const encodeIInterchainTokenFactoryRegisterCustomTokenData = ({
  salt,
  tokenAddress,
  tokenManagerType,
  operator,
}: IInterchainTokenFactoryRegisterCustomTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "registerCustomToken",
    abi: ABI_FILE.abi,
    args: [salt, tokenAddress, tokenManagerType, operator],
  });

export type IInterchainTokenFactoryRevokeDeployRemoteInterchainTokenArgs = {
  deployer: `0x${string}`;
  salt: `0x${string}`;
  destinationChain: string;
};

/**
 * Factory function for IInterchainTokenFactory.revokeDeployRemoteInterchainToken function args
 */
export const encodeIInterchainTokenFactoryRevokeDeployRemoteInterchainTokenArgs =
  ({
    deployer,
    salt,
    destinationChain,
  }: IInterchainTokenFactoryRevokeDeployRemoteInterchainTokenArgs) =>
    [deployer, salt, destinationChain] as const;

/**
 * Encoder function for IInterchainTokenFactory.revokeDeployRemoteInterchainToken function data
 */
export const encodeIInterchainTokenFactoryRevokeDeployRemoteInterchainTokenData =
  ({
    deployer,
    salt,
    destinationChain,
  }: IInterchainTokenFactoryRevokeDeployRemoteInterchainTokenArgs): `0x${string}` =>
    encodeFunctionData({
      functionName: "revokeDeployRemoteInterchainToken",
      abi: ABI_FILE.abi,
      args: [deployer, salt, destinationChain],
    });

export type IInterchainTokenFactorySetupArgs = { data: `0x${string}` };

/**
 * Factory function for IInterchainTokenFactory.setup function args
 */
export const encodeIInterchainTokenFactorySetupArgs = ({
  data,
}: IInterchainTokenFactorySetupArgs) => [data] as const;

/**
 * Encoder function for IInterchainTokenFactory.setup function data
 */
export const encodeIInterchainTokenFactorySetupData = ({
  data,
}: IInterchainTokenFactorySetupArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setup",
    abi: ABI_FILE.abi,
    args: [data],
  });

export type IInterchainTokenFactoryTransferOwnershipArgs = {
  newOwner: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenFactory.transferOwnership function args
 */
export const encodeIInterchainTokenFactoryTransferOwnershipArgs = ({
  newOwner,
}: IInterchainTokenFactoryTransferOwnershipArgs) => [newOwner] as const;

/**
 * Encoder function for IInterchainTokenFactory.transferOwnership function data
 */
export const encodeIInterchainTokenFactoryTransferOwnershipData = ({
  newOwner,
}: IInterchainTokenFactoryTransferOwnershipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transferOwnership",
    abi: ABI_FILE.abi,
    args: [newOwner],
  });

export type IInterchainTokenFactoryUpgradeArgs = {
  newImplementation: `0x${string}`;
  newImplementationCodeHash: `0x${string}`;
  params: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenFactory.upgrade function args
 */
export const encodeIInterchainTokenFactoryUpgradeArgs = ({
  newImplementation,
  newImplementationCodeHash,
  params,
}: IInterchainTokenFactoryUpgradeArgs) =>
  [newImplementation, newImplementationCodeHash, params] as const;

/**
 * Encoder function for IInterchainTokenFactory.upgrade function data
 */
export const encodeIInterchainTokenFactoryUpgradeData = ({
  newImplementation,
  newImplementationCodeHash,
  params,
}: IInterchainTokenFactoryUpgradeArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "upgrade",
    abi: ABI_FILE.abi,
    args: [newImplementation, newImplementationCodeHash, params],
  });

export const IINTERCHAIN_TOKEN_FACTORY_ENCODERS = {
  approveDeployRemoteInterchainToken: {
    args: encodeIInterchainTokenFactoryApproveDeployRemoteInterchainTokenArgs,
    data: encodeIInterchainTokenFactoryApproveDeployRemoteInterchainTokenData,
  },
  canonicalInterchainTokenDeploySalt: {
    args: encodeIInterchainTokenFactoryCanonicalInterchainTokenDeploySaltArgs,
    data: encodeIInterchainTokenFactoryCanonicalInterchainTokenDeploySaltData,
  },
  canonicalInterchainTokenId: {
    args: encodeIInterchainTokenFactoryCanonicalInterchainTokenIdArgs,
    data: encodeIInterchainTokenFactoryCanonicalInterchainTokenIdData,
  },
  deployInterchainToken: {
    args: encodeIInterchainTokenFactoryDeployInterchainTokenArgs,
    data: encodeIInterchainTokenFactoryDeployInterchainTokenData,
  },
  deployRemoteCanonicalInterchainToken2: {
    args: encodeIInterchainTokenFactoryDeployRemoteCanonicalInterchainToken2Args,
    data: encodeIInterchainTokenFactoryDeployRemoteCanonicalInterchainToken2Data,
  },
  deployRemoteCanonicalInterchainToken: {
    args: encodeIInterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs,
    data: encodeIInterchainTokenFactoryDeployRemoteCanonicalInterchainTokenData,
  },
  deployRemoteInterchainToken: {
    args: encodeIInterchainTokenFactoryDeployRemoteInterchainTokenArgs,
    data: encodeIInterchainTokenFactoryDeployRemoteInterchainTokenData,
  },
  deployRemoteInterchainToken2: {
    args: encodeIInterchainTokenFactoryDeployRemoteInterchainToken2Args,
    data: encodeIInterchainTokenFactoryDeployRemoteInterchainToken2Data,
  },
  deployRemoteInterchainTokenWithMinter: {
    args: encodeIInterchainTokenFactoryDeployRemoteInterchainTokenWithMinterArgs,
    data: encodeIInterchainTokenFactoryDeployRemoteInterchainTokenWithMinterData,
  },
  interchainTokenDeploySalt: {
    args: encodeIInterchainTokenFactoryInterchainTokenDeploySaltArgs,
    data: encodeIInterchainTokenFactoryInterchainTokenDeploySaltData,
  },
  interchainTokenId: {
    args: encodeIInterchainTokenFactoryInterchainTokenIdArgs,
    data: encodeIInterchainTokenFactoryInterchainTokenIdData,
  },
  linkToken: {
    args: encodeIInterchainTokenFactoryLinkTokenArgs,
    data: encodeIInterchainTokenFactoryLinkTokenData,
  },
  linkedTokenDeploySalt: {
    args: encodeIInterchainTokenFactoryLinkedTokenDeploySaltArgs,
    data: encodeIInterchainTokenFactoryLinkedTokenDeploySaltData,
  },
  linkedTokenId: {
    args: encodeIInterchainTokenFactoryLinkedTokenIdArgs,
    data: encodeIInterchainTokenFactoryLinkedTokenIdData,
  },
  multicall: {
    args: encodeIInterchainTokenFactoryMulticallArgs,
    data: encodeIInterchainTokenFactoryMulticallData,
  },
  proposeOwnership: {
    args: encodeIInterchainTokenFactoryProposeOwnershipArgs,
    data: encodeIInterchainTokenFactoryProposeOwnershipData,
  },
  registerCanonicalInterchainToken: {
    args: encodeIInterchainTokenFactoryRegisterCanonicalInterchainTokenArgs,
    data: encodeIInterchainTokenFactoryRegisterCanonicalInterchainTokenData,
  },
  registerCustomToken: {
    args: encodeIInterchainTokenFactoryRegisterCustomTokenArgs,
    data: encodeIInterchainTokenFactoryRegisterCustomTokenData,
  },
  revokeDeployRemoteInterchainToken: {
    args: encodeIInterchainTokenFactoryRevokeDeployRemoteInterchainTokenArgs,
    data: encodeIInterchainTokenFactoryRevokeDeployRemoteInterchainTokenData,
  },
  setup: {
    args: encodeIInterchainTokenFactorySetupArgs,
    data: encodeIInterchainTokenFactorySetupData,
  },
  transferOwnership: {
    args: encodeIInterchainTokenFactoryTransferOwnershipArgs,
    data: encodeIInterchainTokenFactoryTransferOwnershipData,
  },
  upgrade: {
    args: encodeIInterchainTokenFactoryUpgradeArgs,
    data: encodeIInterchainTokenFactoryUpgradeData,
  },
};

export function createIInterchainTokenFactoryReadClient(
  publicClient: PublicContractClient<typeof ABI_FILE.abi>,
) {
  return {
    canonicalInterchainTokenDeploySalt(
      canonicalInterchainTokenDeploySaltArgs: IInterchainTokenFactoryCanonicalInterchainTokenDeploySaltArgs,
    ) {
      const encoder =
        IINTERCHAIN_TOKEN_FACTORY_ENCODERS[
          "canonicalInterchainTokenDeploySalt"
        ];
      const encodedArgs = encoder.args(canonicalInterchainTokenDeploySaltArgs);

      return publicClient.read("canonicalInterchainTokenDeploySalt", {
        args: encodedArgs,
      });
    },
    canonicalInterchainTokenId(
      canonicalInterchainTokenIdArgs: IInterchainTokenFactoryCanonicalInterchainTokenIdArgs,
    ) {
      const encoder =
        IINTERCHAIN_TOKEN_FACTORY_ENCODERS["canonicalInterchainTokenId"];
      const encodedArgs = encoder.args(canonicalInterchainTokenIdArgs);

      return publicClient.read("canonicalInterchainTokenId", {
        args: encodedArgs,
      });
    },
    chainNameHash() {
      return publicClient.read("chainNameHash");
    },
    contractId() {
      return publicClient.read("contractId");
    },
    implementation() {
      return publicClient.read("implementation");
    },
    interchainTokenDeploySalt(
      interchainTokenDeploySaltArgs: IInterchainTokenFactoryInterchainTokenDeploySaltArgs,
    ) {
      const encoder =
        IINTERCHAIN_TOKEN_FACTORY_ENCODERS["interchainTokenDeploySalt"];
      const encodedArgs = encoder.args(interchainTokenDeploySaltArgs);

      return publicClient.read("interchainTokenDeploySalt", {
        args: encodedArgs,
      });
    },
    interchainTokenId(
      interchainTokenIdArgs: IInterchainTokenFactoryInterchainTokenIdArgs,
    ) {
      const encoder = IINTERCHAIN_TOKEN_FACTORY_ENCODERS["interchainTokenId"];
      const encodedArgs = encoder.args(interchainTokenIdArgs);

      return publicClient.read("interchainTokenId", { args: encodedArgs });
    },
    interchainTokenService() {
      return publicClient.read("interchainTokenService");
    },
    linkedTokenDeploySalt(
      linkedTokenDeploySaltArgs: IInterchainTokenFactoryLinkedTokenDeploySaltArgs,
    ) {
      const encoder =
        IINTERCHAIN_TOKEN_FACTORY_ENCODERS["linkedTokenDeploySalt"];
      const encodedArgs = encoder.args(linkedTokenDeploySaltArgs);

      return publicClient.read("linkedTokenDeploySalt", { args: encodedArgs });
    },
    linkedTokenId(linkedTokenIdArgs: IInterchainTokenFactoryLinkedTokenIdArgs) {
      const encoder = IINTERCHAIN_TOKEN_FACTORY_ENCODERS["linkedTokenId"];
      const encodedArgs = encoder.args(linkedTokenIdArgs);

      return publicClient.read("linkedTokenId", { args: encodedArgs });
    },
    owner() {
      return publicClient.read("owner");
    },
    pendingOwner() {
      return publicClient.read("pendingOwner");
    },
  };
}
