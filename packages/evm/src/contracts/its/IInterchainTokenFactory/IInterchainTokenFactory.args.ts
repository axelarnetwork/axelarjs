/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - node_modules/@axelar-network/interchain-token-service/artifacts/contracts/interfaces/IInterchainTokenFactory.sol/IInterchainTokenFactory.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import ABI_FILE from "./IInterchainTokenFactory.abi";

export type IInterchainTokenFactoryCanonicalInterchainTokenIdArgs = {
  tokenAddress: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenFactory.canonicalInterchainTokenId function args
 */
export const encodeIInterchainTokenFactoryCanonicalInterchainTokenIdArgs = ({
  tokenAddress,
}: IInterchainTokenFactoryCanonicalInterchainTokenIdArgs) =>
  [tokenAddress] as const;

/**
 * Encoder function for IInterchainTokenFactory.canonicalInterchainTokenId function data
 */
export const encodeIInterchainTokenFactoryCanonicalInterchainTokenIdData = ({
  tokenAddress,
}: IInterchainTokenFactoryCanonicalInterchainTokenIdArgs) =>
  encodeFunctionData({
    functionName: "canonicalInterchainTokenId",
    abi: ABI_FILE.abi,
    args: [tokenAddress],
  });

export type IInterchainTokenFactoryCanonicalInterchainTokenSaltArgs = {
  chainAddressHash_: `0x${string}`;
  tokenAddress: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenFactory.canonicalInterchainTokenSalt function args
 */
export const encodeIInterchainTokenFactoryCanonicalInterchainTokenSaltArgs = ({
  chainAddressHash_,
  tokenAddress,
}: IInterchainTokenFactoryCanonicalInterchainTokenSaltArgs) =>
  [chainAddressHash_, tokenAddress] as const;

/**
 * Encoder function for IInterchainTokenFactory.canonicalInterchainTokenSalt function data
 */
export const encodeIInterchainTokenFactoryCanonicalInterchainTokenSaltData = ({
  chainAddressHash_,
  tokenAddress,
}: IInterchainTokenFactoryCanonicalInterchainTokenSaltArgs) =>
  encodeFunctionData({
    functionName: "canonicalInterchainTokenSalt",
    abi: ABI_FILE.abi,
    args: [chainAddressHash_, tokenAddress],
  });

export type IInterchainTokenFactoryDeployInterchainTokenArgs = {
  salt: `0x${string}`;
  name: string;
  symbol: string;
  decimals: number;
  mintAmount: bigint;
  distributor: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenFactory.deployInterchainToken function args
 */
export const encodeIInterchainTokenFactoryDeployInterchainTokenArgs = ({
  salt,
  name,
  symbol,
  decimals,
  mintAmount,
  distributor,
}: IInterchainTokenFactoryDeployInterchainTokenArgs) =>
  [salt, name, symbol, decimals, mintAmount, distributor] as const;

/**
 * Encoder function for IInterchainTokenFactory.deployInterchainToken function data
 */
export const encodeIInterchainTokenFactoryDeployInterchainTokenData = ({
  salt,
  name,
  symbol,
  decimals,
  mintAmount,
  distributor,
}: IInterchainTokenFactoryDeployInterchainTokenArgs) =>
  encodeFunctionData({
    functionName: "deployInterchainToken",
    abi: ABI_FILE.abi,
    args: [salt, name, symbol, decimals, mintAmount, distributor],
  });

export type IInterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs = {
  originalChainName: string;
  originalAddress: `0x${string}`;
  destinationChain: string;
  gasValue: bigint;
};

/**
 * Factory function for IInterchainTokenFactory.deployRemoteCanonicalInterchainToken function args
 */
export const encodeIInterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs =
  ({
    originalChainName,
    originalAddress,
    destinationChain,
    gasValue,
  }: IInterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs) =>
    [originalChainName, originalAddress, destinationChain, gasValue] as const;

/**
 * Encoder function for IInterchainTokenFactory.deployRemoteCanonicalInterchainToken function data
 */
export const encodeIInterchainTokenFactoryDeployRemoteCanonicalInterchainTokenData =
  ({
    originalChainName,
    originalAddress,
    destinationChain,
    gasValue,
  }: IInterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs) =>
    encodeFunctionData({
      functionName: "deployRemoteCanonicalInterchainToken",
      abi: ABI_FILE.abi,
      args: [originalChainName, originalAddress, destinationChain, gasValue],
    });

export type IInterchainTokenFactoryDeployRemoteInterchainTokenArgs = {
  originalChainName: string;
  salt: `0x${string}`;
  distributor: `0x${string}`;
  destinationChain: string;
  gasValue: bigint;
};

/**
 * Factory function for IInterchainTokenFactory.deployRemoteInterchainToken function args
 */
export const encodeIInterchainTokenFactoryDeployRemoteInterchainTokenArgs = ({
  originalChainName,
  salt,
  distributor,
  destinationChain,
  gasValue,
}: IInterchainTokenFactoryDeployRemoteInterchainTokenArgs) =>
  [originalChainName, salt, distributor, destinationChain, gasValue] as const;

/**
 * Encoder function for IInterchainTokenFactory.deployRemoteInterchainToken function data
 */
export const encodeIInterchainTokenFactoryDeployRemoteInterchainTokenData = ({
  originalChainName,
  salt,
  distributor,
  destinationChain,
  gasValue,
}: IInterchainTokenFactoryDeployRemoteInterchainTokenArgs) =>
  encodeFunctionData({
    functionName: "deployRemoteInterchainToken",
    abi: ABI_FILE.abi,
    args: [originalChainName, salt, distributor, destinationChain, gasValue],
  });

export type IInterchainTokenFactoryInterchainTokenAddressArgs = {
  deployer: `0x${string}`;
  salt: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenFactory.interchainTokenAddress function args
 */
export const encodeIInterchainTokenFactoryInterchainTokenAddressArgs = ({
  deployer,
  salt,
}: IInterchainTokenFactoryInterchainTokenAddressArgs) =>
  [deployer, salt] as const;

/**
 * Encoder function for IInterchainTokenFactory.interchainTokenAddress function data
 */
export const encodeIInterchainTokenFactoryInterchainTokenAddressData = ({
  deployer,
  salt,
}: IInterchainTokenFactoryInterchainTokenAddressArgs) =>
  encodeFunctionData({
    functionName: "interchainTokenAddress",
    abi: ABI_FILE.abi,
    args: [deployer, salt],
  });

export type IInterchainTokenFactoryInterchainTokenIdArgs = {
  deployer: `0x${string}`;
  salt: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenFactory.interchainTokenId function args
 */
export const encodeIInterchainTokenFactoryInterchainTokenIdArgs = ({
  deployer,
  salt,
}: IInterchainTokenFactoryInterchainTokenIdArgs) => [deployer, salt] as const;

/**
 * Encoder function for IInterchainTokenFactory.interchainTokenId function data
 */
export const encodeIInterchainTokenFactoryInterchainTokenIdData = ({
  deployer,
  salt,
}: IInterchainTokenFactoryInterchainTokenIdArgs) =>
  encodeFunctionData({
    functionName: "interchainTokenId",
    abi: ABI_FILE.abi,
    args: [deployer, salt],
  });

export type IInterchainTokenFactoryInterchainTokenSaltArgs = {
  chainAddressHash_: `0x${string}`;
  deployer: `0x${string}`;
  salt: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenFactory.interchainTokenSalt function args
 */
export const encodeIInterchainTokenFactoryInterchainTokenSaltArgs = ({
  chainAddressHash_,
  deployer,
  salt,
}: IInterchainTokenFactoryInterchainTokenSaltArgs) =>
  [chainAddressHash_, deployer, salt] as const;

/**
 * Encoder function for IInterchainTokenFactory.interchainTokenSalt function data
 */
export const encodeIInterchainTokenFactoryInterchainTokenSaltData = ({
  chainAddressHash_,
  deployer,
  salt,
}: IInterchainTokenFactoryInterchainTokenSaltArgs) =>
  encodeFunctionData({
    functionName: "interchainTokenSalt",
    abi: ABI_FILE.abi,
    args: [chainAddressHash_, deployer, salt],
  });

export type IInterchainTokenFactoryInterchainTransferArgs = {
  tokenId: `0x${string}`;
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  gasValue: bigint;
};

/**
 * Factory function for IInterchainTokenFactory.interchainTransfer function args
 */
export const encodeIInterchainTokenFactoryInterchainTransferArgs = ({
  tokenId,
  destinationChain,
  destinationAddress,
  amount,
  gasValue,
}: IInterchainTokenFactoryInterchainTransferArgs) =>
  [tokenId, destinationChain, destinationAddress, amount, gasValue] as const;

/**
 * Encoder function for IInterchainTokenFactory.interchainTransfer function data
 */
export const encodeIInterchainTokenFactoryInterchainTransferData = ({
  tokenId,
  destinationChain,
  destinationAddress,
  amount,
  gasValue,
}: IInterchainTokenFactoryInterchainTransferArgs) =>
  encodeFunctionData({
    functionName: "interchainTransfer",
    abi: ABI_FILE.abi,
    args: [tokenId, destinationChain, destinationAddress, amount, gasValue],
  });

export type IInterchainTokenFactoryRegisterCanonicalInterchainTokenArgs = {
  tokenAddress: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenFactory.registerCanonicalInterchainToken function args
 */
export const encodeIInterchainTokenFactoryRegisterCanonicalInterchainTokenArgs =
  ({
    tokenAddress,
  }: IInterchainTokenFactoryRegisterCanonicalInterchainTokenArgs) =>
    [tokenAddress] as const;

/**
 * Encoder function for IInterchainTokenFactory.registerCanonicalInterchainToken function data
 */
export const encodeIInterchainTokenFactoryRegisterCanonicalInterchainTokenData =
  ({
    tokenAddress,
  }: IInterchainTokenFactoryRegisterCanonicalInterchainTokenArgs) =>
    encodeFunctionData({
      functionName: "registerCanonicalInterchainToken",
      abi: ABI_FILE.abi,
      args: [tokenAddress],
    });

export type IInterchainTokenFactoryTokenApproveArgs = {
  tokenId: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for IInterchainTokenFactory.tokenApprove function args
 */
export const encodeIInterchainTokenFactoryTokenApproveArgs = ({
  tokenId,
  amount,
}: IInterchainTokenFactoryTokenApproveArgs) => [tokenId, amount] as const;

/**
 * Encoder function for IInterchainTokenFactory.tokenApprove function data
 */
export const encodeIInterchainTokenFactoryTokenApproveData = ({
  tokenId,
  amount,
}: IInterchainTokenFactoryTokenApproveArgs) =>
  encodeFunctionData({
    functionName: "tokenApprove",
    abi: ABI_FILE.abi,
    args: [tokenId, amount],
  });

export type IInterchainTokenFactoryTokenTransferFromArgs = {
  tokenId: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for IInterchainTokenFactory.tokenTransferFrom function args
 */
export const encodeIInterchainTokenFactoryTokenTransferFromArgs = ({
  tokenId,
  amount,
}: IInterchainTokenFactoryTokenTransferFromArgs) => [tokenId, amount] as const;

/**
 * Encoder function for IInterchainTokenFactory.tokenTransferFrom function data
 */
export const encodeIInterchainTokenFactoryTokenTransferFromData = ({
  tokenId,
  amount,
}: IInterchainTokenFactoryTokenTransferFromArgs) =>
  encodeFunctionData({
    functionName: "tokenTransferFrom",
    abi: ABI_FILE.abi,
    args: [tokenId, amount],
  });

export const IINTERCHAIN_TOKEN_FACTORY_ENCODERS = {
  canonicalInterchainTokenId:
    encodeIInterchainTokenFactoryCanonicalInterchainTokenIdArgs,
  canonicalInterchainTokenSalt:
    encodeIInterchainTokenFactoryCanonicalInterchainTokenSaltArgs,
  deployInterchainToken: encodeIInterchainTokenFactoryDeployInterchainTokenArgs,
  deployRemoteCanonicalInterchainToken:
    encodeIInterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs,
  deployRemoteInterchainToken:
    encodeIInterchainTokenFactoryDeployRemoteInterchainTokenArgs,
  interchainTokenAddress:
    encodeIInterchainTokenFactoryInterchainTokenAddressArgs,
  interchainTokenId: encodeIInterchainTokenFactoryInterchainTokenIdArgs,
  interchainTokenSalt: encodeIInterchainTokenFactoryInterchainTokenSaltArgs,
  interchainTransfer: encodeIInterchainTokenFactoryInterchainTransferArgs,
  registerCanonicalInterchainToken:
    encodeIInterchainTokenFactoryRegisterCanonicalInterchainTokenArgs,
  tokenApprove: encodeIInterchainTokenFactoryTokenApproveArgs,
  tokenTransferFrom: encodeIInterchainTokenFactoryTokenTransferFromArgs,
};
