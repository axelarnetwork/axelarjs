/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - node_modules/@axelar-network/interchain-token-service/artifacts/contracts/token-manager/TokenManagerLiquidityPool.sol/TokenManagerLiquidityPool.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import type { PublicContractClient } from "../../PublicContractClient";
import ABI_FILE from "./TokenManagerLiquidityPool.abi";

export type TokenManagerLiquidityPoolAcceptOperatorshipArgs = {
  fromOperator: `0x${string}`;
};

/**
 * Factory function for TokenManagerLiquidityPool.acceptOperatorship function args
 */
export const encodeTokenManagerLiquidityPoolAcceptOperatorshipArgs = ({
  fromOperator,
}: TokenManagerLiquidityPoolAcceptOperatorshipArgs) => [fromOperator] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.acceptOperatorship function data
 */
export const encodeTokenManagerLiquidityPoolAcceptOperatorshipData = ({
  fromOperator,
}: TokenManagerLiquidityPoolAcceptOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "acceptOperatorship",
    abi: ABI_FILE.abi,
    args: [fromOperator],
  });

export type TokenManagerLiquidityPoolAddFlowLimiterArgs = {
  flowLimiter: `0x${string}`;
};

/**
 * Factory function for TokenManagerLiquidityPool.addFlowLimiter function args
 */
export const encodeTokenManagerLiquidityPoolAddFlowLimiterArgs = ({
  flowLimiter,
}: TokenManagerLiquidityPoolAddFlowLimiterArgs) => [flowLimiter] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.addFlowLimiter function data
 */
export const encodeTokenManagerLiquidityPoolAddFlowLimiterData = ({
  flowLimiter,
}: TokenManagerLiquidityPoolAddFlowLimiterArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "addFlowLimiter",
    abi: ABI_FILE.abi,
    args: [flowLimiter],
  });

export type TokenManagerLiquidityPoolCallContractWithInterchainTokenArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  data: `0x${string}`;
};

/**
 * Factory function for TokenManagerLiquidityPool.callContractWithInterchainToken function args
 */
export const encodeTokenManagerLiquidityPoolCallContractWithInterchainTokenArgs =
  ({
    destinationChain,
    destinationAddress,
    amount,
    data,
  }: TokenManagerLiquidityPoolCallContractWithInterchainTokenArgs) =>
    [destinationChain, destinationAddress, amount, data] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.callContractWithInterchainToken function data
 */
export const encodeTokenManagerLiquidityPoolCallContractWithInterchainTokenData =
  ({
    destinationChain,
    destinationAddress,
    amount,
    data,
  }: TokenManagerLiquidityPoolCallContractWithInterchainTokenArgs): `0x${string}` =>
    encodeFunctionData({
      functionName: "callContractWithInterchainToken",
      abi: ABI_FILE.abi,
      args: [destinationChain, destinationAddress, amount, data],
    });

export type TokenManagerLiquidityPoolGiveTokenArgs = {
  destinationAddress: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for TokenManagerLiquidityPool.giveToken function args
 */
export const encodeTokenManagerLiquidityPoolGiveTokenArgs = ({
  destinationAddress,
  amount,
}: TokenManagerLiquidityPoolGiveTokenArgs) =>
  [destinationAddress, amount] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.giveToken function data
 */
export const encodeTokenManagerLiquidityPoolGiveTokenData = ({
  destinationAddress,
  amount,
}: TokenManagerLiquidityPoolGiveTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "giveToken",
    abi: ABI_FILE.abi,
    args: [destinationAddress, amount],
  });

export type TokenManagerLiquidityPoolHasRoleArgs = {
  account: `0x${string}`;
  role: number;
};

/**
 * Factory function for TokenManagerLiquidityPool.hasRole function args
 */
export const encodeTokenManagerLiquidityPoolHasRoleArgs = ({
  account,
  role,
}: TokenManagerLiquidityPoolHasRoleArgs) => [account, role] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.hasRole function data
 */
export const encodeTokenManagerLiquidityPoolHasRoleData = ({
  account,
  role,
}: TokenManagerLiquidityPoolHasRoleArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "hasRole",
    abi: ABI_FILE.abi,
    args: [account, role],
  });

export type TokenManagerLiquidityPoolInterchainTransferArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for TokenManagerLiquidityPool.interchainTransfer function args
 */
export const encodeTokenManagerLiquidityPoolInterchainTransferArgs = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerLiquidityPoolInterchainTransferArgs) =>
  [destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.interchainTransfer function data
 */
export const encodeTokenManagerLiquidityPoolInterchainTransferData = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerLiquidityPoolInterchainTransferArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "interchainTransfer",
    abi: ABI_FILE.abi,
    args: [destinationChain, destinationAddress, amount, metadata],
  });

export type TokenManagerLiquidityPoolIsOperatorArgs = { addr: `0x${string}` };

/**
 * Factory function for TokenManagerLiquidityPool.isOperator function args
 */
export const encodeTokenManagerLiquidityPoolIsOperatorArgs = ({
  addr,
}: TokenManagerLiquidityPoolIsOperatorArgs) => [addr] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.isOperator function data
 */
export const encodeTokenManagerLiquidityPoolIsOperatorData = ({
  addr,
}: TokenManagerLiquidityPoolIsOperatorArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "isOperator",
    abi: ABI_FILE.abi,
    args: [addr],
  });

export type TokenManagerLiquidityPoolParamsArgs = {
  operator_: `0x${string}`;
  tokenAddress_: `0x${string}`;
  liquidityPoolAddress: `0x${string}`;
};

/**
 * Factory function for TokenManagerLiquidityPool.params function args
 */
export const encodeTokenManagerLiquidityPoolParamsArgs = ({
  operator_,
  tokenAddress_,
  liquidityPoolAddress,
}: TokenManagerLiquidityPoolParamsArgs) =>
  [operator_, tokenAddress_, liquidityPoolAddress] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.params function data
 */
export const encodeTokenManagerLiquidityPoolParamsData = ({
  operator_,
  tokenAddress_,
  liquidityPoolAddress,
}: TokenManagerLiquidityPoolParamsArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "params",
    abi: ABI_FILE.abi,
    args: [operator_, tokenAddress_, liquidityPoolAddress],
  });

export type TokenManagerLiquidityPoolProposeOperatorshipArgs = {
  operator: `0x${string}`;
};

/**
 * Factory function for TokenManagerLiquidityPool.proposeOperatorship function args
 */
export const encodeTokenManagerLiquidityPoolProposeOperatorshipArgs = ({
  operator,
}: TokenManagerLiquidityPoolProposeOperatorshipArgs) => [operator] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.proposeOperatorship function data
 */
export const encodeTokenManagerLiquidityPoolProposeOperatorshipData = ({
  operator,
}: TokenManagerLiquidityPoolProposeOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "proposeOperatorship",
    abi: ABI_FILE.abi,
    args: [operator],
  });

export type TokenManagerLiquidityPoolRemoveFlowLimiterArgs = {
  flowLimiter: `0x${string}`;
};

/**
 * Factory function for TokenManagerLiquidityPool.removeFlowLimiter function args
 */
export const encodeTokenManagerLiquidityPoolRemoveFlowLimiterArgs = ({
  flowLimiter,
}: TokenManagerLiquidityPoolRemoveFlowLimiterArgs) => [flowLimiter] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.removeFlowLimiter function data
 */
export const encodeTokenManagerLiquidityPoolRemoveFlowLimiterData = ({
  flowLimiter,
}: TokenManagerLiquidityPoolRemoveFlowLimiterArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "removeFlowLimiter",
    abi: ABI_FILE.abi,
    args: [flowLimiter],
  });

export type TokenManagerLiquidityPoolSetFlowLimitArgs = { flowLimit_: bigint };

/**
 * Factory function for TokenManagerLiquidityPool.setFlowLimit function args
 */
export const encodeTokenManagerLiquidityPoolSetFlowLimitArgs = ({
  flowLimit_,
}: TokenManagerLiquidityPoolSetFlowLimitArgs) => [flowLimit_] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.setFlowLimit function data
 */
export const encodeTokenManagerLiquidityPoolSetFlowLimitData = ({
  flowLimit_,
}: TokenManagerLiquidityPoolSetFlowLimitArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setFlowLimit",
    abi: ABI_FILE.abi,
    args: [flowLimit_],
  });

export type TokenManagerLiquidityPoolSetLiquidityPoolArgs = {
  newLiquidityPool: `0x${string}`;
};

/**
 * Factory function for TokenManagerLiquidityPool.setLiquidityPool function args
 */
export const encodeTokenManagerLiquidityPoolSetLiquidityPoolArgs = ({
  newLiquidityPool,
}: TokenManagerLiquidityPoolSetLiquidityPoolArgs) =>
  [newLiquidityPool] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.setLiquidityPool function data
 */
export const encodeTokenManagerLiquidityPoolSetLiquidityPoolData = ({
  newLiquidityPool,
}: TokenManagerLiquidityPoolSetLiquidityPoolArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setLiquidityPool",
    abi: ABI_FILE.abi,
    args: [newLiquidityPool],
  });

export type TokenManagerLiquidityPoolSetupArgs = { params: `0x${string}` };

/**
 * Factory function for TokenManagerLiquidityPool.setup function args
 */
export const encodeTokenManagerLiquidityPoolSetupArgs = ({
  params,
}: TokenManagerLiquidityPoolSetupArgs) => [params] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.setup function data
 */
export const encodeTokenManagerLiquidityPoolSetupData = ({
  params,
}: TokenManagerLiquidityPoolSetupArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setup",
    abi: ABI_FILE.abi,
    args: [params],
  });

export type TokenManagerLiquidityPoolTakeTokenArgs = {
  sourceAddress: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for TokenManagerLiquidityPool.takeToken function args
 */
export const encodeTokenManagerLiquidityPoolTakeTokenArgs = ({
  sourceAddress,
  amount,
}: TokenManagerLiquidityPoolTakeTokenArgs) => [sourceAddress, amount] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.takeToken function data
 */
export const encodeTokenManagerLiquidityPoolTakeTokenData = ({
  sourceAddress,
  amount,
}: TokenManagerLiquidityPoolTakeTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "takeToken",
    abi: ABI_FILE.abi,
    args: [sourceAddress, amount],
  });

export type TokenManagerLiquidityPoolTransferOperatorshipArgs = {
  operator: `0x${string}`;
};

/**
 * Factory function for TokenManagerLiquidityPool.transferOperatorship function args
 */
export const encodeTokenManagerLiquidityPoolTransferOperatorshipArgs = ({
  operator,
}: TokenManagerLiquidityPoolTransferOperatorshipArgs) => [operator] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.transferOperatorship function data
 */
export const encodeTokenManagerLiquidityPoolTransferOperatorshipData = ({
  operator,
}: TokenManagerLiquidityPoolTransferOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transferOperatorship",
    abi: ABI_FILE.abi,
    args: [operator],
  });

export type TokenManagerLiquidityPoolTransmitInterchainTransferArgs = {
  sender: `0x${string}`;
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for TokenManagerLiquidityPool.transmitInterchainTransfer function args
 */
export const encodeTokenManagerLiquidityPoolTransmitInterchainTransferArgs = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerLiquidityPoolTransmitInterchainTransferArgs) =>
  [sender, destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.transmitInterchainTransfer function data
 */
export const encodeTokenManagerLiquidityPoolTransmitInterchainTransferData = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerLiquidityPoolTransmitInterchainTransferArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transmitInterchainTransfer",
    abi: ABI_FILE.abi,
    args: [sender, destinationChain, destinationAddress, amount, metadata],
  });

export const TOKEN_MANAGER_LIQUIDITY_POOL_ENCODERS = {
  acceptOperatorship: {
    args: encodeTokenManagerLiquidityPoolAcceptOperatorshipArgs,
    data: encodeTokenManagerLiquidityPoolAcceptOperatorshipData,
  },
  addFlowLimiter: {
    args: encodeTokenManagerLiquidityPoolAddFlowLimiterArgs,
    data: encodeTokenManagerLiquidityPoolAddFlowLimiterData,
  },
  callContractWithInterchainToken: {
    args: encodeTokenManagerLiquidityPoolCallContractWithInterchainTokenArgs,
    data: encodeTokenManagerLiquidityPoolCallContractWithInterchainTokenData,
  },
  giveToken: {
    args: encodeTokenManagerLiquidityPoolGiveTokenArgs,
    data: encodeTokenManagerLiquidityPoolGiveTokenData,
  },
  hasRole: {
    args: encodeTokenManagerLiquidityPoolHasRoleArgs,
    data: encodeTokenManagerLiquidityPoolHasRoleData,
  },
  interchainTransfer: {
    args: encodeTokenManagerLiquidityPoolInterchainTransferArgs,
    data: encodeTokenManagerLiquidityPoolInterchainTransferData,
  },
  isOperator: {
    args: encodeTokenManagerLiquidityPoolIsOperatorArgs,
    data: encodeTokenManagerLiquidityPoolIsOperatorData,
  },
  params: {
    args: encodeTokenManagerLiquidityPoolParamsArgs,
    data: encodeTokenManagerLiquidityPoolParamsData,
  },
  proposeOperatorship: {
    args: encodeTokenManagerLiquidityPoolProposeOperatorshipArgs,
    data: encodeTokenManagerLiquidityPoolProposeOperatorshipData,
  },
  removeFlowLimiter: {
    args: encodeTokenManagerLiquidityPoolRemoveFlowLimiterArgs,
    data: encodeTokenManagerLiquidityPoolRemoveFlowLimiterData,
  },
  setFlowLimit: {
    args: encodeTokenManagerLiquidityPoolSetFlowLimitArgs,
    data: encodeTokenManagerLiquidityPoolSetFlowLimitData,
  },
  setLiquidityPool: {
    args: encodeTokenManagerLiquidityPoolSetLiquidityPoolArgs,
    data: encodeTokenManagerLiquidityPoolSetLiquidityPoolData,
  },
  setup: {
    args: encodeTokenManagerLiquidityPoolSetupArgs,
    data: encodeTokenManagerLiquidityPoolSetupData,
  },
  takeToken: {
    args: encodeTokenManagerLiquidityPoolTakeTokenArgs,
    data: encodeTokenManagerLiquidityPoolTakeTokenData,
  },
  transferOperatorship: {
    args: encodeTokenManagerLiquidityPoolTransferOperatorshipArgs,
    data: encodeTokenManagerLiquidityPoolTransferOperatorshipData,
  },
  transmitInterchainTransfer: {
    args: encodeTokenManagerLiquidityPoolTransmitInterchainTransferArgs,
    data: encodeTokenManagerLiquidityPoolTransmitInterchainTransferData,
  },
};

export function createTokenManagerLiquidityPoolReadClient(
  publicClient: PublicContractClient<typeof ABI_FILE.abi>
) {
  return {
    hasRole(hasRoleArgs: TokenManagerLiquidityPoolHasRoleArgs) {
      const encoder = TOKEN_MANAGER_LIQUIDITY_POOL_ENCODERS["hasRole"];
      const encodedArgs = encoder.args(hasRoleArgs);

      return publicClient.read("hasRole", { args: encodedArgs });
    },
    isOperator(isOperatorArgs: TokenManagerLiquidityPoolIsOperatorArgs) {
      const encoder = TOKEN_MANAGER_LIQUIDITY_POOL_ENCODERS["isOperator"];
      const encodedArgs = encoder.args(isOperatorArgs);

      return publicClient.read("isOperator", { args: encodedArgs });
    },
    params(paramsArgs: TokenManagerLiquidityPoolParamsArgs) {
      const encoder = TOKEN_MANAGER_LIQUIDITY_POOL_ENCODERS["params"];
      const encodedArgs = encoder.args(paramsArgs);

      return publicClient.read("params", { args: encodedArgs });
    },
  };
}
