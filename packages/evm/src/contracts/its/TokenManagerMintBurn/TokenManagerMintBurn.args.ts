/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - node_modules/@axelar-network/interchain-token-service/artifacts/contracts/token-manager/TokenManagerMintBurn.sol/TokenManagerMintBurn.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import ABI_FILE from "./TokenManagerMintBurn.abi";

export type TokenManagerMintBurnAcceptOperatorshipArgs = {
  fromOperator: `0x${string}`;
};

/**
 * Factory function for TokenManagerMintBurn.acceptOperatorship function args
 */
export const encodeTokenManagerMintBurnAcceptOperatorshipArgs = ({
  fromOperator,
}: TokenManagerMintBurnAcceptOperatorshipArgs) => [fromOperator] as const;

/**
 * Encoder function for TokenManagerMintBurn.acceptOperatorship function data
 */
export const encodeTokenManagerMintBurnAcceptOperatorshipData = ({
  fromOperator,
}: TokenManagerMintBurnAcceptOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "acceptOperatorship",
    abi: ABI_FILE.abi,
    args: [fromOperator],
  });

export type TokenManagerMintBurnAddFlowLimiterArgs = {
  flowLimiter: `0x${string}`;
};

/**
 * Factory function for TokenManagerMintBurn.addFlowLimiter function args
 */
export const encodeTokenManagerMintBurnAddFlowLimiterArgs = ({
  flowLimiter,
}: TokenManagerMintBurnAddFlowLimiterArgs) => [flowLimiter] as const;

/**
 * Encoder function for TokenManagerMintBurn.addFlowLimiter function data
 */
export const encodeTokenManagerMintBurnAddFlowLimiterData = ({
  flowLimiter,
}: TokenManagerMintBurnAddFlowLimiterArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "addFlowLimiter",
    abi: ABI_FILE.abi,
    args: [flowLimiter],
  });

export type TokenManagerMintBurnCallContractWithInterchainTokenArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  data: `0x${string}`;
};

/**
 * Factory function for TokenManagerMintBurn.callContractWithInterchainToken function args
 */
export const encodeTokenManagerMintBurnCallContractWithInterchainTokenArgs = ({
  destinationChain,
  destinationAddress,
  amount,
  data,
}: TokenManagerMintBurnCallContractWithInterchainTokenArgs) =>
  [destinationChain, destinationAddress, amount, data] as const;

/**
 * Encoder function for TokenManagerMintBurn.callContractWithInterchainToken function data
 */
export const encodeTokenManagerMintBurnCallContractWithInterchainTokenData = ({
  destinationChain,
  destinationAddress,
  amount,
  data,
}: TokenManagerMintBurnCallContractWithInterchainTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "callContractWithInterchainToken",
    abi: ABI_FILE.abi,
    args: [destinationChain, destinationAddress, amount, data],
  });

export type TokenManagerMintBurnGiveTokenArgs = {
  destinationAddress: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for TokenManagerMintBurn.giveToken function args
 */
export const encodeTokenManagerMintBurnGiveTokenArgs = ({
  destinationAddress,
  amount,
}: TokenManagerMintBurnGiveTokenArgs) => [destinationAddress, amount] as const;

/**
 * Encoder function for TokenManagerMintBurn.giveToken function data
 */
export const encodeTokenManagerMintBurnGiveTokenData = ({
  destinationAddress,
  amount,
}: TokenManagerMintBurnGiveTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "giveToken",
    abi: ABI_FILE.abi,
    args: [destinationAddress, amount],
  });

export type TokenManagerMintBurnHasRoleArgs = {
  account: `0x${string}`;
  role: number;
};

/**
 * Factory function for TokenManagerMintBurn.hasRole function args
 */
export const encodeTokenManagerMintBurnHasRoleArgs = ({
  account,
  role,
}: TokenManagerMintBurnHasRoleArgs) => [account, role] as const;

/**
 * Encoder function for TokenManagerMintBurn.hasRole function data
 */
export const encodeTokenManagerMintBurnHasRoleData = ({
  account,
  role,
}: TokenManagerMintBurnHasRoleArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "hasRole",
    abi: ABI_FILE.abi,
    args: [account, role],
  });

export type TokenManagerMintBurnInterchainTransferArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for TokenManagerMintBurn.interchainTransfer function args
 */
export const encodeTokenManagerMintBurnInterchainTransferArgs = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerMintBurnInterchainTransferArgs) =>
  [destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for TokenManagerMintBurn.interchainTransfer function data
 */
export const encodeTokenManagerMintBurnInterchainTransferData = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerMintBurnInterchainTransferArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "interchainTransfer",
    abi: ABI_FILE.abi,
    args: [destinationChain, destinationAddress, amount, metadata],
  });

export type TokenManagerMintBurnIsOperatorArgs = { addr: `0x${string}` };

/**
 * Factory function for TokenManagerMintBurn.isOperator function args
 */
export const encodeTokenManagerMintBurnIsOperatorArgs = ({
  addr,
}: TokenManagerMintBurnIsOperatorArgs) => [addr] as const;

/**
 * Encoder function for TokenManagerMintBurn.isOperator function data
 */
export const encodeTokenManagerMintBurnIsOperatorData = ({
  addr,
}: TokenManagerMintBurnIsOperatorArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "isOperator",
    abi: ABI_FILE.abi,
    args: [addr],
  });

export type TokenManagerMintBurnParamsArgs = {
  operator_: `0x${string}`;
  tokenAddress_: `0x${string}`;
};

/**
 * Factory function for TokenManagerMintBurn.params function args
 */
export const encodeTokenManagerMintBurnParamsArgs = ({
  operator_,
  tokenAddress_,
}: TokenManagerMintBurnParamsArgs) => [operator_, tokenAddress_] as const;

/**
 * Encoder function for TokenManagerMintBurn.params function data
 */
export const encodeTokenManagerMintBurnParamsData = ({
  operator_,
  tokenAddress_,
}: TokenManagerMintBurnParamsArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "params",
    abi: ABI_FILE.abi,
    args: [operator_, tokenAddress_],
  });

export type TokenManagerMintBurnProposeOperatorshipArgs = {
  operator: `0x${string}`;
};

/**
 * Factory function for TokenManagerMintBurn.proposeOperatorship function args
 */
export const encodeTokenManagerMintBurnProposeOperatorshipArgs = ({
  operator,
}: TokenManagerMintBurnProposeOperatorshipArgs) => [operator] as const;

/**
 * Encoder function for TokenManagerMintBurn.proposeOperatorship function data
 */
export const encodeTokenManagerMintBurnProposeOperatorshipData = ({
  operator,
}: TokenManagerMintBurnProposeOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "proposeOperatorship",
    abi: ABI_FILE.abi,
    args: [operator],
  });

export type TokenManagerMintBurnRemoveFlowLimiterArgs = {
  flowLimiter: `0x${string}`;
};

/**
 * Factory function for TokenManagerMintBurn.removeFlowLimiter function args
 */
export const encodeTokenManagerMintBurnRemoveFlowLimiterArgs = ({
  flowLimiter,
}: TokenManagerMintBurnRemoveFlowLimiterArgs) => [flowLimiter] as const;

/**
 * Encoder function for TokenManagerMintBurn.removeFlowLimiter function data
 */
export const encodeTokenManagerMintBurnRemoveFlowLimiterData = ({
  flowLimiter,
}: TokenManagerMintBurnRemoveFlowLimiterArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "removeFlowLimiter",
    abi: ABI_FILE.abi,
    args: [flowLimiter],
  });

export type TokenManagerMintBurnSetFlowLimitArgs = { flowLimit_: bigint };

/**
 * Factory function for TokenManagerMintBurn.setFlowLimit function args
 */
export const encodeTokenManagerMintBurnSetFlowLimitArgs = ({
  flowLimit_,
}: TokenManagerMintBurnSetFlowLimitArgs) => [flowLimit_] as const;

/**
 * Encoder function for TokenManagerMintBurn.setFlowLimit function data
 */
export const encodeTokenManagerMintBurnSetFlowLimitData = ({
  flowLimit_,
}: TokenManagerMintBurnSetFlowLimitArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setFlowLimit",
    abi: ABI_FILE.abi,
    args: [flowLimit_],
  });

export type TokenManagerMintBurnSetupArgs = { params: `0x${string}` };

/**
 * Factory function for TokenManagerMintBurn.setup function args
 */
export const encodeTokenManagerMintBurnSetupArgs = ({
  params,
}: TokenManagerMintBurnSetupArgs) => [params] as const;

/**
 * Encoder function for TokenManagerMintBurn.setup function data
 */
export const encodeTokenManagerMintBurnSetupData = ({
  params,
}: TokenManagerMintBurnSetupArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setup",
    abi: ABI_FILE.abi,
    args: [params],
  });

export type TokenManagerMintBurnTakeTokenArgs = {
  sourceAddress: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for TokenManagerMintBurn.takeToken function args
 */
export const encodeTokenManagerMintBurnTakeTokenArgs = ({
  sourceAddress,
  amount,
}: TokenManagerMintBurnTakeTokenArgs) => [sourceAddress, amount] as const;

/**
 * Encoder function for TokenManagerMintBurn.takeToken function data
 */
export const encodeTokenManagerMintBurnTakeTokenData = ({
  sourceAddress,
  amount,
}: TokenManagerMintBurnTakeTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "takeToken",
    abi: ABI_FILE.abi,
    args: [sourceAddress, amount],
  });

export type TokenManagerMintBurnTransferOperatorshipArgs = {
  operator: `0x${string}`;
};

/**
 * Factory function for TokenManagerMintBurn.transferOperatorship function args
 */
export const encodeTokenManagerMintBurnTransferOperatorshipArgs = ({
  operator,
}: TokenManagerMintBurnTransferOperatorshipArgs) => [operator] as const;

/**
 * Encoder function for TokenManagerMintBurn.transferOperatorship function data
 */
export const encodeTokenManagerMintBurnTransferOperatorshipData = ({
  operator,
}: TokenManagerMintBurnTransferOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transferOperatorship",
    abi: ABI_FILE.abi,
    args: [operator],
  });

export type TokenManagerMintBurnTransmitInterchainTransferArgs = {
  sender: `0x${string}`;
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for TokenManagerMintBurn.transmitInterchainTransfer function args
 */
export const encodeTokenManagerMintBurnTransmitInterchainTransferArgs = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerMintBurnTransmitInterchainTransferArgs) =>
  [sender, destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for TokenManagerMintBurn.transmitInterchainTransfer function data
 */
export const encodeTokenManagerMintBurnTransmitInterchainTransferData = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerMintBurnTransmitInterchainTransferArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transmitInterchainTransfer",
    abi: ABI_FILE.abi,
    args: [sender, destinationChain, destinationAddress, amount, metadata],
  });

export const TOKEN_MANAGER_MINT_BURN_ENCODERS = {
  acceptOperatorship: encodeTokenManagerMintBurnAcceptOperatorshipArgs,
  addFlowLimiter: encodeTokenManagerMintBurnAddFlowLimiterArgs,
  callContractWithInterchainToken:
    encodeTokenManagerMintBurnCallContractWithInterchainTokenArgs,
  giveToken: encodeTokenManagerMintBurnGiveTokenArgs,
  hasRole: encodeTokenManagerMintBurnHasRoleArgs,
  interchainTransfer: encodeTokenManagerMintBurnInterchainTransferArgs,
  isOperator: encodeTokenManagerMintBurnIsOperatorArgs,
  params: encodeTokenManagerMintBurnParamsArgs,
  proposeOperatorship: encodeTokenManagerMintBurnProposeOperatorshipArgs,
  removeFlowLimiter: encodeTokenManagerMintBurnRemoveFlowLimiterArgs,
  setFlowLimit: encodeTokenManagerMintBurnSetFlowLimitArgs,
  setup: encodeTokenManagerMintBurnSetupArgs,
  takeToken: encodeTokenManagerMintBurnTakeTokenArgs,
  transferOperatorship: encodeTokenManagerMintBurnTransferOperatorshipArgs,
  transmitInterchainTransfer:
    encodeTokenManagerMintBurnTransmitInterchainTransferArgs,
};
