/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - node_modules/@axelar-network/interchain-token-service/artifacts/contracts/token-manager/TokenManagerLockUnlock.sol/TokenManagerLockUnlock.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import ABI_FILE from "./TokenManagerLockUnlock.abi";

export type TokenManagerLockUnlockAcceptOperatorshipArgs = {
  fromOperator: `0x${string}`;
};

/**
 * Factory function for TokenManagerLockUnlock.acceptOperatorship function args
 */
export const encodeTokenManagerLockUnlockAcceptOperatorshipArgs = ({
  fromOperator,
}: TokenManagerLockUnlockAcceptOperatorshipArgs) => [fromOperator] as const;

/**
 * Encoder function for TokenManagerLockUnlock.acceptOperatorship function data
 */
export const encodeTokenManagerLockUnlockAcceptOperatorshipData = ({
  fromOperator,
}: TokenManagerLockUnlockAcceptOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "acceptOperatorship",
    abi: ABI_FILE.abi,
    args: [fromOperator],
  });

export type TokenManagerLockUnlockAddFlowLimiterArgs = {
  flowLimiter: `0x${string}`;
};

/**
 * Factory function for TokenManagerLockUnlock.addFlowLimiter function args
 */
export const encodeTokenManagerLockUnlockAddFlowLimiterArgs = ({
  flowLimiter,
}: TokenManagerLockUnlockAddFlowLimiterArgs) => [flowLimiter] as const;

/**
 * Encoder function for TokenManagerLockUnlock.addFlowLimiter function data
 */
export const encodeTokenManagerLockUnlockAddFlowLimiterData = ({
  flowLimiter,
}: TokenManagerLockUnlockAddFlowLimiterArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "addFlowLimiter",
    abi: ABI_FILE.abi,
    args: [flowLimiter],
  });

export type TokenManagerLockUnlockCallContractWithInterchainTokenArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  data: `0x${string}`;
};

/**
 * Factory function for TokenManagerLockUnlock.callContractWithInterchainToken function args
 */
export const encodeTokenManagerLockUnlockCallContractWithInterchainTokenArgs =
  ({
    destinationChain,
    destinationAddress,
    amount,
    data,
  }: TokenManagerLockUnlockCallContractWithInterchainTokenArgs) =>
    [destinationChain, destinationAddress, amount, data] as const;

/**
 * Encoder function for TokenManagerLockUnlock.callContractWithInterchainToken function data
 */
export const encodeTokenManagerLockUnlockCallContractWithInterchainTokenData =
  ({
    destinationChain,
    destinationAddress,
    amount,
    data,
  }: TokenManagerLockUnlockCallContractWithInterchainTokenArgs): `0x${string}` =>
    encodeFunctionData({
      functionName: "callContractWithInterchainToken",
      abi: ABI_FILE.abi,
      args: [destinationChain, destinationAddress, amount, data],
    });

export type TokenManagerLockUnlockGiveTokenArgs = {
  destinationAddress: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for TokenManagerLockUnlock.giveToken function args
 */
export const encodeTokenManagerLockUnlockGiveTokenArgs = ({
  destinationAddress,
  amount,
}: TokenManagerLockUnlockGiveTokenArgs) =>
  [destinationAddress, amount] as const;

/**
 * Encoder function for TokenManagerLockUnlock.giveToken function data
 */
export const encodeTokenManagerLockUnlockGiveTokenData = ({
  destinationAddress,
  amount,
}: TokenManagerLockUnlockGiveTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "giveToken",
    abi: ABI_FILE.abi,
    args: [destinationAddress, amount],
  });

export type TokenManagerLockUnlockHasRoleArgs = {
  account: `0x${string}`;
  role: number;
};

/**
 * Factory function for TokenManagerLockUnlock.hasRole function args
 */
export const encodeTokenManagerLockUnlockHasRoleArgs = ({
  account,
  role,
}: TokenManagerLockUnlockHasRoleArgs) => [account, role] as const;

/**
 * Encoder function for TokenManagerLockUnlock.hasRole function data
 */
export const encodeTokenManagerLockUnlockHasRoleData = ({
  account,
  role,
}: TokenManagerLockUnlockHasRoleArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "hasRole",
    abi: ABI_FILE.abi,
    args: [account, role],
  });

export type TokenManagerLockUnlockInterchainTransferArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for TokenManagerLockUnlock.interchainTransfer function args
 */
export const encodeTokenManagerLockUnlockInterchainTransferArgs = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerLockUnlockInterchainTransferArgs) =>
  [destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for TokenManagerLockUnlock.interchainTransfer function data
 */
export const encodeTokenManagerLockUnlockInterchainTransferData = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerLockUnlockInterchainTransferArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "interchainTransfer",
    abi: ABI_FILE.abi,
    args: [destinationChain, destinationAddress, amount, metadata],
  });

export type TokenManagerLockUnlockIsOperatorArgs = { addr: `0x${string}` };

/**
 * Factory function for TokenManagerLockUnlock.isOperator function args
 */
export const encodeTokenManagerLockUnlockIsOperatorArgs = ({
  addr,
}: TokenManagerLockUnlockIsOperatorArgs) => [addr] as const;

/**
 * Encoder function for TokenManagerLockUnlock.isOperator function data
 */
export const encodeTokenManagerLockUnlockIsOperatorData = ({
  addr,
}: TokenManagerLockUnlockIsOperatorArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "isOperator",
    abi: ABI_FILE.abi,
    args: [addr],
  });

export type TokenManagerLockUnlockParamsArgs = {
  operator_: `0x${string}`;
  tokenAddress_: `0x${string}`;
};

/**
 * Factory function for TokenManagerLockUnlock.params function args
 */
export const encodeTokenManagerLockUnlockParamsArgs = ({
  operator_,
  tokenAddress_,
}: TokenManagerLockUnlockParamsArgs) => [operator_, tokenAddress_] as const;

/**
 * Encoder function for TokenManagerLockUnlock.params function data
 */
export const encodeTokenManagerLockUnlockParamsData = ({
  operator_,
  tokenAddress_,
}: TokenManagerLockUnlockParamsArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "params",
    abi: ABI_FILE.abi,
    args: [operator_, tokenAddress_],
  });

export type TokenManagerLockUnlockProposeOperatorshipArgs = {
  operator: `0x${string}`;
};

/**
 * Factory function for TokenManagerLockUnlock.proposeOperatorship function args
 */
export const encodeTokenManagerLockUnlockProposeOperatorshipArgs = ({
  operator,
}: TokenManagerLockUnlockProposeOperatorshipArgs) => [operator] as const;

/**
 * Encoder function for TokenManagerLockUnlock.proposeOperatorship function data
 */
export const encodeTokenManagerLockUnlockProposeOperatorshipData = ({
  operator,
}: TokenManagerLockUnlockProposeOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "proposeOperatorship",
    abi: ABI_FILE.abi,
    args: [operator],
  });

export type TokenManagerLockUnlockRemoveFlowLimiterArgs = {
  flowLimiter: `0x${string}`;
};

/**
 * Factory function for TokenManagerLockUnlock.removeFlowLimiter function args
 */
export const encodeTokenManagerLockUnlockRemoveFlowLimiterArgs = ({
  flowLimiter,
}: TokenManagerLockUnlockRemoveFlowLimiterArgs) => [flowLimiter] as const;

/**
 * Encoder function for TokenManagerLockUnlock.removeFlowLimiter function data
 */
export const encodeTokenManagerLockUnlockRemoveFlowLimiterData = ({
  flowLimiter,
}: TokenManagerLockUnlockRemoveFlowLimiterArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "removeFlowLimiter",
    abi: ABI_FILE.abi,
    args: [flowLimiter],
  });

export type TokenManagerLockUnlockSetFlowLimitArgs = { flowLimit_: bigint };

/**
 * Factory function for TokenManagerLockUnlock.setFlowLimit function args
 */
export const encodeTokenManagerLockUnlockSetFlowLimitArgs = ({
  flowLimit_,
}: TokenManagerLockUnlockSetFlowLimitArgs) => [flowLimit_] as const;

/**
 * Encoder function for TokenManagerLockUnlock.setFlowLimit function data
 */
export const encodeTokenManagerLockUnlockSetFlowLimitData = ({
  flowLimit_,
}: TokenManagerLockUnlockSetFlowLimitArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setFlowLimit",
    abi: ABI_FILE.abi,
    args: [flowLimit_],
  });

export type TokenManagerLockUnlockSetupArgs = { params: `0x${string}` };

/**
 * Factory function for TokenManagerLockUnlock.setup function args
 */
export const encodeTokenManagerLockUnlockSetupArgs = ({
  params,
}: TokenManagerLockUnlockSetupArgs) => [params] as const;

/**
 * Encoder function for TokenManagerLockUnlock.setup function data
 */
export const encodeTokenManagerLockUnlockSetupData = ({
  params,
}: TokenManagerLockUnlockSetupArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setup",
    abi: ABI_FILE.abi,
    args: [params],
  });

export type TokenManagerLockUnlockTakeTokenArgs = {
  sourceAddress: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for TokenManagerLockUnlock.takeToken function args
 */
export const encodeTokenManagerLockUnlockTakeTokenArgs = ({
  sourceAddress,
  amount,
}: TokenManagerLockUnlockTakeTokenArgs) => [sourceAddress, amount] as const;

/**
 * Encoder function for TokenManagerLockUnlock.takeToken function data
 */
export const encodeTokenManagerLockUnlockTakeTokenData = ({
  sourceAddress,
  amount,
}: TokenManagerLockUnlockTakeTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "takeToken",
    abi: ABI_FILE.abi,
    args: [sourceAddress, amount],
  });

export type TokenManagerLockUnlockTransferOperatorshipArgs = {
  operator: `0x${string}`;
};

/**
 * Factory function for TokenManagerLockUnlock.transferOperatorship function args
 */
export const encodeTokenManagerLockUnlockTransferOperatorshipArgs = ({
  operator,
}: TokenManagerLockUnlockTransferOperatorshipArgs) => [operator] as const;

/**
 * Encoder function for TokenManagerLockUnlock.transferOperatorship function data
 */
export const encodeTokenManagerLockUnlockTransferOperatorshipData = ({
  operator,
}: TokenManagerLockUnlockTransferOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transferOperatorship",
    abi: ABI_FILE.abi,
    args: [operator],
  });

export type TokenManagerLockUnlockTransmitInterchainTransferArgs = {
  sender: `0x${string}`;
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for TokenManagerLockUnlock.transmitInterchainTransfer function args
 */
export const encodeTokenManagerLockUnlockTransmitInterchainTransferArgs = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerLockUnlockTransmitInterchainTransferArgs) =>
  [sender, destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for TokenManagerLockUnlock.transmitInterchainTransfer function data
 */
export const encodeTokenManagerLockUnlockTransmitInterchainTransferData = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerLockUnlockTransmitInterchainTransferArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transmitInterchainTransfer",
    abi: ABI_FILE.abi,
    args: [sender, destinationChain, destinationAddress, amount, metadata],
  });

export const TOKEN_MANAGER_LOCK_UNLOCK_ENCODERS = {
  acceptOperatorship: encodeTokenManagerLockUnlockAcceptOperatorshipArgs,
  addFlowLimiter: encodeTokenManagerLockUnlockAddFlowLimiterArgs,
  callContractWithInterchainToken:
    encodeTokenManagerLockUnlockCallContractWithInterchainTokenArgs,
  giveToken: encodeTokenManagerLockUnlockGiveTokenArgs,
  hasRole: encodeTokenManagerLockUnlockHasRoleArgs,
  interchainTransfer: encodeTokenManagerLockUnlockInterchainTransferArgs,
  isOperator: encodeTokenManagerLockUnlockIsOperatorArgs,
  params: encodeTokenManagerLockUnlockParamsArgs,
  proposeOperatorship: encodeTokenManagerLockUnlockProposeOperatorshipArgs,
  removeFlowLimiter: encodeTokenManagerLockUnlockRemoveFlowLimiterArgs,
  setFlowLimit: encodeTokenManagerLockUnlockSetFlowLimitArgs,
  setup: encodeTokenManagerLockUnlockSetupArgs,
  takeToken: encodeTokenManagerLockUnlockTakeTokenArgs,
  transferOperatorship: encodeTokenManagerLockUnlockTransferOperatorshipArgs,
  transmitInterchainTransfer:
    encodeTokenManagerLockUnlockTransmitInterchainTransferArgs,
};
