/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - node_modules/@axelar-network/interchain-token-service/artifacts/contracts/interfaces/ITokenManager.sol/ITokenManager.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import ABI_FILE from "./ITokenManager.abi";

export type ITokenManagerAcceptOperatorshipArgs = {
  fromOperator: `0x${string}`;
};

/**
 * Factory function for ITokenManager.acceptOperatorship function args
 */
export const encodeITokenManagerAcceptOperatorshipArgs = ({
  fromOperator,
}: ITokenManagerAcceptOperatorshipArgs) => [fromOperator] as const;

/**
 * Encoder function for ITokenManager.acceptOperatorship function data
 */
export const encodeITokenManagerAcceptOperatorshipData = ({
  fromOperator,
}: ITokenManagerAcceptOperatorshipArgs) =>
  encodeFunctionData({
    functionName: "acceptOperatorship",
    abi: ABI_FILE.abi,
    args: [fromOperator],
  });

export type ITokenManagerAddFlowLimiterArgs = { flowLimiter: `0x${string}` };

/**
 * Factory function for ITokenManager.addFlowLimiter function args
 */
export const encodeITokenManagerAddFlowLimiterArgs = ({
  flowLimiter,
}: ITokenManagerAddFlowLimiterArgs) => [flowLimiter] as const;

/**
 * Encoder function for ITokenManager.addFlowLimiter function data
 */
export const encodeITokenManagerAddFlowLimiterData = ({
  flowLimiter,
}: ITokenManagerAddFlowLimiterArgs) =>
  encodeFunctionData({
    functionName: "addFlowLimiter",
    abi: ABI_FILE.abi,
    args: [flowLimiter],
  });

export type ITokenManagerCallContractWithInterchainTokenArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  data: `0x${string}`;
};

/**
 * Factory function for ITokenManager.callContractWithInterchainToken function args
 */
export const encodeITokenManagerCallContractWithInterchainTokenArgs = ({
  destinationChain,
  destinationAddress,
  amount,
  data,
}: ITokenManagerCallContractWithInterchainTokenArgs) =>
  [destinationChain, destinationAddress, amount, data] as const;

/**
 * Encoder function for ITokenManager.callContractWithInterchainToken function data
 */
export const encodeITokenManagerCallContractWithInterchainTokenData = ({
  destinationChain,
  destinationAddress,
  amount,
  data,
}: ITokenManagerCallContractWithInterchainTokenArgs) =>
  encodeFunctionData({
    functionName: "callContractWithInterchainToken",
    abi: ABI_FILE.abi,
    args: [destinationChain, destinationAddress, amount, data],
  });

export type ITokenManagerGiveTokenArgs = {
  destinationAddress: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for ITokenManager.giveToken function args
 */
export const encodeITokenManagerGiveTokenArgs = ({
  destinationAddress,
  amount,
}: ITokenManagerGiveTokenArgs) => [destinationAddress, amount] as const;

/**
 * Encoder function for ITokenManager.giveToken function data
 */
export const encodeITokenManagerGiveTokenData = ({
  destinationAddress,
  amount,
}: ITokenManagerGiveTokenArgs) =>
  encodeFunctionData({
    functionName: "giveToken",
    abi: ABI_FILE.abi,
    args: [destinationAddress, amount],
  });

export type ITokenManagerHasRoleArgs = { account: `0x${string}`; role: number };

/**
 * Factory function for ITokenManager.hasRole function args
 */
export const encodeITokenManagerHasRoleArgs = ({
  account,
  role,
}: ITokenManagerHasRoleArgs) => [account, role] as const;

/**
 * Encoder function for ITokenManager.hasRole function data
 */
export const encodeITokenManagerHasRoleData = ({
  account,
  role,
}: ITokenManagerHasRoleArgs) =>
  encodeFunctionData({
    functionName: "hasRole",
    abi: ABI_FILE.abi,
    args: [account, role],
  });

export type ITokenManagerInterchainTransferArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for ITokenManager.interchainTransfer function args
 */
export const encodeITokenManagerInterchainTransferArgs = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: ITokenManagerInterchainTransferArgs) =>
  [destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for ITokenManager.interchainTransfer function data
 */
export const encodeITokenManagerInterchainTransferData = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: ITokenManagerInterchainTransferArgs) =>
  encodeFunctionData({
    functionName: "interchainTransfer",
    abi: ABI_FILE.abi,
    args: [destinationChain, destinationAddress, amount, metadata],
  });

export type ITokenManagerIsOperatorArgs = { addr: `0x${string}` };

/**
 * Factory function for ITokenManager.isOperator function args
 */
export const encodeITokenManagerIsOperatorArgs = ({
  addr,
}: ITokenManagerIsOperatorArgs) => [addr] as const;

/**
 * Encoder function for ITokenManager.isOperator function data
 */
export const encodeITokenManagerIsOperatorData = ({
  addr,
}: ITokenManagerIsOperatorArgs) =>
  encodeFunctionData({
    functionName: "isOperator",
    abi: ABI_FILE.abi,
    args: [addr],
  });

export type ITokenManagerProposeOperatorshipArgs = { operator_: `0x${string}` };

/**
 * Factory function for ITokenManager.proposeOperatorship function args
 */
export const encodeITokenManagerProposeOperatorshipArgs = ({
  operator_,
}: ITokenManagerProposeOperatorshipArgs) => [operator_] as const;

/**
 * Encoder function for ITokenManager.proposeOperatorship function data
 */
export const encodeITokenManagerProposeOperatorshipData = ({
  operator_,
}: ITokenManagerProposeOperatorshipArgs) =>
  encodeFunctionData({
    functionName: "proposeOperatorship",
    abi: ABI_FILE.abi,
    args: [operator_],
  });

export type ITokenManagerRemoveFlowLimiterArgs = { flowLimiter: `0x${string}` };

/**
 * Factory function for ITokenManager.removeFlowLimiter function args
 */
export const encodeITokenManagerRemoveFlowLimiterArgs = ({
  flowLimiter,
}: ITokenManagerRemoveFlowLimiterArgs) => [flowLimiter] as const;

/**
 * Encoder function for ITokenManager.removeFlowLimiter function data
 */
export const encodeITokenManagerRemoveFlowLimiterData = ({
  flowLimiter,
}: ITokenManagerRemoveFlowLimiterArgs) =>
  encodeFunctionData({
    functionName: "removeFlowLimiter",
    abi: ABI_FILE.abi,
    args: [flowLimiter],
  });

export type ITokenManagerSetFlowLimitArgs = { flowLimit_: bigint };

/**
 * Factory function for ITokenManager.setFlowLimit function args
 */
export const encodeITokenManagerSetFlowLimitArgs = ({
  flowLimit_,
}: ITokenManagerSetFlowLimitArgs) => [flowLimit_] as const;

/**
 * Encoder function for ITokenManager.setFlowLimit function data
 */
export const encodeITokenManagerSetFlowLimitData = ({
  flowLimit_,
}: ITokenManagerSetFlowLimitArgs) =>
  encodeFunctionData({
    functionName: "setFlowLimit",
    abi: ABI_FILE.abi,
    args: [flowLimit_],
  });

export type ITokenManagerSetupArgs = { data: `0x${string}` };

/**
 * Factory function for ITokenManager.setup function args
 */
export const encodeITokenManagerSetupArgs = ({
  data,
}: ITokenManagerSetupArgs) => [data] as const;

/**
 * Encoder function for ITokenManager.setup function data
 */
export const encodeITokenManagerSetupData = ({
  data,
}: ITokenManagerSetupArgs) =>
  encodeFunctionData({
    functionName: "setup",
    abi: ABI_FILE.abi,
    args: [data],
  });

export type ITokenManagerTakeTokenArgs = {
  sourceAddress: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for ITokenManager.takeToken function args
 */
export const encodeITokenManagerTakeTokenArgs = ({
  sourceAddress,
  amount,
}: ITokenManagerTakeTokenArgs) => [sourceAddress, amount] as const;

/**
 * Encoder function for ITokenManager.takeToken function data
 */
export const encodeITokenManagerTakeTokenData = ({
  sourceAddress,
  amount,
}: ITokenManagerTakeTokenArgs) =>
  encodeFunctionData({
    functionName: "takeToken",
    abi: ABI_FILE.abi,
    args: [sourceAddress, amount],
  });

export type ITokenManagerTransferOperatorshipArgs = {
  operator_: `0x${string}`;
};

/**
 * Factory function for ITokenManager.transferOperatorship function args
 */
export const encodeITokenManagerTransferOperatorshipArgs = ({
  operator_,
}: ITokenManagerTransferOperatorshipArgs) => [operator_] as const;

/**
 * Encoder function for ITokenManager.transferOperatorship function data
 */
export const encodeITokenManagerTransferOperatorshipData = ({
  operator_,
}: ITokenManagerTransferOperatorshipArgs) =>
  encodeFunctionData({
    functionName: "transferOperatorship",
    abi: ABI_FILE.abi,
    args: [operator_],
  });

export type ITokenManagerTransmitInterchainTransferArgs = {
  sender: `0x${string}`;
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for ITokenManager.transmitInterchainTransfer function args
 */
export const encodeITokenManagerTransmitInterchainTransferArgs = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: ITokenManagerTransmitInterchainTransferArgs) =>
  [sender, destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for ITokenManager.transmitInterchainTransfer function data
 */
export const encodeITokenManagerTransmitInterchainTransferData = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: ITokenManagerTransmitInterchainTransferArgs) =>
  encodeFunctionData({
    functionName: "transmitInterchainTransfer",
    abi: ABI_FILE.abi,
    args: [sender, destinationChain, destinationAddress, amount, metadata],
  });

export const ITOKEN_MANAGER_ENCODERS = {
  acceptOperatorship: encodeITokenManagerAcceptOperatorshipArgs,
  addFlowLimiter: encodeITokenManagerAddFlowLimiterArgs,
  callContractWithInterchainToken:
    encodeITokenManagerCallContractWithInterchainTokenArgs,
  giveToken: encodeITokenManagerGiveTokenArgs,
  hasRole: encodeITokenManagerHasRoleArgs,
  interchainTransfer: encodeITokenManagerInterchainTransferArgs,
  isOperator: encodeITokenManagerIsOperatorArgs,
  proposeOperatorship: encodeITokenManagerProposeOperatorshipArgs,
  removeFlowLimiter: encodeITokenManagerRemoveFlowLimiterArgs,
  setFlowLimit: encodeITokenManagerSetFlowLimitArgs,
  setup: encodeITokenManagerSetupArgs,
  takeToken: encodeITokenManagerTakeTokenArgs,
  transferOperatorship: encodeITokenManagerTransferOperatorshipArgs,
  transmitInterchainTransfer: encodeITokenManagerTransmitInterchainTransferArgs,
};
