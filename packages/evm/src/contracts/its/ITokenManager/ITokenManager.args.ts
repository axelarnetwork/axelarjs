/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - node_modules/@axelar-network/interchain-token-service/artifacts/contracts/interfaces/ITokenManager.sol/ITokenManager.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import type { PublicContractClient } from "../../PublicContractClient";
import ABI_FILE from "./ITokenManager.abi";

export type ITokenManagerAcceptOperatorshipArgs = {
  fromOperator: `0x${string}`;
};

/**
 * Factory function for ITokenManager.acceptOperatorship function args
 */
export const encodeITokenManagerAcceptOperatorshipArgs = ({
  fromOperator,
}: ITokenManagerAcceptOperatorshipArgs) => [fromOperator] as const;

/**
 * Encoder function for ITokenManager.acceptOperatorship function data
 */
export const encodeITokenManagerAcceptOperatorshipData = ({
  fromOperator,
}: ITokenManagerAcceptOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "acceptOperatorship",
    abi: ABI_FILE.abi,
    args: [fromOperator],
  });

export type ITokenManagerAddFlowInArgs = { amount: bigint };

/**
 * Factory function for ITokenManager.addFlowIn function args
 */
export const encodeITokenManagerAddFlowInArgs = ({
  amount,
}: ITokenManagerAddFlowInArgs) => [amount] as const;

/**
 * Encoder function for ITokenManager.addFlowIn function data
 */
export const encodeITokenManagerAddFlowInData = ({
  amount,
}: ITokenManagerAddFlowInArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "addFlowIn",
    abi: ABI_FILE.abi,
    args: [amount],
  });

export type ITokenManagerAddFlowLimiterArgs = { flowLimiter: `0x${string}` };

/**
 * Factory function for ITokenManager.addFlowLimiter function args
 */
export const encodeITokenManagerAddFlowLimiterArgs = ({
  flowLimiter,
}: ITokenManagerAddFlowLimiterArgs) => [flowLimiter] as const;

/**
 * Encoder function for ITokenManager.addFlowLimiter function data
 */
export const encodeITokenManagerAddFlowLimiterData = ({
  flowLimiter,
}: ITokenManagerAddFlowLimiterArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "addFlowLimiter",
    abi: ABI_FILE.abi,
    args: [flowLimiter],
  });

export type ITokenManagerAddFlowOutArgs = { amount: bigint };

/**
 * Factory function for ITokenManager.addFlowOut function args
 */
export const encodeITokenManagerAddFlowOutArgs = ({
  amount,
}: ITokenManagerAddFlowOutArgs) => [amount] as const;

/**
 * Encoder function for ITokenManager.addFlowOut function data
 */
export const encodeITokenManagerAddFlowOutData = ({
  amount,
}: ITokenManagerAddFlowOutArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "addFlowOut",
    abi: ABI_FILE.abi,
    args: [amount],
  });

export type ITokenManagerGetTokenAddressFromParamsArgs = {
  params: `0x${string}`;
};

/**
 * Factory function for ITokenManager.getTokenAddressFromParams function args
 */
export const encodeITokenManagerGetTokenAddressFromParamsArgs = ({
  params,
}: ITokenManagerGetTokenAddressFromParamsArgs) => [params] as const;

/**
 * Encoder function for ITokenManager.getTokenAddressFromParams function data
 */
export const encodeITokenManagerGetTokenAddressFromParamsData = ({
  params,
}: ITokenManagerGetTokenAddressFromParamsArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "getTokenAddressFromParams",
    abi: ABI_FILE.abi,
    args: [params],
  });

export type ITokenManagerHasRoleArgs = { account: `0x${string}`; role: number };

/**
 * Factory function for ITokenManager.hasRole function args
 */
export const encodeITokenManagerHasRoleArgs = ({
  account,
  role,
}: ITokenManagerHasRoleArgs) => [account, role] as const;

/**
 * Encoder function for ITokenManager.hasRole function data
 */
export const encodeITokenManagerHasRoleData = ({
  account,
  role,
}: ITokenManagerHasRoleArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "hasRole",
    abi: ABI_FILE.abi,
    args: [account, role],
  });

export type ITokenManagerIsFlowLimiterArgs = { addr: `0x${string}` };

/**
 * Factory function for ITokenManager.isFlowLimiter function args
 */
export const encodeITokenManagerIsFlowLimiterArgs = ({
  addr,
}: ITokenManagerIsFlowLimiterArgs) => [addr] as const;

/**
 * Encoder function for ITokenManager.isFlowLimiter function data
 */
export const encodeITokenManagerIsFlowLimiterData = ({
  addr,
}: ITokenManagerIsFlowLimiterArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "isFlowLimiter",
    abi: ABI_FILE.abi,
    args: [addr],
  });

export type ITokenManagerIsOperatorArgs = { addr: `0x${string}` };

/**
 * Factory function for ITokenManager.isOperator function args
 */
export const encodeITokenManagerIsOperatorArgs = ({
  addr,
}: ITokenManagerIsOperatorArgs) => [addr] as const;

/**
 * Encoder function for ITokenManager.isOperator function data
 */
export const encodeITokenManagerIsOperatorData = ({
  addr,
}: ITokenManagerIsOperatorArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "isOperator",
    abi: ABI_FILE.abi,
    args: [addr],
  });

export type ITokenManagerParamsArgs = {
  operator_: `0x${string}`;
  tokenAddress_: `0x${string}`;
};

/**
 * Factory function for ITokenManager.params function args
 */
export const encodeITokenManagerParamsArgs = ({
  operator_,
  tokenAddress_,
}: ITokenManagerParamsArgs) => [operator_, tokenAddress_] as const;

/**
 * Encoder function for ITokenManager.params function data
 */
export const encodeITokenManagerParamsData = ({
  operator_,
  tokenAddress_,
}: ITokenManagerParamsArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "params",
    abi: ABI_FILE.abi,
    args: [operator_, tokenAddress_],
  });

export type ITokenManagerProposeOperatorshipArgs = { operator_: `0x${string}` };

/**
 * Factory function for ITokenManager.proposeOperatorship function args
 */
export const encodeITokenManagerProposeOperatorshipArgs = ({
  operator_,
}: ITokenManagerProposeOperatorshipArgs) => [operator_] as const;

/**
 * Encoder function for ITokenManager.proposeOperatorship function data
 */
export const encodeITokenManagerProposeOperatorshipData = ({
  operator_,
}: ITokenManagerProposeOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "proposeOperatorship",
    abi: ABI_FILE.abi,
    args: [operator_],
  });

export type ITokenManagerRemoveFlowLimiterArgs = { flowLimiter: `0x${string}` };

/**
 * Factory function for ITokenManager.removeFlowLimiter function args
 */
export const encodeITokenManagerRemoveFlowLimiterArgs = ({
  flowLimiter,
}: ITokenManagerRemoveFlowLimiterArgs) => [flowLimiter] as const;

/**
 * Encoder function for ITokenManager.removeFlowLimiter function data
 */
export const encodeITokenManagerRemoveFlowLimiterData = ({
  flowLimiter,
}: ITokenManagerRemoveFlowLimiterArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "removeFlowLimiter",
    abi: ABI_FILE.abi,
    args: [flowLimiter],
  });

export type ITokenManagerSetFlowLimitArgs = { flowLimit_: bigint };

/**
 * Factory function for ITokenManager.setFlowLimit function args
 */
export const encodeITokenManagerSetFlowLimitArgs = ({
  flowLimit_,
}: ITokenManagerSetFlowLimitArgs) => [flowLimit_] as const;

/**
 * Encoder function for ITokenManager.setFlowLimit function data
 */
export const encodeITokenManagerSetFlowLimitData = ({
  flowLimit_,
}: ITokenManagerSetFlowLimitArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setFlowLimit",
    abi: ABI_FILE.abi,
    args: [flowLimit_],
  });

export type ITokenManagerSetupArgs = { data: `0x${string}` };

/**
 * Factory function for ITokenManager.setup function args
 */
export const encodeITokenManagerSetupArgs = ({
  data,
}: ITokenManagerSetupArgs) => [data] as const;

/**
 * Encoder function for ITokenManager.setup function data
 */
export const encodeITokenManagerSetupData = ({
  data,
}: ITokenManagerSetupArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setup",
    abi: ABI_FILE.abi,
    args: [data],
  });

export type ITokenManagerTransferOperatorshipArgs = {
  operator_: `0x${string}`;
};

/**
 * Factory function for ITokenManager.transferOperatorship function args
 */
export const encodeITokenManagerTransferOperatorshipArgs = ({
  operator_,
}: ITokenManagerTransferOperatorshipArgs) => [operator_] as const;

/**
 * Encoder function for ITokenManager.transferOperatorship function data
 */
export const encodeITokenManagerTransferOperatorshipData = ({
  operator_,
}: ITokenManagerTransferOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transferOperatorship",
    abi: ABI_FILE.abi,
    args: [operator_],
  });

export const ITOKEN_MANAGER_ENCODERS = {
  acceptOperatorship: {
    args: encodeITokenManagerAcceptOperatorshipArgs,
    data: encodeITokenManagerAcceptOperatorshipData,
  },
  addFlowIn: {
    args: encodeITokenManagerAddFlowInArgs,
    data: encodeITokenManagerAddFlowInData,
  },
  addFlowLimiter: {
    args: encodeITokenManagerAddFlowLimiterArgs,
    data: encodeITokenManagerAddFlowLimiterData,
  },
  addFlowOut: {
    args: encodeITokenManagerAddFlowOutArgs,
    data: encodeITokenManagerAddFlowOutData,
  },
  getTokenAddressFromParams: {
    args: encodeITokenManagerGetTokenAddressFromParamsArgs,
    data: encodeITokenManagerGetTokenAddressFromParamsData,
  },
  hasRole: {
    args: encodeITokenManagerHasRoleArgs,
    data: encodeITokenManagerHasRoleData,
  },
  isFlowLimiter: {
    args: encodeITokenManagerIsFlowLimiterArgs,
    data: encodeITokenManagerIsFlowLimiterData,
  },
  isOperator: {
    args: encodeITokenManagerIsOperatorArgs,
    data: encodeITokenManagerIsOperatorData,
  },
  params: {
    args: encodeITokenManagerParamsArgs,
    data: encodeITokenManagerParamsData,
  },
  proposeOperatorship: {
    args: encodeITokenManagerProposeOperatorshipArgs,
    data: encodeITokenManagerProposeOperatorshipData,
  },
  removeFlowLimiter: {
    args: encodeITokenManagerRemoveFlowLimiterArgs,
    data: encodeITokenManagerRemoveFlowLimiterData,
  },
  setFlowLimit: {
    args: encodeITokenManagerSetFlowLimitArgs,
    data: encodeITokenManagerSetFlowLimitData,
  },
  setup: {
    args: encodeITokenManagerSetupArgs,
    data: encodeITokenManagerSetupData,
  },
  transferOperatorship: {
    args: encodeITokenManagerTransferOperatorshipArgs,
    data: encodeITokenManagerTransferOperatorshipData,
  },
};

export function createITokenManagerReadClient(
  publicClient: PublicContractClient<typeof ABI_FILE.abi>
) {
  return {
    getTokenAddressFromParams(
      getTokenAddressFromParamsArgs: ITokenManagerGetTokenAddressFromParamsArgs
    ) {
      const encoder = ITOKEN_MANAGER_ENCODERS["getTokenAddressFromParams"];
      const encodedArgs = encoder.args(getTokenAddressFromParamsArgs);

      return publicClient.read("getTokenAddressFromParams", {
        args: encodedArgs,
      });
    },
    hasRole(hasRoleArgs: ITokenManagerHasRoleArgs) {
      const encoder = ITOKEN_MANAGER_ENCODERS["hasRole"];
      const encodedArgs = encoder.args(hasRoleArgs);

      return publicClient.read("hasRole", { args: encodedArgs });
    },
    isFlowLimiter(isFlowLimiterArgs: ITokenManagerIsFlowLimiterArgs) {
      const encoder = ITOKEN_MANAGER_ENCODERS["isFlowLimiter"];
      const encodedArgs = encoder.args(isFlowLimiterArgs);

      return publicClient.read("isFlowLimiter", { args: encodedArgs });
    },
    isOperator(isOperatorArgs: ITokenManagerIsOperatorArgs) {
      const encoder = ITOKEN_MANAGER_ENCODERS["isOperator"];
      const encodedArgs = encoder.args(isOperatorArgs);

      return publicClient.read("isOperator", { args: encodedArgs });
    },
    params(paramsArgs: ITokenManagerParamsArgs) {
      const encoder = ITOKEN_MANAGER_ENCODERS["params"];
      const encodedArgs = encoder.args(paramsArgs);

      return publicClient.read("params", { args: encodedArgs });
    },
  };
}
