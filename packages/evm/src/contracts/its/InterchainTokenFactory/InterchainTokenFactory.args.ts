/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - node_modules/@axelar-network/interchain-token-service/artifacts/contracts/InterchainTokenFactory.sol/InterchainTokenFactory.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import ABI_FILE from "./InterchainTokenFactory.abi";

export type InterchainTokenFactoryCanonicalInterchainTokenIdArgs = {
  tokenAddress: `0x${string}`;
};

/**
 * Factory function for InterchainTokenFactory.canonicalInterchainTokenId function args
 */
export const encodeInterchainTokenFactoryCanonicalInterchainTokenIdArgs = ({
  tokenAddress,
}: InterchainTokenFactoryCanonicalInterchainTokenIdArgs) =>
  [tokenAddress] as const;

/**
 * Encoder function for InterchainTokenFactory.canonicalInterchainTokenId function data
 */
export const encodeInterchainTokenFactoryCanonicalInterchainTokenIdData = ({
  tokenAddress,
}: InterchainTokenFactoryCanonicalInterchainTokenIdArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "canonicalInterchainTokenId",
    abi: ABI_FILE.abi,
    args: [tokenAddress],
  });

export type InterchainTokenFactoryCanonicalInterchainTokenSaltArgs = {
  chainNameHash_: `0x${string}`;
  tokenAddress: `0x${string}`;
};

/**
 * Factory function for InterchainTokenFactory.canonicalInterchainTokenSalt function args
 */
export const encodeInterchainTokenFactoryCanonicalInterchainTokenSaltArgs = ({
  chainNameHash_,
  tokenAddress,
}: InterchainTokenFactoryCanonicalInterchainTokenSaltArgs) =>
  [chainNameHash_, tokenAddress] as const;

/**
 * Encoder function for InterchainTokenFactory.canonicalInterchainTokenSalt function data
 */
export const encodeInterchainTokenFactoryCanonicalInterchainTokenSaltData = ({
  chainNameHash_,
  tokenAddress,
}: InterchainTokenFactoryCanonicalInterchainTokenSaltArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "canonicalInterchainTokenSalt",
    abi: ABI_FILE.abi,
    args: [chainNameHash_, tokenAddress],
  });

export type InterchainTokenFactoryDeployInterchainTokenArgs = {
  salt: `0x${string}`;
  name: string;
  symbol: string;
  decimals: number;
  mintAmount: bigint;
  distributor: `0x${string}`;
};

/**
 * Factory function for InterchainTokenFactory.deployInterchainToken function args
 */
export const encodeInterchainTokenFactoryDeployInterchainTokenArgs = ({
  salt,
  name,
  symbol,
  decimals,
  mintAmount,
  distributor,
}: InterchainTokenFactoryDeployInterchainTokenArgs) =>
  [salt, name, symbol, decimals, mintAmount, distributor] as const;

/**
 * Encoder function for InterchainTokenFactory.deployInterchainToken function data
 */
export const encodeInterchainTokenFactoryDeployInterchainTokenData = ({
  salt,
  name,
  symbol,
  decimals,
  mintAmount,
  distributor,
}: InterchainTokenFactoryDeployInterchainTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "deployInterchainToken",
    abi: ABI_FILE.abi,
    args: [salt, name, symbol, decimals, mintAmount, distributor],
  });

export type InterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs = {
  originalChain: string;
  originalTokenAddress: `0x${string}`;
  destinationChain: string;
  gasValue: bigint;
};

/**
 * Factory function for InterchainTokenFactory.deployRemoteCanonicalInterchainToken function args
 */
export const encodeInterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs =
  ({
    originalChain,
    originalTokenAddress,
    destinationChain,
    gasValue,
  }: InterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs) =>
    [originalChain, originalTokenAddress, destinationChain, gasValue] as const;

/**
 * Encoder function for InterchainTokenFactory.deployRemoteCanonicalInterchainToken function data
 */
export const encodeInterchainTokenFactoryDeployRemoteCanonicalInterchainTokenData =
  ({
    originalChain,
    originalTokenAddress,
    destinationChain,
    gasValue,
  }: InterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs): `0x${string}` =>
    encodeFunctionData({
      functionName: "deployRemoteCanonicalInterchainToken",
      abi: ABI_FILE.abi,
      args: [originalChain, originalTokenAddress, destinationChain, gasValue],
    });

export type InterchainTokenFactoryDeployRemoteInterchainTokenArgs = {
  originalChainName: string;
  salt: `0x${string}`;
  distributor: `0x${string}`;
  destinationChain: string;
  gasValue: bigint;
};

/**
 * Factory function for InterchainTokenFactory.deployRemoteInterchainToken function args
 */
export const encodeInterchainTokenFactoryDeployRemoteInterchainTokenArgs = ({
  originalChainName,
  salt,
  distributor,
  destinationChain,
  gasValue,
}: InterchainTokenFactoryDeployRemoteInterchainTokenArgs) =>
  [originalChainName, salt, distributor, destinationChain, gasValue] as const;

/**
 * Encoder function for InterchainTokenFactory.deployRemoteInterchainToken function data
 */
export const encodeInterchainTokenFactoryDeployRemoteInterchainTokenData = ({
  originalChainName,
  salt,
  distributor,
  destinationChain,
  gasValue,
}: InterchainTokenFactoryDeployRemoteInterchainTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "deployRemoteInterchainToken",
    abi: ABI_FILE.abi,
    args: [originalChainName, salt, distributor, destinationChain, gasValue],
  });

export type InterchainTokenFactoryInterchainTokenAddressArgs = {
  deployer: `0x${string}`;
  salt: `0x${string}`;
};

/**
 * Factory function for InterchainTokenFactory.interchainTokenAddress function args
 */
export const encodeInterchainTokenFactoryInterchainTokenAddressArgs = ({
  deployer,
  salt,
}: InterchainTokenFactoryInterchainTokenAddressArgs) =>
  [deployer, salt] as const;

/**
 * Encoder function for InterchainTokenFactory.interchainTokenAddress function data
 */
export const encodeInterchainTokenFactoryInterchainTokenAddressData = ({
  deployer,
  salt,
}: InterchainTokenFactoryInterchainTokenAddressArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "interchainTokenAddress",
    abi: ABI_FILE.abi,
    args: [deployer, salt],
  });

export type InterchainTokenFactoryInterchainTokenIdArgs = {
  deployer: `0x${string}`;
  salt: `0x${string}`;
};

/**
 * Factory function for InterchainTokenFactory.interchainTokenId function args
 */
export const encodeInterchainTokenFactoryInterchainTokenIdArgs = ({
  deployer,
  salt,
}: InterchainTokenFactoryInterchainTokenIdArgs) => [deployer, salt] as const;

/**
 * Encoder function for InterchainTokenFactory.interchainTokenId function data
 */
export const encodeInterchainTokenFactoryInterchainTokenIdData = ({
  deployer,
  salt,
}: InterchainTokenFactoryInterchainTokenIdArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "interchainTokenId",
    abi: ABI_FILE.abi,
    args: [deployer, salt],
  });

export type InterchainTokenFactoryInterchainTokenSaltArgs = {
  chainNameHash_: `0x${string}`;
  deployer: `0x${string}`;
  salt: `0x${string}`;
};

/**
 * Factory function for InterchainTokenFactory.interchainTokenSalt function args
 */
export const encodeInterchainTokenFactoryInterchainTokenSaltArgs = ({
  chainNameHash_,
  deployer,
  salt,
}: InterchainTokenFactoryInterchainTokenSaltArgs) =>
  [chainNameHash_, deployer, salt] as const;

/**
 * Encoder function for InterchainTokenFactory.interchainTokenSalt function data
 */
export const encodeInterchainTokenFactoryInterchainTokenSaltData = ({
  chainNameHash_,
  deployer,
  salt,
}: InterchainTokenFactoryInterchainTokenSaltArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "interchainTokenSalt",
    abi: ABI_FILE.abi,
    args: [chainNameHash_, deployer, salt],
  });

export type InterchainTokenFactoryInterchainTransferArgs = {
  tokenId: `0x${string}`;
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  gasValue: bigint;
};

/**
 * Factory function for InterchainTokenFactory.interchainTransfer function args
 */
export const encodeInterchainTokenFactoryInterchainTransferArgs = ({
  tokenId,
  destinationChain,
  destinationAddress,
  amount,
  gasValue,
}: InterchainTokenFactoryInterchainTransferArgs) =>
  [tokenId, destinationChain, destinationAddress, amount, gasValue] as const;

/**
 * Encoder function for InterchainTokenFactory.interchainTransfer function data
 */
export const encodeInterchainTokenFactoryInterchainTransferData = ({
  tokenId,
  destinationChain,
  destinationAddress,
  amount,
  gasValue,
}: InterchainTokenFactoryInterchainTransferArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "interchainTransfer",
    abi: ABI_FILE.abi,
    args: [tokenId, destinationChain, destinationAddress, amount, gasValue],
  });

export type InterchainTokenFactoryMulticallArgs = { data: any };

/**
 * Factory function for InterchainTokenFactory.multicall function args
 */
export const encodeInterchainTokenFactoryMulticallArgs = ({
  data,
}: InterchainTokenFactoryMulticallArgs) => [data] as const;

/**
 * Encoder function for InterchainTokenFactory.multicall function data
 */
export const encodeInterchainTokenFactoryMulticallData = ({
  data,
}: InterchainTokenFactoryMulticallArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "multicall",
    abi: ABI_FILE.abi,
    args: [data],
  });

export type InterchainTokenFactoryProposeOwnershipArgs = {
  newOwner: `0x${string}`;
};

/**
 * Factory function for InterchainTokenFactory.proposeOwnership function args
 */
export const encodeInterchainTokenFactoryProposeOwnershipArgs = ({
  newOwner,
}: InterchainTokenFactoryProposeOwnershipArgs) => [newOwner] as const;

/**
 * Encoder function for InterchainTokenFactory.proposeOwnership function data
 */
export const encodeInterchainTokenFactoryProposeOwnershipData = ({
  newOwner,
}: InterchainTokenFactoryProposeOwnershipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "proposeOwnership",
    abi: ABI_FILE.abi,
    args: [newOwner],
  });

export type InterchainTokenFactoryRegisterCanonicalInterchainTokenArgs = {
  tokenAddress: `0x${string}`;
};

/**
 * Factory function for InterchainTokenFactory.registerCanonicalInterchainToken function args
 */
export const encodeInterchainTokenFactoryRegisterCanonicalInterchainTokenArgs =
  ({
    tokenAddress,
  }: InterchainTokenFactoryRegisterCanonicalInterchainTokenArgs) =>
    [tokenAddress] as const;

/**
 * Encoder function for InterchainTokenFactory.registerCanonicalInterchainToken function data
 */
export const encodeInterchainTokenFactoryRegisterCanonicalInterchainTokenData =
  ({
    tokenAddress,
  }: InterchainTokenFactoryRegisterCanonicalInterchainTokenArgs): `0x${string}` =>
    encodeFunctionData({
      functionName: "registerCanonicalInterchainToken",
      abi: ABI_FILE.abi,
      args: [tokenAddress],
    });

export type InterchainTokenFactorySetupArgs = { data: `0x${string}` };

/**
 * Factory function for InterchainTokenFactory.setup function args
 */
export const encodeInterchainTokenFactorySetupArgs = ({
  data,
}: InterchainTokenFactorySetupArgs) => [data] as const;

/**
 * Encoder function for InterchainTokenFactory.setup function data
 */
export const encodeInterchainTokenFactorySetupData = ({
  data,
}: InterchainTokenFactorySetupArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setup",
    abi: ABI_FILE.abi,
    args: [data],
  });

export type InterchainTokenFactoryTokenApproveArgs = {
  tokenId: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for InterchainTokenFactory.tokenApprove function args
 */
export const encodeInterchainTokenFactoryTokenApproveArgs = ({
  tokenId,
  amount,
}: InterchainTokenFactoryTokenApproveArgs) => [tokenId, amount] as const;

/**
 * Encoder function for InterchainTokenFactory.tokenApprove function data
 */
export const encodeInterchainTokenFactoryTokenApproveData = ({
  tokenId,
  amount,
}: InterchainTokenFactoryTokenApproveArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "tokenApprove",
    abi: ABI_FILE.abi,
    args: [tokenId, amount],
  });

export type InterchainTokenFactoryTokenTransferFromArgs = {
  tokenId: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for InterchainTokenFactory.tokenTransferFrom function args
 */
export const encodeInterchainTokenFactoryTokenTransferFromArgs = ({
  tokenId,
  amount,
}: InterchainTokenFactoryTokenTransferFromArgs) => [tokenId, amount] as const;

/**
 * Encoder function for InterchainTokenFactory.tokenTransferFrom function data
 */
export const encodeInterchainTokenFactoryTokenTransferFromData = ({
  tokenId,
  amount,
}: InterchainTokenFactoryTokenTransferFromArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "tokenTransferFrom",
    abi: ABI_FILE.abi,
    args: [tokenId, amount],
  });

export type InterchainTokenFactoryTransferOwnershipArgs = {
  newOwner: `0x${string}`;
};

/**
 * Factory function for InterchainTokenFactory.transferOwnership function args
 */
export const encodeInterchainTokenFactoryTransferOwnershipArgs = ({
  newOwner,
}: InterchainTokenFactoryTransferOwnershipArgs) => [newOwner] as const;

/**
 * Encoder function for InterchainTokenFactory.transferOwnership function data
 */
export const encodeInterchainTokenFactoryTransferOwnershipData = ({
  newOwner,
}: InterchainTokenFactoryTransferOwnershipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transferOwnership",
    abi: ABI_FILE.abi,
    args: [newOwner],
  });

export type InterchainTokenFactoryUpgradeArgs = {
  newImplementation: `0x${string}`;
  newImplementationCodeHash: `0x${string}`;
  params: `0x${string}`;
};

/**
 * Factory function for InterchainTokenFactory.upgrade function args
 */
export const encodeInterchainTokenFactoryUpgradeArgs = ({
  newImplementation,
  newImplementationCodeHash,
  params,
}: InterchainTokenFactoryUpgradeArgs) =>
  [newImplementation, newImplementationCodeHash, params] as const;

/**
 * Encoder function for InterchainTokenFactory.upgrade function data
 */
export const encodeInterchainTokenFactoryUpgradeData = ({
  newImplementation,
  newImplementationCodeHash,
  params,
}: InterchainTokenFactoryUpgradeArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "upgrade",
    abi: ABI_FILE.abi,
    args: [newImplementation, newImplementationCodeHash, params],
  });

export const INTERCHAIN_TOKEN_FACTORY_ENCODERS = {
  canonicalInterchainTokenId:
    encodeInterchainTokenFactoryCanonicalInterchainTokenIdArgs,
  canonicalInterchainTokenSalt:
    encodeInterchainTokenFactoryCanonicalInterchainTokenSaltArgs,
  deployInterchainToken: encodeInterchainTokenFactoryDeployInterchainTokenArgs,
  deployRemoteCanonicalInterchainToken:
    encodeInterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs,
  deployRemoteInterchainToken:
    encodeInterchainTokenFactoryDeployRemoteInterchainTokenArgs,
  interchainTokenAddress:
    encodeInterchainTokenFactoryInterchainTokenAddressArgs,
  interchainTokenId: encodeInterchainTokenFactoryInterchainTokenIdArgs,
  interchainTokenSalt: encodeInterchainTokenFactoryInterchainTokenSaltArgs,
  interchainTransfer: encodeInterchainTokenFactoryInterchainTransferArgs,
  multicall: encodeInterchainTokenFactoryMulticallArgs,
  proposeOwnership: encodeInterchainTokenFactoryProposeOwnershipArgs,
  registerCanonicalInterchainToken:
    encodeInterchainTokenFactoryRegisterCanonicalInterchainTokenArgs,
  setup: encodeInterchainTokenFactorySetupArgs,
  tokenApprove: encodeInterchainTokenFactoryTokenApproveArgs,
  tokenTransferFrom: encodeInterchainTokenFactoryTokenTransferFromArgs,
  transferOwnership: encodeInterchainTokenFactoryTransferOwnershipArgs,
  upgrade: encodeInterchainTokenFactoryUpgradeArgs,
};
