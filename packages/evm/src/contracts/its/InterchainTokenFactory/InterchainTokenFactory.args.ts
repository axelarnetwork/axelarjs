/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - node_modules/@axelar-network/interchain-token-service/artifacts/contracts/InterchainTokenFactory.sol/InterchainTokenFactory.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import type { PublicContractClient } from "../../PublicContractClient";
import ABI_FILE from "./InterchainTokenFactory.abi";

export type InterchainTokenFactoryApproveDeployRemoteInterchainTokenArgs = {
  deployer: `0x${string}`;
  salt: `0x${string}`;
  destinationChain: string;
  destinationMinter: `0x${string}`;
};

/**
 * Factory function for InterchainTokenFactory.approveDeployRemoteInterchainToken function args
 */
export const encodeInterchainTokenFactoryApproveDeployRemoteInterchainTokenArgs =
  ({
    deployer,
    salt,
    destinationChain,
    destinationMinter,
  }: InterchainTokenFactoryApproveDeployRemoteInterchainTokenArgs) =>
    [deployer, salt, destinationChain, destinationMinter] as const;

/**
 * Encoder function for InterchainTokenFactory.approveDeployRemoteInterchainToken function data
 */
export const encodeInterchainTokenFactoryApproveDeployRemoteInterchainTokenData =
  ({
    deployer,
    salt,
    destinationChain,
    destinationMinter,
  }: InterchainTokenFactoryApproveDeployRemoteInterchainTokenArgs): `0x${string}` =>
    encodeFunctionData({
      functionName: "approveDeployRemoteInterchainToken",
      abi: ABI_FILE.abi,
      args: [deployer, salt, destinationChain, destinationMinter],
    });

export type InterchainTokenFactoryCanonicalInterchainTokenDeploySaltArgs = {
  tokenAddress: `0x${string}`;
};

/**
 * Factory function for InterchainTokenFactory.canonicalInterchainTokenDeploySalt function args
 */
export const encodeInterchainTokenFactoryCanonicalInterchainTokenDeploySaltArgs =
  ({
    tokenAddress,
  }: InterchainTokenFactoryCanonicalInterchainTokenDeploySaltArgs) =>
    [tokenAddress] as const;

/**
 * Encoder function for InterchainTokenFactory.canonicalInterchainTokenDeploySalt function data
 */
export const encodeInterchainTokenFactoryCanonicalInterchainTokenDeploySaltData =
  ({
    tokenAddress,
  }: InterchainTokenFactoryCanonicalInterchainTokenDeploySaltArgs): `0x${string}` =>
    encodeFunctionData({
      functionName: "canonicalInterchainTokenDeploySalt",
      abi: ABI_FILE.abi,
      args: [tokenAddress],
    });

export type InterchainTokenFactoryCanonicalInterchainTokenIdArgs = {
  tokenAddress: `0x${string}`;
};

/**
 * Factory function for InterchainTokenFactory.canonicalInterchainTokenId function args
 */
export const encodeInterchainTokenFactoryCanonicalInterchainTokenIdArgs = ({
  tokenAddress,
}: InterchainTokenFactoryCanonicalInterchainTokenIdArgs) =>
  [tokenAddress] as const;

/**
 * Encoder function for InterchainTokenFactory.canonicalInterchainTokenId function data
 */
export const encodeInterchainTokenFactoryCanonicalInterchainTokenIdData = ({
  tokenAddress,
}: InterchainTokenFactoryCanonicalInterchainTokenIdArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "canonicalInterchainTokenId",
    abi: ABI_FILE.abi,
    args: [tokenAddress],
  });

export type InterchainTokenFactoryDeployInterchainTokenArgs = {
  salt: `0x${string}`;
  name: string;
  symbol: string;
  decimals: number;
  initialSupply: bigint;
  minter: `0x${string}`;
};

/**
 * Factory function for InterchainTokenFactory.deployInterchainToken function args
 */
export const encodeInterchainTokenFactoryDeployInterchainTokenArgs = ({
  salt,
  name,
  symbol,
  decimals,
  initialSupply,
  minter,
}: InterchainTokenFactoryDeployInterchainTokenArgs) =>
  [salt, name, symbol, decimals, initialSupply, minter] as const;

/**
 * Encoder function for InterchainTokenFactory.deployInterchainToken function data
 */
export const encodeInterchainTokenFactoryDeployInterchainTokenData = ({
  salt,
  name,
  symbol,
  decimals,
  initialSupply,
  minter,
}: InterchainTokenFactoryDeployInterchainTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "deployInterchainToken",
    abi: ABI_FILE.abi,
    args: [salt, name, symbol, decimals, initialSupply, minter],
  });

export type InterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs2 = {
  originalChain: string;
  originalTokenAddress: `0x${string}`;
  destinationChain: string;
  gasValue: bigint;
};

/**
 * Factory function for InterchainTokenFactory.deployRemoteCanonicalInterchainToken function args
 */
export const encodeInterchainTokenFactoryDeployRemoteCanonicalInterchainToken2Args =
  ({
    originalChain,
    originalTokenAddress,
    destinationChain,
    gasValue,
  }: InterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs2) =>
    [originalChain, originalTokenAddress, destinationChain, gasValue] as const;

/**
 * Encoder function for InterchainTokenFactory.deployRemoteCanonicalInterchainToken function data
 */
export const encodeInterchainTokenFactoryDeployRemoteCanonicalInterchainToken2Data =
  ({
    originalChain,
    originalTokenAddress,
    destinationChain,
    gasValue,
  }: InterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs2): `0x${string}` =>
    encodeFunctionData({
      functionName: "deployRemoteCanonicalInterchainToken",
      abi: ABI_FILE.abi,
      args: [originalChain, originalTokenAddress, destinationChain, gasValue],
    });

export type InterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs = {
  originalTokenAddress: `0x${string}`;
  destinationChain: string;
  gasValue: bigint;
};

/**
 * Factory function for InterchainTokenFactory.deployRemoteCanonicalInterchainToken function args
 */
export const encodeInterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs =
  ({
    originalTokenAddress,
    destinationChain,
    gasValue,
  }: InterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs) =>
    [originalTokenAddress, destinationChain, gasValue] as const;

/**
 * Encoder function for InterchainTokenFactory.deployRemoteCanonicalInterchainToken function data
 */
export const encodeInterchainTokenFactoryDeployRemoteCanonicalInterchainTokenData =
  ({
    originalTokenAddress,
    destinationChain,
    gasValue,
  }: InterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs): `0x${string}` =>
    encodeFunctionData({
      functionName: "deployRemoteCanonicalInterchainToken",
      abi: ABI_FILE.abi,
      args: [originalTokenAddress, destinationChain, gasValue],
    });

export type InterchainTokenFactoryDeployRemoteInterchainTokenArgs = {
  salt: `0x${string}`;
  destinationChain: string;
  gasValue: bigint;
};

/**
 * Factory function for InterchainTokenFactory.deployRemoteInterchainToken function args
 */
export const encodeInterchainTokenFactoryDeployRemoteInterchainTokenArgs = ({
  salt,
  destinationChain,
  gasValue,
}: InterchainTokenFactoryDeployRemoteInterchainTokenArgs) =>
  [salt, destinationChain, gasValue] as const;

/**
 * Encoder function for InterchainTokenFactory.deployRemoteInterchainToken function data
 */
export const encodeInterchainTokenFactoryDeployRemoteInterchainTokenData = ({
  salt,
  destinationChain,
  gasValue,
}: InterchainTokenFactoryDeployRemoteInterchainTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "deployRemoteInterchainToken",
    abi: ABI_FILE.abi,
    args: [salt, destinationChain, gasValue],
  });

export type InterchainTokenFactoryDeployRemoteInterchainTokenArgs2 = {
  originalChainName: string;
  salt: `0x${string}`;
  minter: `0x${string}`;
  destinationChain: string;
  gasValue: bigint;
};

/**
 * Factory function for InterchainTokenFactory.deployRemoteInterchainToken function args
 */
export const encodeInterchainTokenFactoryDeployRemoteInterchainToken2Args = ({
  originalChainName,
  salt,
  minter,
  destinationChain,
  gasValue,
}: InterchainTokenFactoryDeployRemoteInterchainTokenArgs2) =>
  [originalChainName, salt, minter, destinationChain, gasValue] as const;

/**
 * Encoder function for InterchainTokenFactory.deployRemoteInterchainToken function data
 */
export const encodeInterchainTokenFactoryDeployRemoteInterchainToken2Data = ({
  originalChainName,
  salt,
  minter,
  destinationChain,
  gasValue,
}: InterchainTokenFactoryDeployRemoteInterchainTokenArgs2): `0x${string}` =>
  encodeFunctionData({
    functionName: "deployRemoteInterchainToken",
    abi: ABI_FILE.abi,
    args: [originalChainName, salt, minter, destinationChain, gasValue],
  });

export type InterchainTokenFactoryDeployRemoteInterchainTokenWithMinterArgs = {
  salt: `0x${string}`;
  minter: `0x${string}`;
  destinationChain: string;
  destinationMinter: `0x${string}`;
  gasValue: bigint;
};

/**
 * Factory function for InterchainTokenFactory.deployRemoteInterchainTokenWithMinter function args
 */
export const encodeInterchainTokenFactoryDeployRemoteInterchainTokenWithMinterArgs =
  ({
    salt,
    minter,
    destinationChain,
    destinationMinter,
    gasValue,
  }: InterchainTokenFactoryDeployRemoteInterchainTokenWithMinterArgs) =>
    [salt, minter, destinationChain, destinationMinter, gasValue] as const;

/**
 * Encoder function for InterchainTokenFactory.deployRemoteInterchainTokenWithMinter function data
 */
export const encodeInterchainTokenFactoryDeployRemoteInterchainTokenWithMinterData =
  ({
    salt,
    minter,
    destinationChain,
    destinationMinter,
    gasValue,
  }: InterchainTokenFactoryDeployRemoteInterchainTokenWithMinterArgs): `0x${string}` =>
    encodeFunctionData({
      functionName: "deployRemoteInterchainTokenWithMinter",
      abi: ABI_FILE.abi,
      args: [salt, minter, destinationChain, destinationMinter, gasValue],
    });

export type InterchainTokenFactoryInterchainTokenDeploySaltArgs = {
  deployer: `0x${string}`;
  salt: `0x${string}`;
};

/**
 * Factory function for InterchainTokenFactory.interchainTokenDeploySalt function args
 */
export const encodeInterchainTokenFactoryInterchainTokenDeploySaltArgs = ({
  deployer,
  salt,
}: InterchainTokenFactoryInterchainTokenDeploySaltArgs) =>
  [deployer, salt] as const;

/**
 * Encoder function for InterchainTokenFactory.interchainTokenDeploySalt function data
 */
export const encodeInterchainTokenFactoryInterchainTokenDeploySaltData = ({
  deployer,
  salt,
}: InterchainTokenFactoryInterchainTokenDeploySaltArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "interchainTokenDeploySalt",
    abi: ABI_FILE.abi,
    args: [deployer, salt],
  });

export type InterchainTokenFactoryInterchainTokenIdArgs = {
  deployer: `0x${string}`;
  salt: `0x${string}`;
};

/**
 * Factory function for InterchainTokenFactory.interchainTokenId function args
 */
export const encodeInterchainTokenFactoryInterchainTokenIdArgs = ({
  deployer,
  salt,
}: InterchainTokenFactoryInterchainTokenIdArgs) => [deployer, salt] as const;

/**
 * Encoder function for InterchainTokenFactory.interchainTokenId function data
 */
export const encodeInterchainTokenFactoryInterchainTokenIdData = ({
  deployer,
  salt,
}: InterchainTokenFactoryInterchainTokenIdArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "interchainTokenId",
    abi: ABI_FILE.abi,
    args: [deployer, salt],
  });

export type InterchainTokenFactoryLinkTokenArgs = {
  salt: `0x${string}`;
  destinationChain: string;
  destinationTokenAddress: `0x${string}`;
  tokenManagerType: number;
  linkParams: `0x${string}`;
  gasValue: bigint;
};

/**
 * Factory function for InterchainTokenFactory.linkToken function args
 */
export const encodeInterchainTokenFactoryLinkTokenArgs = ({
  salt,
  destinationChain,
  destinationTokenAddress,
  tokenManagerType,
  linkParams,
  gasValue,
}: InterchainTokenFactoryLinkTokenArgs) =>
  [
    salt,
    destinationChain,
    destinationTokenAddress,
    tokenManagerType,
    linkParams,
    gasValue,
  ] as const;

/**
 * Encoder function for InterchainTokenFactory.linkToken function data
 */
export const encodeInterchainTokenFactoryLinkTokenData = ({
  salt,
  destinationChain,
  destinationTokenAddress,
  tokenManagerType,
  linkParams,
  gasValue,
}: InterchainTokenFactoryLinkTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "linkToken",
    abi: ABI_FILE.abi,
    args: [
      salt,
      destinationChain,
      destinationTokenAddress,
      tokenManagerType,
      linkParams,
      gasValue,
    ],
  });

export type InterchainTokenFactoryLinkedTokenDeploySaltArgs = {
  deployer: `0x${string}`;
  salt: `0x${string}`;
};

/**
 * Factory function for InterchainTokenFactory.linkedTokenDeploySalt function args
 */
export const encodeInterchainTokenFactoryLinkedTokenDeploySaltArgs = ({
  deployer,
  salt,
}: InterchainTokenFactoryLinkedTokenDeploySaltArgs) =>
  [deployer, salt] as const;

/**
 * Encoder function for InterchainTokenFactory.linkedTokenDeploySalt function data
 */
export const encodeInterchainTokenFactoryLinkedTokenDeploySaltData = ({
  deployer,
  salt,
}: InterchainTokenFactoryLinkedTokenDeploySaltArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "linkedTokenDeploySalt",
    abi: ABI_FILE.abi,
    args: [deployer, salt],
  });

export type InterchainTokenFactoryLinkedTokenIdArgs = {
  deployer: `0x${string}`;
  salt: `0x${string}`;
};

/**
 * Factory function for InterchainTokenFactory.linkedTokenId function args
 */
export const encodeInterchainTokenFactoryLinkedTokenIdArgs = ({
  deployer,
  salt,
}: InterchainTokenFactoryLinkedTokenIdArgs) => [deployer, salt] as const;

/**
 * Encoder function for InterchainTokenFactory.linkedTokenId function data
 */
export const encodeInterchainTokenFactoryLinkedTokenIdData = ({
  deployer,
  salt,
}: InterchainTokenFactoryLinkedTokenIdArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "linkedTokenId",
    abi: ABI_FILE.abi,
    args: [deployer, salt],
  });

export type InterchainTokenFactoryMulticallArgs = { data: any };

/**
 * Factory function for InterchainTokenFactory.multicall function args
 */
export const encodeInterchainTokenFactoryMulticallArgs = ({
  data,
}: InterchainTokenFactoryMulticallArgs) => [data] as const;

/**
 * Encoder function for InterchainTokenFactory.multicall function data
 */
export const encodeInterchainTokenFactoryMulticallData = ({
  data,
}: InterchainTokenFactoryMulticallArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "multicall",
    abi: ABI_FILE.abi,
    args: [data],
  });

export type InterchainTokenFactoryProposeOwnershipArgs = {
  newOwner: `0x${string}`;
};

/**
 * Factory function for InterchainTokenFactory.proposeOwnership function args
 */
export const encodeInterchainTokenFactoryProposeOwnershipArgs = ({
  newOwner,
}: InterchainTokenFactoryProposeOwnershipArgs) => [newOwner] as const;

/**
 * Encoder function for InterchainTokenFactory.proposeOwnership function data
 */
export const encodeInterchainTokenFactoryProposeOwnershipData = ({
  newOwner,
}: InterchainTokenFactoryProposeOwnershipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "proposeOwnership",
    abi: ABI_FILE.abi,
    args: [newOwner],
  });

export type InterchainTokenFactoryRegisterCanonicalInterchainTokenArgs = {
  tokenAddress: `0x${string}`;
};

/**
 * Factory function for InterchainTokenFactory.registerCanonicalInterchainToken function args
 */
export const encodeInterchainTokenFactoryRegisterCanonicalInterchainTokenArgs =
  ({
    tokenAddress,
  }: InterchainTokenFactoryRegisterCanonicalInterchainTokenArgs) =>
    [tokenAddress] as const;

/**
 * Encoder function for InterchainTokenFactory.registerCanonicalInterchainToken function data
 */
export const encodeInterchainTokenFactoryRegisterCanonicalInterchainTokenData =
  ({
    tokenAddress,
  }: InterchainTokenFactoryRegisterCanonicalInterchainTokenArgs): `0x${string}` =>
    encodeFunctionData({
      functionName: "registerCanonicalInterchainToken",
      abi: ABI_FILE.abi,
      args: [tokenAddress],
    });

export type InterchainTokenFactoryRegisterCustomTokenArgs = {
  salt: `0x${string}`;
  tokenAddress: `0x${string}`;
  tokenManagerType: number;
  operator: `0x${string}`;
};

/**
 * Factory function for InterchainTokenFactory.registerCustomToken function args
 */
export const encodeInterchainTokenFactoryRegisterCustomTokenArgs = ({
  salt,
  tokenAddress,
  tokenManagerType,
  operator,
}: InterchainTokenFactoryRegisterCustomTokenArgs) =>
  [salt, tokenAddress, tokenManagerType, operator] as const;

/**
 * Encoder function for InterchainTokenFactory.registerCustomToken function data
 */
export const encodeInterchainTokenFactoryRegisterCustomTokenData = ({
  salt,
  tokenAddress,
  tokenManagerType,
  operator,
}: InterchainTokenFactoryRegisterCustomTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "registerCustomToken",
    abi: ABI_FILE.abi,
    args: [salt, tokenAddress, tokenManagerType, operator],
  });

export type InterchainTokenFactoryRevokeDeployRemoteInterchainTokenArgs = {
  deployer: `0x${string}`;
  salt: `0x${string}`;
  destinationChain: string;
};

/**
 * Factory function for InterchainTokenFactory.revokeDeployRemoteInterchainToken function args
 */
export const encodeInterchainTokenFactoryRevokeDeployRemoteInterchainTokenArgs =
  ({
    deployer,
    salt,
    destinationChain,
  }: InterchainTokenFactoryRevokeDeployRemoteInterchainTokenArgs) =>
    [deployer, salt, destinationChain] as const;

/**
 * Encoder function for InterchainTokenFactory.revokeDeployRemoteInterchainToken function data
 */
export const encodeInterchainTokenFactoryRevokeDeployRemoteInterchainTokenData =
  ({
    deployer,
    salt,
    destinationChain,
  }: InterchainTokenFactoryRevokeDeployRemoteInterchainTokenArgs): `0x${string}` =>
    encodeFunctionData({
      functionName: "revokeDeployRemoteInterchainToken",
      abi: ABI_FILE.abi,
      args: [deployer, salt, destinationChain],
    });

export type InterchainTokenFactorySetupArgs = { data: `0x${string}` };

/**
 * Factory function for InterchainTokenFactory.setup function args
 */
export const encodeInterchainTokenFactorySetupArgs = ({
  data,
}: InterchainTokenFactorySetupArgs) => [data] as const;

/**
 * Encoder function for InterchainTokenFactory.setup function data
 */
export const encodeInterchainTokenFactorySetupData = ({
  data,
}: InterchainTokenFactorySetupArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setup",
    abi: ABI_FILE.abi,
    args: [data],
  });

export type InterchainTokenFactoryTransferOwnershipArgs = {
  newOwner: `0x${string}`;
};

/**
 * Factory function for InterchainTokenFactory.transferOwnership function args
 */
export const encodeInterchainTokenFactoryTransferOwnershipArgs = ({
  newOwner,
}: InterchainTokenFactoryTransferOwnershipArgs) => [newOwner] as const;

/**
 * Encoder function for InterchainTokenFactory.transferOwnership function data
 */
export const encodeInterchainTokenFactoryTransferOwnershipData = ({
  newOwner,
}: InterchainTokenFactoryTransferOwnershipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transferOwnership",
    abi: ABI_FILE.abi,
    args: [newOwner],
  });

export type InterchainTokenFactoryUpgradeArgs = {
  newImplementation: `0x${string}`;
  newImplementationCodeHash: `0x${string}`;
  params: `0x${string}`;
};

/**
 * Factory function for InterchainTokenFactory.upgrade function args
 */
export const encodeInterchainTokenFactoryUpgradeArgs = ({
  newImplementation,
  newImplementationCodeHash,
  params,
}: InterchainTokenFactoryUpgradeArgs) =>
  [newImplementation, newImplementationCodeHash, params] as const;

/**
 * Encoder function for InterchainTokenFactory.upgrade function data
 */
export const encodeInterchainTokenFactoryUpgradeData = ({
  newImplementation,
  newImplementationCodeHash,
  params,
}: InterchainTokenFactoryUpgradeArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "upgrade",
    abi: ABI_FILE.abi,
    args: [newImplementation, newImplementationCodeHash, params],
  });

export const INTERCHAIN_TOKEN_FACTORY_ENCODERS = {
  approveDeployRemoteInterchainToken: {
    args: encodeInterchainTokenFactoryApproveDeployRemoteInterchainTokenArgs,
    data: encodeInterchainTokenFactoryApproveDeployRemoteInterchainTokenData,
  },
  canonicalInterchainTokenDeploySalt: {
    args: encodeInterchainTokenFactoryCanonicalInterchainTokenDeploySaltArgs,
    data: encodeInterchainTokenFactoryCanonicalInterchainTokenDeploySaltData,
  },
  canonicalInterchainTokenId: {
    args: encodeInterchainTokenFactoryCanonicalInterchainTokenIdArgs,
    data: encodeInterchainTokenFactoryCanonicalInterchainTokenIdData,
  },
  deployInterchainToken: {
    args: encodeInterchainTokenFactoryDeployInterchainTokenArgs,
    data: encodeInterchainTokenFactoryDeployInterchainTokenData,
  },
  deployRemoteCanonicalInterchainToken2: {
    args: encodeInterchainTokenFactoryDeployRemoteCanonicalInterchainToken2Args,
    data: encodeInterchainTokenFactoryDeployRemoteCanonicalInterchainToken2Data,
  },
  deployRemoteCanonicalInterchainToken: {
    args: encodeInterchainTokenFactoryDeployRemoteCanonicalInterchainTokenArgs,
    data: encodeInterchainTokenFactoryDeployRemoteCanonicalInterchainTokenData,
  },
  deployRemoteInterchainToken: {
    args: encodeInterchainTokenFactoryDeployRemoteInterchainTokenArgs,
    data: encodeInterchainTokenFactoryDeployRemoteInterchainTokenData,
  },
  deployRemoteInterchainToken2: {
    args: encodeInterchainTokenFactoryDeployRemoteInterchainToken2Args,
    data: encodeInterchainTokenFactoryDeployRemoteInterchainToken2Data,
  },
  deployRemoteInterchainTokenWithMinter: {
    args: encodeInterchainTokenFactoryDeployRemoteInterchainTokenWithMinterArgs,
    data: encodeInterchainTokenFactoryDeployRemoteInterchainTokenWithMinterData,
  },
  interchainTokenDeploySalt: {
    args: encodeInterchainTokenFactoryInterchainTokenDeploySaltArgs,
    data: encodeInterchainTokenFactoryInterchainTokenDeploySaltData,
  },
  interchainTokenId: {
    args: encodeInterchainTokenFactoryInterchainTokenIdArgs,
    data: encodeInterchainTokenFactoryInterchainTokenIdData,
  },
  linkToken: {
    args: encodeInterchainTokenFactoryLinkTokenArgs,
    data: encodeInterchainTokenFactoryLinkTokenData,
  },
  linkedTokenDeploySalt: {
    args: encodeInterchainTokenFactoryLinkedTokenDeploySaltArgs,
    data: encodeInterchainTokenFactoryLinkedTokenDeploySaltData,
  },
  linkedTokenId: {
    args: encodeInterchainTokenFactoryLinkedTokenIdArgs,
    data: encodeInterchainTokenFactoryLinkedTokenIdData,
  },
  multicall: {
    args: encodeInterchainTokenFactoryMulticallArgs,
    data: encodeInterchainTokenFactoryMulticallData,
  },
  proposeOwnership: {
    args: encodeInterchainTokenFactoryProposeOwnershipArgs,
    data: encodeInterchainTokenFactoryProposeOwnershipData,
  },
  registerCanonicalInterchainToken: {
    args: encodeInterchainTokenFactoryRegisterCanonicalInterchainTokenArgs,
    data: encodeInterchainTokenFactoryRegisterCanonicalInterchainTokenData,
  },
  registerCustomToken: {
    args: encodeInterchainTokenFactoryRegisterCustomTokenArgs,
    data: encodeInterchainTokenFactoryRegisterCustomTokenData,
  },
  revokeDeployRemoteInterchainToken: {
    args: encodeInterchainTokenFactoryRevokeDeployRemoteInterchainTokenArgs,
    data: encodeInterchainTokenFactoryRevokeDeployRemoteInterchainTokenData,
  },
  setup: {
    args: encodeInterchainTokenFactorySetupArgs,
    data: encodeInterchainTokenFactorySetupData,
  },
  transferOwnership: {
    args: encodeInterchainTokenFactoryTransferOwnershipArgs,
    data: encodeInterchainTokenFactoryTransferOwnershipData,
  },
  upgrade: {
    args: encodeInterchainTokenFactoryUpgradeArgs,
    data: encodeInterchainTokenFactoryUpgradeData,
  },
};

export function createInterchainTokenFactoryReadClient(
  publicClient: PublicContractClient<typeof ABI_FILE.abi>,
) {
  return {
    canonicalInterchainTokenDeploySalt(
      canonicalInterchainTokenDeploySaltArgs: InterchainTokenFactoryCanonicalInterchainTokenDeploySaltArgs,
    ) {
      const encoder =
        INTERCHAIN_TOKEN_FACTORY_ENCODERS["canonicalInterchainTokenDeploySalt"];
      const encodedArgs = encoder.args(canonicalInterchainTokenDeploySaltArgs);

      return publicClient.read("canonicalInterchainTokenDeploySalt", {
        args: encodedArgs,
      });
    },
    canonicalInterchainTokenId(
      canonicalInterchainTokenIdArgs: InterchainTokenFactoryCanonicalInterchainTokenIdArgs,
    ) {
      const encoder =
        INTERCHAIN_TOKEN_FACTORY_ENCODERS["canonicalInterchainTokenId"];
      const encodedArgs = encoder.args(canonicalInterchainTokenIdArgs);

      return publicClient.read("canonicalInterchainTokenId", {
        args: encodedArgs,
      });
    },
    chainNameHash() {
      return publicClient.read("chainNameHash");
    },
    contractId() {
      return publicClient.read("contractId");
    },
    implementation() {
      return publicClient.read("implementation");
    },
    interchainTokenDeploySalt(
      interchainTokenDeploySaltArgs: InterchainTokenFactoryInterchainTokenDeploySaltArgs,
    ) {
      const encoder =
        INTERCHAIN_TOKEN_FACTORY_ENCODERS["interchainTokenDeploySalt"];
      const encodedArgs = encoder.args(interchainTokenDeploySaltArgs);

      return publicClient.read("interchainTokenDeploySalt", {
        args: encodedArgs,
      });
    },
    interchainTokenId(
      interchainTokenIdArgs: InterchainTokenFactoryInterchainTokenIdArgs,
    ) {
      const encoder = INTERCHAIN_TOKEN_FACTORY_ENCODERS["interchainTokenId"];
      const encodedArgs = encoder.args(interchainTokenIdArgs);

      return publicClient.read("interchainTokenId", { args: encodedArgs });
    },
    interchainTokenService() {
      return publicClient.read("interchainTokenService");
    },
    linkedTokenDeploySalt(
      linkedTokenDeploySaltArgs: InterchainTokenFactoryLinkedTokenDeploySaltArgs,
    ) {
      const encoder =
        INTERCHAIN_TOKEN_FACTORY_ENCODERS["linkedTokenDeploySalt"];
      const encodedArgs = encoder.args(linkedTokenDeploySaltArgs);

      return publicClient.read("linkedTokenDeploySalt", { args: encodedArgs });
    },
    linkedTokenId(linkedTokenIdArgs: InterchainTokenFactoryLinkedTokenIdArgs) {
      const encoder = INTERCHAIN_TOKEN_FACTORY_ENCODERS["linkedTokenId"];
      const encodedArgs = encoder.args(linkedTokenIdArgs);

      return publicClient.read("linkedTokenId", { args: encodedArgs });
    },
    owner() {
      return publicClient.read("owner");
    },
    pendingOwner() {
      return publicClient.read("pendingOwner");
    },
  };
}
