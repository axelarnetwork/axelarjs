/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - node_modules/@axelar-network/interchain-token-service/artifacts/contracts/token-manager/TokenManagerLockUnlockFee.sol/TokenManagerLockUnlockFee.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import ABI_FILE from "./TokenManagerLockUnlockFee.abi";

export type TokenManagerLockUnlockFeeAcceptOperatorshipArgs = {
  fromOperator: `0x${string}`;
};

/**
 * Factory function for TokenManagerLockUnlockFee.acceptOperatorship function args
 */
export const encodeTokenManagerLockUnlockFeeAcceptOperatorshipArgs = ({
  fromOperator,
}: TokenManagerLockUnlockFeeAcceptOperatorshipArgs) => [fromOperator] as const;

/**
 * Encoder function for TokenManagerLockUnlockFee.acceptOperatorship function data
 */
export const encodeTokenManagerLockUnlockFeeAcceptOperatorshipData = ({
  fromOperator,
}: TokenManagerLockUnlockFeeAcceptOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "acceptOperatorship",
    abi: ABI_FILE.abi,
    args: [fromOperator],
  });

export type TokenManagerLockUnlockFeeAddFlowLimiterArgs = {
  flowLimiter: `0x${string}`;
};

/**
 * Factory function for TokenManagerLockUnlockFee.addFlowLimiter function args
 */
export const encodeTokenManagerLockUnlockFeeAddFlowLimiterArgs = ({
  flowLimiter,
}: TokenManagerLockUnlockFeeAddFlowLimiterArgs) => [flowLimiter] as const;

/**
 * Encoder function for TokenManagerLockUnlockFee.addFlowLimiter function data
 */
export const encodeTokenManagerLockUnlockFeeAddFlowLimiterData = ({
  flowLimiter,
}: TokenManagerLockUnlockFeeAddFlowLimiterArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "addFlowLimiter",
    abi: ABI_FILE.abi,
    args: [flowLimiter],
  });

export type TokenManagerLockUnlockFeeCallContractWithInterchainTokenArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  data: `0x${string}`;
};

/**
 * Factory function for TokenManagerLockUnlockFee.callContractWithInterchainToken function args
 */
export const encodeTokenManagerLockUnlockFeeCallContractWithInterchainTokenArgs =
  ({
    destinationChain,
    destinationAddress,
    amount,
    data,
  }: TokenManagerLockUnlockFeeCallContractWithInterchainTokenArgs) =>
    [destinationChain, destinationAddress, amount, data] as const;

/**
 * Encoder function for TokenManagerLockUnlockFee.callContractWithInterchainToken function data
 */
export const encodeTokenManagerLockUnlockFeeCallContractWithInterchainTokenData =
  ({
    destinationChain,
    destinationAddress,
    amount,
    data,
  }: TokenManagerLockUnlockFeeCallContractWithInterchainTokenArgs): `0x${string}` =>
    encodeFunctionData({
      functionName: "callContractWithInterchainToken",
      abi: ABI_FILE.abi,
      args: [destinationChain, destinationAddress, amount, data],
    });

export type TokenManagerLockUnlockFeeGiveTokenArgs = {
  destinationAddress: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for TokenManagerLockUnlockFee.giveToken function args
 */
export const encodeTokenManagerLockUnlockFeeGiveTokenArgs = ({
  destinationAddress,
  amount,
}: TokenManagerLockUnlockFeeGiveTokenArgs) =>
  [destinationAddress, amount] as const;

/**
 * Encoder function for TokenManagerLockUnlockFee.giveToken function data
 */
export const encodeTokenManagerLockUnlockFeeGiveTokenData = ({
  destinationAddress,
  amount,
}: TokenManagerLockUnlockFeeGiveTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "giveToken",
    abi: ABI_FILE.abi,
    args: [destinationAddress, amount],
  });

export type TokenManagerLockUnlockFeeHasRoleArgs = {
  account: `0x${string}`;
  role: number;
};

/**
 * Factory function for TokenManagerLockUnlockFee.hasRole function args
 */
export const encodeTokenManagerLockUnlockFeeHasRoleArgs = ({
  account,
  role,
}: TokenManagerLockUnlockFeeHasRoleArgs) => [account, role] as const;

/**
 * Encoder function for TokenManagerLockUnlockFee.hasRole function data
 */
export const encodeTokenManagerLockUnlockFeeHasRoleData = ({
  account,
  role,
}: TokenManagerLockUnlockFeeHasRoleArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "hasRole",
    abi: ABI_FILE.abi,
    args: [account, role],
  });

export type TokenManagerLockUnlockFeeInterchainTransferArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for TokenManagerLockUnlockFee.interchainTransfer function args
 */
export const encodeTokenManagerLockUnlockFeeInterchainTransferArgs = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerLockUnlockFeeInterchainTransferArgs) =>
  [destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for TokenManagerLockUnlockFee.interchainTransfer function data
 */
export const encodeTokenManagerLockUnlockFeeInterchainTransferData = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerLockUnlockFeeInterchainTransferArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "interchainTransfer",
    abi: ABI_FILE.abi,
    args: [destinationChain, destinationAddress, amount, metadata],
  });

export type TokenManagerLockUnlockFeeIsOperatorArgs = { addr: `0x${string}` };

/**
 * Factory function for TokenManagerLockUnlockFee.isOperator function args
 */
export const encodeTokenManagerLockUnlockFeeIsOperatorArgs = ({
  addr,
}: TokenManagerLockUnlockFeeIsOperatorArgs) => [addr] as const;

/**
 * Encoder function for TokenManagerLockUnlockFee.isOperator function data
 */
export const encodeTokenManagerLockUnlockFeeIsOperatorData = ({
  addr,
}: TokenManagerLockUnlockFeeIsOperatorArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "isOperator",
    abi: ABI_FILE.abi,
    args: [addr],
  });

export type TokenManagerLockUnlockFeeParamsArgs = {
  operator_: `0x${string}`;
  tokenAddress_: `0x${string}`;
};

/**
 * Factory function for TokenManagerLockUnlockFee.params function args
 */
export const encodeTokenManagerLockUnlockFeeParamsArgs = ({
  operator_,
  tokenAddress_,
}: TokenManagerLockUnlockFeeParamsArgs) => [operator_, tokenAddress_] as const;

/**
 * Encoder function for TokenManagerLockUnlockFee.params function data
 */
export const encodeTokenManagerLockUnlockFeeParamsData = ({
  operator_,
  tokenAddress_,
}: TokenManagerLockUnlockFeeParamsArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "params",
    abi: ABI_FILE.abi,
    args: [operator_, tokenAddress_],
  });

export type TokenManagerLockUnlockFeeProposeOperatorshipArgs = {
  operator: `0x${string}`;
};

/**
 * Factory function for TokenManagerLockUnlockFee.proposeOperatorship function args
 */
export const encodeTokenManagerLockUnlockFeeProposeOperatorshipArgs = ({
  operator,
}: TokenManagerLockUnlockFeeProposeOperatorshipArgs) => [operator] as const;

/**
 * Encoder function for TokenManagerLockUnlockFee.proposeOperatorship function data
 */
export const encodeTokenManagerLockUnlockFeeProposeOperatorshipData = ({
  operator,
}: TokenManagerLockUnlockFeeProposeOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "proposeOperatorship",
    abi: ABI_FILE.abi,
    args: [operator],
  });

export type TokenManagerLockUnlockFeeRemoveFlowLimiterArgs = {
  flowLimiter: `0x${string}`;
};

/**
 * Factory function for TokenManagerLockUnlockFee.removeFlowLimiter function args
 */
export const encodeTokenManagerLockUnlockFeeRemoveFlowLimiterArgs = ({
  flowLimiter,
}: TokenManagerLockUnlockFeeRemoveFlowLimiterArgs) => [flowLimiter] as const;

/**
 * Encoder function for TokenManagerLockUnlockFee.removeFlowLimiter function data
 */
export const encodeTokenManagerLockUnlockFeeRemoveFlowLimiterData = ({
  flowLimiter,
}: TokenManagerLockUnlockFeeRemoveFlowLimiterArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "removeFlowLimiter",
    abi: ABI_FILE.abi,
    args: [flowLimiter],
  });

export type TokenManagerLockUnlockFeeSetFlowLimitArgs = { flowLimit_: bigint };

/**
 * Factory function for TokenManagerLockUnlockFee.setFlowLimit function args
 */
export const encodeTokenManagerLockUnlockFeeSetFlowLimitArgs = ({
  flowLimit_,
}: TokenManagerLockUnlockFeeSetFlowLimitArgs) => [flowLimit_] as const;

/**
 * Encoder function for TokenManagerLockUnlockFee.setFlowLimit function data
 */
export const encodeTokenManagerLockUnlockFeeSetFlowLimitData = ({
  flowLimit_,
}: TokenManagerLockUnlockFeeSetFlowLimitArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setFlowLimit",
    abi: ABI_FILE.abi,
    args: [flowLimit_],
  });

export type TokenManagerLockUnlockFeeSetupArgs = { params: `0x${string}` };

/**
 * Factory function for TokenManagerLockUnlockFee.setup function args
 */
export const encodeTokenManagerLockUnlockFeeSetupArgs = ({
  params,
}: TokenManagerLockUnlockFeeSetupArgs) => [params] as const;

/**
 * Encoder function for TokenManagerLockUnlockFee.setup function data
 */
export const encodeTokenManagerLockUnlockFeeSetupData = ({
  params,
}: TokenManagerLockUnlockFeeSetupArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setup",
    abi: ABI_FILE.abi,
    args: [params],
  });

export type TokenManagerLockUnlockFeeTakeTokenArgs = {
  sourceAddress: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for TokenManagerLockUnlockFee.takeToken function args
 */
export const encodeTokenManagerLockUnlockFeeTakeTokenArgs = ({
  sourceAddress,
  amount,
}: TokenManagerLockUnlockFeeTakeTokenArgs) => [sourceAddress, amount] as const;

/**
 * Encoder function for TokenManagerLockUnlockFee.takeToken function data
 */
export const encodeTokenManagerLockUnlockFeeTakeTokenData = ({
  sourceAddress,
  amount,
}: TokenManagerLockUnlockFeeTakeTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "takeToken",
    abi: ABI_FILE.abi,
    args: [sourceAddress, amount],
  });

export type TokenManagerLockUnlockFeeTransferOperatorshipArgs = {
  operator: `0x${string}`;
};

/**
 * Factory function for TokenManagerLockUnlockFee.transferOperatorship function args
 */
export const encodeTokenManagerLockUnlockFeeTransferOperatorshipArgs = ({
  operator,
}: TokenManagerLockUnlockFeeTransferOperatorshipArgs) => [operator] as const;

/**
 * Encoder function for TokenManagerLockUnlockFee.transferOperatorship function data
 */
export const encodeTokenManagerLockUnlockFeeTransferOperatorshipData = ({
  operator,
}: TokenManagerLockUnlockFeeTransferOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transferOperatorship",
    abi: ABI_FILE.abi,
    args: [operator],
  });

export type TokenManagerLockUnlockFeeTransmitInterchainTransferArgs = {
  sender: `0x${string}`;
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for TokenManagerLockUnlockFee.transmitInterchainTransfer function args
 */
export const encodeTokenManagerLockUnlockFeeTransmitInterchainTransferArgs = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerLockUnlockFeeTransmitInterchainTransferArgs) =>
  [sender, destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for TokenManagerLockUnlockFee.transmitInterchainTransfer function data
 */
export const encodeTokenManagerLockUnlockFeeTransmitInterchainTransferData = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerLockUnlockFeeTransmitInterchainTransferArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transmitInterchainTransfer",
    abi: ABI_FILE.abi,
    args: [sender, destinationChain, destinationAddress, amount, metadata],
  });

export const TOKEN_MANAGER_LOCK_UNLOCK_FEE_ENCODERS = {
  acceptOperatorship: {
    args: encodeTokenManagerLockUnlockFeeAcceptOperatorshipArgs,
    data: encodeTokenManagerLockUnlockFeeAcceptOperatorshipData,
  },
  addFlowLimiter: {
    args: encodeTokenManagerLockUnlockFeeAddFlowLimiterArgs,
    data: encodeTokenManagerLockUnlockFeeAddFlowLimiterData,
  },
  callContractWithInterchainToken: {
    args: encodeTokenManagerLockUnlockFeeCallContractWithInterchainTokenArgs,
    data: encodeTokenManagerLockUnlockFeeCallContractWithInterchainTokenData,
  },
  giveToken: {
    args: encodeTokenManagerLockUnlockFeeGiveTokenArgs,
    data: encodeTokenManagerLockUnlockFeeGiveTokenData,
  },
  hasRole: {
    args: encodeTokenManagerLockUnlockFeeHasRoleArgs,
    data: encodeTokenManagerLockUnlockFeeHasRoleData,
  },
  interchainTransfer: {
    args: encodeTokenManagerLockUnlockFeeInterchainTransferArgs,
    data: encodeTokenManagerLockUnlockFeeInterchainTransferData,
  },
  isOperator: {
    args: encodeTokenManagerLockUnlockFeeIsOperatorArgs,
    data: encodeTokenManagerLockUnlockFeeIsOperatorData,
  },
  params: {
    args: encodeTokenManagerLockUnlockFeeParamsArgs,
    data: encodeTokenManagerLockUnlockFeeParamsData,
  },
  proposeOperatorship: {
    args: encodeTokenManagerLockUnlockFeeProposeOperatorshipArgs,
    data: encodeTokenManagerLockUnlockFeeProposeOperatorshipData,
  },
  removeFlowLimiter: {
    args: encodeTokenManagerLockUnlockFeeRemoveFlowLimiterArgs,
    data: encodeTokenManagerLockUnlockFeeRemoveFlowLimiterData,
  },
  setFlowLimit: {
    args: encodeTokenManagerLockUnlockFeeSetFlowLimitArgs,
    data: encodeTokenManagerLockUnlockFeeSetFlowLimitData,
  },
  setup: {
    args: encodeTokenManagerLockUnlockFeeSetupArgs,
    data: encodeTokenManagerLockUnlockFeeSetupData,
  },
  takeToken: {
    args: encodeTokenManagerLockUnlockFeeTakeTokenArgs,
    data: encodeTokenManagerLockUnlockFeeTakeTokenData,
  },
  transferOperatorship: {
    args: encodeTokenManagerLockUnlockFeeTransferOperatorshipArgs,
    data: encodeTokenManagerLockUnlockFeeTransferOperatorshipData,
  },
  transmitInterchainTransfer: {
    args: encodeTokenManagerLockUnlockFeeTransmitInterchainTransferArgs,
    data: encodeTokenManagerLockUnlockFeeTransmitInterchainTransferData,
  },
};
