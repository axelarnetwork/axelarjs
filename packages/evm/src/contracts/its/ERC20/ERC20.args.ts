/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - node_modules/@axelar-network/interchain-token-service/artifacts/contracts/interchain-token/ERC20.sol/ERC20.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import type { PublicContractClient } from "../../PublicContractClient";
import ABI_FILE from "./ERC20.abi";

export type ERC20AllowanceArgs = {
  owner: `0x${string}`;
  spender: `0x${string}`;
};

/**
 * Factory function for ERC20.allowance function args
 */
export const encodeERC20AllowanceArgs = ({
  owner,
  spender,
}: ERC20AllowanceArgs) => [owner, spender] as const;

/**
 * Encoder function for ERC20.allowance function data
 */
export const encodeERC20AllowanceData = ({
  owner,
  spender,
}: ERC20AllowanceArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "allowance",
    abi: ABI_FILE.abi,
    args: [owner, spender],
  });

export type ERC20ApproveArgs = { spender: `0x${string}`; amount: bigint };

/**
 * Factory function for ERC20.approve function args
 */
export const encodeERC20ApproveArgs = ({ spender, amount }: ERC20ApproveArgs) =>
  [spender, amount] as const;

/**
 * Encoder function for ERC20.approve function data
 */
export const encodeERC20ApproveData = ({
  spender,
  amount,
}: ERC20ApproveArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "approve",
    abi: ABI_FILE.abi,
    args: [spender, amount],
  });

export type ERC20BalanceOfArgs = { balanceOfArg0: `0x${string}` };

/**
 * Factory function for ERC20.balanceOf function args
 */
export const encodeERC20BalanceOfArgs = ({
  balanceOfArg0,
}: ERC20BalanceOfArgs) => [balanceOfArg0] as const;

/**
 * Encoder function for ERC20.balanceOf function data
 */
export const encodeERC20BalanceOfData = ({
  balanceOfArg0,
}: ERC20BalanceOfArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "balanceOf",
    abi: ABI_FILE.abi,
    args: [balanceOfArg0],
  });

export type ERC20DecreaseAllowanceArgs = {
  spender: `0x${string}`;
  subtractedValue: bigint;
};

/**
 * Factory function for ERC20.decreaseAllowance function args
 */
export const encodeERC20DecreaseAllowanceArgs = ({
  spender,
  subtractedValue,
}: ERC20DecreaseAllowanceArgs) => [spender, subtractedValue] as const;

/**
 * Encoder function for ERC20.decreaseAllowance function data
 */
export const encodeERC20DecreaseAllowanceData = ({
  spender,
  subtractedValue,
}: ERC20DecreaseAllowanceArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "decreaseAllowance",
    abi: ABI_FILE.abi,
    args: [spender, subtractedValue],
  });

export type ERC20IncreaseAllowanceArgs = {
  spender: `0x${string}`;
  addedValue: bigint;
};

/**
 * Factory function for ERC20.increaseAllowance function args
 */
export const encodeERC20IncreaseAllowanceArgs = ({
  spender,
  addedValue,
}: ERC20IncreaseAllowanceArgs) => [spender, addedValue] as const;

/**
 * Encoder function for ERC20.increaseAllowance function data
 */
export const encodeERC20IncreaseAllowanceData = ({
  spender,
  addedValue,
}: ERC20IncreaseAllowanceArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "increaseAllowance",
    abi: ABI_FILE.abi,
    args: [spender, addedValue],
  });

export type ERC20TransferArgs = { recipient: `0x${string}`; amount: bigint };

/**
 * Factory function for ERC20.transfer function args
 */
export const encodeERC20TransferArgs = ({
  recipient,
  amount,
}: ERC20TransferArgs) => [recipient, amount] as const;

/**
 * Encoder function for ERC20.transfer function data
 */
export const encodeERC20TransferData = ({
  recipient,
  amount,
}: ERC20TransferArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transfer",
    abi: ABI_FILE.abi,
    args: [recipient, amount],
  });

export type ERC20TransferFromArgs = {
  sender: `0x${string}`;
  recipient: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for ERC20.transferFrom function args
 */
export const encodeERC20TransferFromArgs = ({
  sender,
  recipient,
  amount,
}: ERC20TransferFromArgs) => [sender, recipient, amount] as const;

/**
 * Encoder function for ERC20.transferFrom function data
 */
export const encodeERC20TransferFromData = ({
  sender,
  recipient,
  amount,
}: ERC20TransferFromArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transferFrom",
    abi: ABI_FILE.abi,
    args: [sender, recipient, amount],
  });

export const ERC20_ENCODERS = {
  allowance: {
    args: encodeERC20AllowanceArgs,
    data: encodeERC20AllowanceData,
  },
  approve: {
    args: encodeERC20ApproveArgs,
    data: encodeERC20ApproveData,
  },
  balanceOf: {
    args: encodeERC20BalanceOfArgs,
    data: encodeERC20BalanceOfData,
  },
  decreaseAllowance: {
    args: encodeERC20DecreaseAllowanceArgs,
    data: encodeERC20DecreaseAllowanceData,
  },
  increaseAllowance: {
    args: encodeERC20IncreaseAllowanceArgs,
    data: encodeERC20IncreaseAllowanceData,
  },
  transfer: {
    args: encodeERC20TransferArgs,
    data: encodeERC20TransferData,
  },
  transferFrom: {
    args: encodeERC20TransferFromArgs,
    data: encodeERC20TransferFromData,
  },
};

export function createERC20ReadClient(
  publicClient: PublicContractClient<typeof ABI_FILE.abi>
) {
  return {
    allowance(allowanceArgs: ERC20AllowanceArgs) {
      const encoder = ERC20_ENCODERS["allowance"];
      const encodedArgs = encoder.args(allowanceArgs);

      return publicClient.read("allowance", { args: encodedArgs });
    },
    balanceOf(balanceOfArgs: ERC20BalanceOfArgs) {
      const encoder = ERC20_ENCODERS["balanceOf"];
      const encodedArgs = encoder.args(balanceOfArgs);

      return publicClient.read("balanceOf", { args: encodedArgs });
    },
    totalSupply() {
      return publicClient.read("totalSupply");
    },
  };
}
