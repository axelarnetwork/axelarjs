/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - node_modules/@axelar-network/interchain-token-service/artifacts/contracts/interfaces/IOperator.sol/IOperator.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import type { PublicContractClient } from "../../PublicContractClient";
import ABI_FILE from "./IOperator.abi";

export type IOperatorAcceptOperatorshipArgs = { fromOperator: `0x${string}` };

/**
 * Factory function for IOperator.acceptOperatorship function args
 */
export const encodeIOperatorAcceptOperatorshipArgs = ({
  fromOperator,
}: IOperatorAcceptOperatorshipArgs) => [fromOperator] as const;

/**
 * Encoder function for IOperator.acceptOperatorship function data
 */
export const encodeIOperatorAcceptOperatorshipData = ({
  fromOperator,
}: IOperatorAcceptOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "acceptOperatorship",
    abi: ABI_FILE.abi,
    args: [fromOperator],
  });

export type IOperatorHasRoleArgs = { account: `0x${string}`; role: number };

/**
 * Factory function for IOperator.hasRole function args
 */
export const encodeIOperatorHasRoleArgs = ({
  account,
  role,
}: IOperatorHasRoleArgs) => [account, role] as const;

/**
 * Encoder function for IOperator.hasRole function data
 */
export const encodeIOperatorHasRoleData = ({
  account,
  role,
}: IOperatorHasRoleArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "hasRole",
    abi: ABI_FILE.abi,
    args: [account, role],
  });

export type IOperatorIsOperatorArgs = { addr: `0x${string}` };

/**
 * Factory function for IOperator.isOperator function args
 */
export const encodeIOperatorIsOperatorArgs = ({
  addr,
}: IOperatorIsOperatorArgs) => [addr] as const;

/**
 * Encoder function for IOperator.isOperator function data
 */
export const encodeIOperatorIsOperatorData = ({
  addr,
}: IOperatorIsOperatorArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "isOperator",
    abi: ABI_FILE.abi,
    args: [addr],
  });

export type IOperatorProposeOperatorshipArgs = { operator_: `0x${string}` };

/**
 * Factory function for IOperator.proposeOperatorship function args
 */
export const encodeIOperatorProposeOperatorshipArgs = ({
  operator_,
}: IOperatorProposeOperatorshipArgs) => [operator_] as const;

/**
 * Encoder function for IOperator.proposeOperatorship function data
 */
export const encodeIOperatorProposeOperatorshipData = ({
  operator_,
}: IOperatorProposeOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "proposeOperatorship",
    abi: ABI_FILE.abi,
    args: [operator_],
  });

export type IOperatorTransferOperatorshipArgs = { operator_: `0x${string}` };

/**
 * Factory function for IOperator.transferOperatorship function args
 */
export const encodeIOperatorTransferOperatorshipArgs = ({
  operator_,
}: IOperatorTransferOperatorshipArgs) => [operator_] as const;

/**
 * Encoder function for IOperator.transferOperatorship function data
 */
export const encodeIOperatorTransferOperatorshipData = ({
  operator_,
}: IOperatorTransferOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transferOperatorship",
    abi: ABI_FILE.abi,
    args: [operator_],
  });

export const IOPERATOR_ENCODERS = {
  acceptOperatorship: {
    args: encodeIOperatorAcceptOperatorshipArgs,
    data: encodeIOperatorAcceptOperatorshipData,
  },
  hasRole: {
    args: encodeIOperatorHasRoleArgs,
    data: encodeIOperatorHasRoleData,
  },
  isOperator: {
    args: encodeIOperatorIsOperatorArgs,
    data: encodeIOperatorIsOperatorData,
  },
  proposeOperatorship: {
    args: encodeIOperatorProposeOperatorshipArgs,
    data: encodeIOperatorProposeOperatorshipData,
  },
  transferOperatorship: {
    args: encodeIOperatorTransferOperatorshipArgs,
    data: encodeIOperatorTransferOperatorshipData,
  },
};

export function createIOperatorReadClient(
  publicClient: PublicContractClient<typeof ABI_FILE.abi>
) {
  return {
    hasRole(hasRoleArgs: IOperatorHasRoleArgs) {
      const encoder = IOPERATOR_ENCODERS["hasRole"];
      const encodedArgs = encoder.args(hasRoleArgs);

      return publicClient.read("hasRole", { args: encodedArgs });
    },
    isOperator(isOperatorArgs: IOperatorIsOperatorArgs) {
      const encoder = IOPERATOR_ENCODERS["isOperator"];
      const encodedArgs = encoder.args(isOperatorArgs);

      return publicClient.read("isOperator", { args: encodedArgs });
    },
  };
}
