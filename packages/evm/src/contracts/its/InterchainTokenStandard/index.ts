/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - node_modules/@axelar-network/interchain-token-service/artifacts/contracts/interchain-token/InterchainTokenStandard.sol/InterchainTokenStandard.json
 *
 * DO NOT EDIT MANUALLY
 */

import { Chain } from "viem";

import { PublicContractClient } from "../../PublicContractClient";
import ABI_FILE from "./InterchainTokenStandard.abi";
import { createInterchainTokenStandardReadClient } from "./InterchainTokenStandard.args";

const createReadClient = createInterchainTokenStandardReadClient;

export * from "./InterchainTokenStandard.args";

export const INTERCHAIN_TOKEN_STANDARD_ABI = ABI_FILE.abi;

/**
 * InterchainTokenStandardClient
 *
 * @description Type-safe contract client for InterchainTokenStandard
 *
 * @example
 *
 * import { sepolia } from "viem/chains";
 *
 * const client = createInterchainTokenStandardClient({
 *  chain: sepolia,
 *  address: "0x1234..."
 * });
 */
export class InterchainTokenStandardClient extends PublicContractClient<
  typeof ABI_FILE.abi
> {
  static ABI = ABI_FILE.abi;
  static contractName = ABI_FILE.contractName;

  public readonly reads: ReturnType<typeof createReadClient>;

  constructor(options: { chain: Chain; address: `0x${string}` }) {
    super({
      abi: INTERCHAIN_TOKEN_STANDARD_ABI,
      address: options.address,
      chain: options.chain,
    });

    this.reads = createReadClient(this);
  }
}

export const createInterchainTokenStandardClient = (options: {
  chain: Chain;
  address: `0x${string}`;
}) => new InterchainTokenStandardClient(options);
