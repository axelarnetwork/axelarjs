/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - node_modules/@axelar-network/interchain-token-service/artifacts/contracts/interfaces/IInterchainTokenService.sol/IInterchainTokenService.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import type { PublicContractClient } from "../../PublicContractClient";
import ABI_FILE from "./IInterchainTokenService.abi";

export type IInterchainTokenServiceAcceptOperatorshipArgs = {
  fromOperator: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.acceptOperatorship function args
 */
export const encodeIInterchainTokenServiceAcceptOperatorshipArgs = ({
  fromOperator,
}: IInterchainTokenServiceAcceptOperatorshipArgs) => [fromOperator] as const;

/**
 * Encoder function for IInterchainTokenService.acceptOperatorship function data
 */
export const encodeIInterchainTokenServiceAcceptOperatorshipData = ({
  fromOperator,
}: IInterchainTokenServiceAcceptOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "acceptOperatorship",
    abi: ABI_FILE.abi,
    args: [fromOperator],
  });

export type IInterchainTokenServiceContractCallValueArgs = {
  sourceChain: string;
  sourceAddress: string;
  payload: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.contractCallValue function args
 */
export const encodeIInterchainTokenServiceContractCallValueArgs = ({
  sourceChain,
  sourceAddress,
  payload,
}: IInterchainTokenServiceContractCallValueArgs) =>
  [sourceChain, sourceAddress, payload] as const;

/**
 * Encoder function for IInterchainTokenService.contractCallValue function data
 */
export const encodeIInterchainTokenServiceContractCallValueData = ({
  sourceChain,
  sourceAddress,
  payload,
}: IInterchainTokenServiceContractCallValueArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "contractCallValue",
    abi: ABI_FILE.abi,
    args: [sourceChain, sourceAddress, payload],
  });

export type IInterchainTokenServiceDeployInterchainTokenArgs = {
  salt: `0x${string}`;
  destinationChain: string;
  name: string;
  symbol: string;
  decimals: number;
  minter: `0x${string}`;
  gasValue: bigint;
};

/**
 * Factory function for IInterchainTokenService.deployInterchainToken function args
 */
export const encodeIInterchainTokenServiceDeployInterchainTokenArgs = ({
  salt,
  destinationChain,
  name,
  symbol,
  decimals,
  minter,
  gasValue,
}: IInterchainTokenServiceDeployInterchainTokenArgs) =>
  [salt, destinationChain, name, symbol, decimals, minter, gasValue] as const;

/**
 * Encoder function for IInterchainTokenService.deployInterchainToken function data
 */
export const encodeIInterchainTokenServiceDeployInterchainTokenData = ({
  salt,
  destinationChain,
  name,
  symbol,
  decimals,
  minter,
  gasValue,
}: IInterchainTokenServiceDeployInterchainTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "deployInterchainToken",
    abi: ABI_FILE.abi,
    args: [salt, destinationChain, name, symbol, decimals, minter, gasValue],
  });

export type IInterchainTokenServiceDeployedTokenManagerArgs = {
  tokenId: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.deployedTokenManager function args
 */
export const encodeIInterchainTokenServiceDeployedTokenManagerArgs = ({
  tokenId,
}: IInterchainTokenServiceDeployedTokenManagerArgs) => [tokenId] as const;

/**
 * Encoder function for IInterchainTokenService.deployedTokenManager function data
 */
export const encodeIInterchainTokenServiceDeployedTokenManagerData = ({
  tokenId,
}: IInterchainTokenServiceDeployedTokenManagerArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "deployedTokenManager",
    abi: ABI_FILE.abi,
    args: [tokenId],
  });

export type IInterchainTokenServiceExecuteArgs = {
  commandId: `0x${string}`;
  sourceChain: string;
  sourceAddress: string;
  payload: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.execute function args
 */
export const encodeIInterchainTokenServiceExecuteArgs = ({
  commandId,
  sourceChain,
  sourceAddress,
  payload,
}: IInterchainTokenServiceExecuteArgs) =>
  [commandId, sourceChain, sourceAddress, payload] as const;

/**
 * Encoder function for IInterchainTokenService.execute function data
 */
export const encodeIInterchainTokenServiceExecuteData = ({
  commandId,
  sourceChain,
  sourceAddress,
  payload,
}: IInterchainTokenServiceExecuteArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "execute",
    abi: ABI_FILE.abi,
    args: [commandId, sourceChain, sourceAddress, payload],
  });

export type IInterchainTokenServiceExpressExecuteArgs = {
  commandId: `0x${string}`;
  sourceChain: string;
  sourceAddress: string;
  payload: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.expressExecute function args
 */
export const encodeIInterchainTokenServiceExpressExecuteArgs = ({
  commandId,
  sourceChain,
  sourceAddress,
  payload,
}: IInterchainTokenServiceExpressExecuteArgs) =>
  [commandId, sourceChain, sourceAddress, payload] as const;

/**
 * Encoder function for IInterchainTokenService.expressExecute function data
 */
export const encodeIInterchainTokenServiceExpressExecuteData = ({
  commandId,
  sourceChain,
  sourceAddress,
  payload,
}: IInterchainTokenServiceExpressExecuteArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "expressExecute",
    abi: ABI_FILE.abi,
    args: [commandId, sourceChain, sourceAddress, payload],
  });

export type IInterchainTokenServiceGetExpressExecutorArgs = {
  commandId: `0x${string}`;
  sourceChain: string;
  sourceAddress: string;
  payloadHash: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.getExpressExecutor function args
 */
export const encodeIInterchainTokenServiceGetExpressExecutorArgs = ({
  commandId,
  sourceChain,
  sourceAddress,
  payloadHash,
}: IInterchainTokenServiceGetExpressExecutorArgs) =>
  [commandId, sourceChain, sourceAddress, payloadHash] as const;

/**
 * Encoder function for IInterchainTokenService.getExpressExecutor function data
 */
export const encodeIInterchainTokenServiceGetExpressExecutorData = ({
  commandId,
  sourceChain,
  sourceAddress,
  payloadHash,
}: IInterchainTokenServiceGetExpressExecutorArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "getExpressExecutor",
    abi: ABI_FILE.abi,
    args: [commandId, sourceChain, sourceAddress, payloadHash],
  });

export type IInterchainTokenServiceHasRoleArgs = {
  account: `0x${string}`;
  role: number;
};

/**
 * Factory function for IInterchainTokenService.hasRole function args
 */
export const encodeIInterchainTokenServiceHasRoleArgs = ({
  account,
  role,
}: IInterchainTokenServiceHasRoleArgs) => [account, role] as const;

/**
 * Encoder function for IInterchainTokenService.hasRole function data
 */
export const encodeIInterchainTokenServiceHasRoleData = ({
  account,
  role,
}: IInterchainTokenServiceHasRoleArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "hasRole",
    abi: ABI_FILE.abi,
    args: [account, role],
  });

export type IInterchainTokenServiceInterchainTokenAddressArgs = {
  tokenId: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.interchainTokenAddress function args
 */
export const encodeIInterchainTokenServiceInterchainTokenAddressArgs = ({
  tokenId,
}: IInterchainTokenServiceInterchainTokenAddressArgs) => [tokenId] as const;

/**
 * Encoder function for IInterchainTokenService.interchainTokenAddress function data
 */
export const encodeIInterchainTokenServiceInterchainTokenAddressData = ({
  tokenId,
}: IInterchainTokenServiceInterchainTokenAddressArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "interchainTokenAddress",
    abi: ABI_FILE.abi,
    args: [tokenId],
  });

export type IInterchainTokenServiceInterchainTokenIdArgs = {
  operator_: `0x${string}`;
  salt: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.interchainTokenId function args
 */
export const encodeIInterchainTokenServiceInterchainTokenIdArgs = ({
  operator_,
  salt,
}: IInterchainTokenServiceInterchainTokenIdArgs) => [operator_, salt] as const;

/**
 * Encoder function for IInterchainTokenService.interchainTokenId function data
 */
export const encodeIInterchainTokenServiceInterchainTokenIdData = ({
  operator_,
  salt,
}: IInterchainTokenServiceInterchainTokenIdArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "interchainTokenId",
    abi: ABI_FILE.abi,
    args: [operator_, salt],
  });

export type IInterchainTokenServiceInterchainTransferArgs = {
  tokenId: `0x${string}`;
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
  gasValue: bigint;
};

/**
 * Factory function for IInterchainTokenService.interchainTransfer function args
 */
export const encodeIInterchainTokenServiceInterchainTransferArgs = ({
  tokenId,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
  gasValue,
}: IInterchainTokenServiceInterchainTransferArgs) =>
  [
    tokenId,
    destinationChain,
    destinationAddress,
    amount,
    metadata,
    gasValue,
  ] as const;

/**
 * Encoder function for IInterchainTokenService.interchainTransfer function data
 */
export const encodeIInterchainTokenServiceInterchainTransferData = ({
  tokenId,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
  gasValue,
}: IInterchainTokenServiceInterchainTransferArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "interchainTransfer",
    abi: ABI_FILE.abi,
    args: [
      tokenId,
      destinationChain,
      destinationAddress,
      amount,
      metadata,
      gasValue,
    ],
  });

export type IInterchainTokenServiceIsOperatorArgs = { addr: `0x${string}` };

/**
 * Factory function for IInterchainTokenService.isOperator function args
 */
export const encodeIInterchainTokenServiceIsOperatorArgs = ({
  addr,
}: IInterchainTokenServiceIsOperatorArgs) => [addr] as const;

/**
 * Encoder function for IInterchainTokenService.isOperator function data
 */
export const encodeIInterchainTokenServiceIsOperatorData = ({
  addr,
}: IInterchainTokenServiceIsOperatorArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "isOperator",
    abi: ABI_FILE.abi,
    args: [addr],
  });

export type IInterchainTokenServiceIsTrustedAddressArgs = {
  chain: string;
  address_: string;
};

/**
 * Factory function for IInterchainTokenService.isTrustedAddress function args
 */
export const encodeIInterchainTokenServiceIsTrustedAddressArgs = ({
  chain,
  address_,
}: IInterchainTokenServiceIsTrustedAddressArgs) => [chain, address_] as const;

/**
 * Encoder function for IInterchainTokenService.isTrustedAddress function data
 */
export const encodeIInterchainTokenServiceIsTrustedAddressData = ({
  chain,
  address_,
}: IInterchainTokenServiceIsTrustedAddressArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "isTrustedAddress",
    abi: ABI_FILE.abi,
    args: [chain, address_],
  });

export type IInterchainTokenServiceLinkTokenArgs = {
  salt: `0x${string}`;
  destinationChain: string;
  destinationTokenAddress: `0x${string}`;
  tokenManagerType: number;
  linkParams: `0x${string}`;
  gasValue: bigint;
};

/**
 * Factory function for IInterchainTokenService.linkToken function args
 */
export const encodeIInterchainTokenServiceLinkTokenArgs = ({
  salt,
  destinationChain,
  destinationTokenAddress,
  tokenManagerType,
  linkParams,
  gasValue,
}: IInterchainTokenServiceLinkTokenArgs) =>
  [
    salt,
    destinationChain,
    destinationTokenAddress,
    tokenManagerType,
    linkParams,
    gasValue,
  ] as const;

/**
 * Encoder function for IInterchainTokenService.linkToken function data
 */
export const encodeIInterchainTokenServiceLinkTokenData = ({
  salt,
  destinationChain,
  destinationTokenAddress,
  tokenManagerType,
  linkParams,
  gasValue,
}: IInterchainTokenServiceLinkTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "linkToken",
    abi: ABI_FILE.abi,
    args: [
      salt,
      destinationChain,
      destinationTokenAddress,
      tokenManagerType,
      linkParams,
      gasValue,
    ],
  });

export type IInterchainTokenServiceMigrateInterchainTokenArgs = {
  tokenId: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.migrateInterchainToken function args
 */
export const encodeIInterchainTokenServiceMigrateInterchainTokenArgs = ({
  tokenId,
}: IInterchainTokenServiceMigrateInterchainTokenArgs) => [tokenId] as const;

/**
 * Encoder function for IInterchainTokenService.migrateInterchainToken function data
 */
export const encodeIInterchainTokenServiceMigrateInterchainTokenData = ({
  tokenId,
}: IInterchainTokenServiceMigrateInterchainTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "migrateInterchainToken",
    abi: ABI_FILE.abi,
    args: [tokenId],
  });

export type IInterchainTokenServiceMulticallArgs = { data: any };

/**
 * Factory function for IInterchainTokenService.multicall function args
 */
export const encodeIInterchainTokenServiceMulticallArgs = ({
  data,
}: IInterchainTokenServiceMulticallArgs) => [data] as const;

/**
 * Encoder function for IInterchainTokenService.multicall function data
 */
export const encodeIInterchainTokenServiceMulticallData = ({
  data,
}: IInterchainTokenServiceMulticallArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "multicall",
    abi: ABI_FILE.abi,
    args: [data],
  });

export type IInterchainTokenServiceProposeOperatorshipArgs = {
  operator_: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.proposeOperatorship function args
 */
export const encodeIInterchainTokenServiceProposeOperatorshipArgs = ({
  operator_,
}: IInterchainTokenServiceProposeOperatorshipArgs) => [operator_] as const;

/**
 * Encoder function for IInterchainTokenService.proposeOperatorship function data
 */
export const encodeIInterchainTokenServiceProposeOperatorshipData = ({
  operator_,
}: IInterchainTokenServiceProposeOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "proposeOperatorship",
    abi: ABI_FILE.abi,
    args: [operator_],
  });

export type IInterchainTokenServiceProposeOwnershipArgs = {
  newOwner: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.proposeOwnership function args
 */
export const encodeIInterchainTokenServiceProposeOwnershipArgs = ({
  newOwner,
}: IInterchainTokenServiceProposeOwnershipArgs) => [newOwner] as const;

/**
 * Encoder function for IInterchainTokenService.proposeOwnership function data
 */
export const encodeIInterchainTokenServiceProposeOwnershipData = ({
  newOwner,
}: IInterchainTokenServiceProposeOwnershipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "proposeOwnership",
    abi: ABI_FILE.abi,
    args: [newOwner],
  });

export type IInterchainTokenServiceRegisterCustomTokenArgs = {
  salt: `0x${string}`;
  tokenAddress: `0x${string}`;
  tokenManagerType: number;
  linkParams: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.registerCustomToken function args
 */
export const encodeIInterchainTokenServiceRegisterCustomTokenArgs = ({
  salt,
  tokenAddress,
  tokenManagerType,
  linkParams,
}: IInterchainTokenServiceRegisterCustomTokenArgs) =>
  [salt, tokenAddress, tokenManagerType, linkParams] as const;

/**
 * Encoder function for IInterchainTokenService.registerCustomToken function data
 */
export const encodeIInterchainTokenServiceRegisterCustomTokenData = ({
  salt,
  tokenAddress,
  tokenManagerType,
  linkParams,
}: IInterchainTokenServiceRegisterCustomTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "registerCustomToken",
    abi: ABI_FILE.abi,
    args: [salt, tokenAddress, tokenManagerType, linkParams],
  });

export type IInterchainTokenServiceRegisterTokenMetadataArgs = {
  tokenAddress: `0x${string}`;
  gasValue: bigint;
};

/**
 * Factory function for IInterchainTokenService.registerTokenMetadata function args
 */
export const encodeIInterchainTokenServiceRegisterTokenMetadataArgs = ({
  tokenAddress,
  gasValue,
}: IInterchainTokenServiceRegisterTokenMetadataArgs) =>
  [tokenAddress, gasValue] as const;

/**
 * Encoder function for IInterchainTokenService.registerTokenMetadata function data
 */
export const encodeIInterchainTokenServiceRegisterTokenMetadataData = ({
  tokenAddress,
  gasValue,
}: IInterchainTokenServiceRegisterTokenMetadataArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "registerTokenMetadata",
    abi: ABI_FILE.abi,
    args: [tokenAddress, gasValue],
  });

export type IInterchainTokenServiceRegisteredTokenAddressArgs = {
  tokenId: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.registeredTokenAddress function args
 */
export const encodeIInterchainTokenServiceRegisteredTokenAddressArgs = ({
  tokenId,
}: IInterchainTokenServiceRegisteredTokenAddressArgs) => [tokenId] as const;

/**
 * Encoder function for IInterchainTokenService.registeredTokenAddress function data
 */
export const encodeIInterchainTokenServiceRegisteredTokenAddressData = ({
  tokenId,
}: IInterchainTokenServiceRegisteredTokenAddressArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "registeredTokenAddress",
    abi: ABI_FILE.abi,
    args: [tokenId],
  });

export type IInterchainTokenServiceRemoveTrustedAddressArgs = { chain: string };

/**
 * Factory function for IInterchainTokenService.removeTrustedAddress function args
 */
export const encodeIInterchainTokenServiceRemoveTrustedAddressArgs = ({
  chain,
}: IInterchainTokenServiceRemoveTrustedAddressArgs) => [chain] as const;

/**
 * Encoder function for IInterchainTokenService.removeTrustedAddress function data
 */
export const encodeIInterchainTokenServiceRemoveTrustedAddressData = ({
  chain,
}: IInterchainTokenServiceRemoveTrustedAddressArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "removeTrustedAddress",
    abi: ABI_FILE.abi,
    args: [chain],
  });

export type IInterchainTokenServiceSetFlowLimitsArgs = {
  tokenIds: any;
  flowLimits: any;
};

/**
 * Factory function for IInterchainTokenService.setFlowLimits function args
 */
export const encodeIInterchainTokenServiceSetFlowLimitsArgs = ({
  tokenIds,
  flowLimits,
}: IInterchainTokenServiceSetFlowLimitsArgs) => [tokenIds, flowLimits] as const;

/**
 * Encoder function for IInterchainTokenService.setFlowLimits function data
 */
export const encodeIInterchainTokenServiceSetFlowLimitsData = ({
  tokenIds,
  flowLimits,
}: IInterchainTokenServiceSetFlowLimitsArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setFlowLimits",
    abi: ABI_FILE.abi,
    args: [tokenIds, flowLimits],
  });

export type IInterchainTokenServiceSetPauseStatusArgs = { paused: boolean };

/**
 * Factory function for IInterchainTokenService.setPauseStatus function args
 */
export const encodeIInterchainTokenServiceSetPauseStatusArgs = ({
  paused,
}: IInterchainTokenServiceSetPauseStatusArgs) => [paused] as const;

/**
 * Encoder function for IInterchainTokenService.setPauseStatus function data
 */
export const encodeIInterchainTokenServiceSetPauseStatusData = ({
  paused,
}: IInterchainTokenServiceSetPauseStatusArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setPauseStatus",
    abi: ABI_FILE.abi,
    args: [paused],
  });

export type IInterchainTokenServiceSetTrustedAddressArgs = {
  chain: string;
  address_: string;
};

/**
 * Factory function for IInterchainTokenService.setTrustedAddress function args
 */
export const encodeIInterchainTokenServiceSetTrustedAddressArgs = ({
  chain,
  address_,
}: IInterchainTokenServiceSetTrustedAddressArgs) => [chain, address_] as const;

/**
 * Encoder function for IInterchainTokenService.setTrustedAddress function data
 */
export const encodeIInterchainTokenServiceSetTrustedAddressData = ({
  chain,
  address_,
}: IInterchainTokenServiceSetTrustedAddressArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setTrustedAddress",
    abi: ABI_FILE.abi,
    args: [chain, address_],
  });

export type IInterchainTokenServiceSetupArgs = { data: `0x${string}` };

/**
 * Factory function for IInterchainTokenService.setup function args
 */
export const encodeIInterchainTokenServiceSetupArgs = ({
  data,
}: IInterchainTokenServiceSetupArgs) => [data] as const;

/**
 * Encoder function for IInterchainTokenService.setup function data
 */
export const encodeIInterchainTokenServiceSetupData = ({
  data,
}: IInterchainTokenServiceSetupArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setup",
    abi: ABI_FILE.abi,
    args: [data],
  });

export type IInterchainTokenServiceTokenManagerAddressArgs = {
  tokenId: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.tokenManagerAddress function args
 */
export const encodeIInterchainTokenServiceTokenManagerAddressArgs = ({
  tokenId,
}: IInterchainTokenServiceTokenManagerAddressArgs) => [tokenId] as const;

/**
 * Encoder function for IInterchainTokenService.tokenManagerAddress function data
 */
export const encodeIInterchainTokenServiceTokenManagerAddressData = ({
  tokenId,
}: IInterchainTokenServiceTokenManagerAddressArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "tokenManagerAddress",
    abi: ABI_FILE.abi,
    args: [tokenId],
  });

export type IInterchainTokenServiceTokenManagerImplementationArgs = {
  tokenManagerType: bigint;
};

/**
 * Factory function for IInterchainTokenService.tokenManagerImplementation function args
 */
export const encodeIInterchainTokenServiceTokenManagerImplementationArgs = ({
  tokenManagerType,
}: IInterchainTokenServiceTokenManagerImplementationArgs) =>
  [tokenManagerType] as const;

/**
 * Encoder function for IInterchainTokenService.tokenManagerImplementation function data
 */
export const encodeIInterchainTokenServiceTokenManagerImplementationData = ({
  tokenManagerType,
}: IInterchainTokenServiceTokenManagerImplementationArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "tokenManagerImplementation",
    abi: ABI_FILE.abi,
    args: [tokenManagerType],
  });

export type IInterchainTokenServiceTransferOperatorshipArgs = {
  operator_: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.transferOperatorship function args
 */
export const encodeIInterchainTokenServiceTransferOperatorshipArgs = ({
  operator_,
}: IInterchainTokenServiceTransferOperatorshipArgs) => [operator_] as const;

/**
 * Encoder function for IInterchainTokenService.transferOperatorship function data
 */
export const encodeIInterchainTokenServiceTransferOperatorshipData = ({
  operator_,
}: IInterchainTokenServiceTransferOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transferOperatorship",
    abi: ABI_FILE.abi,
    args: [operator_],
  });

export type IInterchainTokenServiceTransferOwnershipArgs = {
  newOwner: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.transferOwnership function args
 */
export const encodeIInterchainTokenServiceTransferOwnershipArgs = ({
  newOwner,
}: IInterchainTokenServiceTransferOwnershipArgs) => [newOwner] as const;

/**
 * Encoder function for IInterchainTokenService.transferOwnership function data
 */
export const encodeIInterchainTokenServiceTransferOwnershipData = ({
  newOwner,
}: IInterchainTokenServiceTransferOwnershipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transferOwnership",
    abi: ABI_FILE.abi,
    args: [newOwner],
  });

export type IInterchainTokenServiceTransmitInterchainTransferArgs = {
  tokenId: `0x${string}`;
  sourceAddress: `0x${string}`;
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.transmitInterchainTransfer function args
 */
export const encodeIInterchainTokenServiceTransmitInterchainTransferArgs = ({
  tokenId,
  sourceAddress,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: IInterchainTokenServiceTransmitInterchainTransferArgs) =>
  [
    tokenId,
    sourceAddress,
    destinationChain,
    destinationAddress,
    amount,
    metadata,
  ] as const;

/**
 * Encoder function for IInterchainTokenService.transmitInterchainTransfer function data
 */
export const encodeIInterchainTokenServiceTransmitInterchainTransferData = ({
  tokenId,
  sourceAddress,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: IInterchainTokenServiceTransmitInterchainTransferArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transmitInterchainTransfer",
    abi: ABI_FILE.abi,
    args: [
      tokenId,
      sourceAddress,
      destinationChain,
      destinationAddress,
      amount,
      metadata,
    ],
  });

export type IInterchainTokenServiceTrustedAddressArgs = { chain: string };

/**
 * Factory function for IInterchainTokenService.trustedAddress function args
 */
export const encodeIInterchainTokenServiceTrustedAddressArgs = ({
  chain,
}: IInterchainTokenServiceTrustedAddressArgs) => [chain] as const;

/**
 * Encoder function for IInterchainTokenService.trustedAddress function data
 */
export const encodeIInterchainTokenServiceTrustedAddressData = ({
  chain,
}: IInterchainTokenServiceTrustedAddressArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "trustedAddress",
    abi: ABI_FILE.abi,
    args: [chain],
  });

export type IInterchainTokenServiceTrustedAddressHashArgs = { chain: string };

/**
 * Factory function for IInterchainTokenService.trustedAddressHash function args
 */
export const encodeIInterchainTokenServiceTrustedAddressHashArgs = ({
  chain,
}: IInterchainTokenServiceTrustedAddressHashArgs) => [chain] as const;

/**
 * Encoder function for IInterchainTokenService.trustedAddressHash function data
 */
export const encodeIInterchainTokenServiceTrustedAddressHashData = ({
  chain,
}: IInterchainTokenServiceTrustedAddressHashArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "trustedAddressHash",
    abi: ABI_FILE.abi,
    args: [chain],
  });

export type IInterchainTokenServiceUpgradeArgs = {
  newImplementation: `0x${string}`;
  newImplementationCodeHash: `0x${string}`;
  params: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.upgrade function args
 */
export const encodeIInterchainTokenServiceUpgradeArgs = ({
  newImplementation,
  newImplementationCodeHash,
  params,
}: IInterchainTokenServiceUpgradeArgs) =>
  [newImplementation, newImplementationCodeHash, params] as const;

/**
 * Encoder function for IInterchainTokenService.upgrade function data
 */
export const encodeIInterchainTokenServiceUpgradeData = ({
  newImplementation,
  newImplementationCodeHash,
  params,
}: IInterchainTokenServiceUpgradeArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "upgrade",
    abi: ABI_FILE.abi,
    args: [newImplementation, newImplementationCodeHash, params],
  });

export const IINTERCHAIN_TOKEN_SERVICE_ENCODERS = {
  acceptOperatorship: {
    args: encodeIInterchainTokenServiceAcceptOperatorshipArgs,
    data: encodeIInterchainTokenServiceAcceptOperatorshipData,
  },
  contractCallValue: {
    args: encodeIInterchainTokenServiceContractCallValueArgs,
    data: encodeIInterchainTokenServiceContractCallValueData,
  },
  deployInterchainToken: {
    args: encodeIInterchainTokenServiceDeployInterchainTokenArgs,
    data: encodeIInterchainTokenServiceDeployInterchainTokenData,
  },
  deployedTokenManager: {
    args: encodeIInterchainTokenServiceDeployedTokenManagerArgs,
    data: encodeIInterchainTokenServiceDeployedTokenManagerData,
  },
  execute: {
    args: encodeIInterchainTokenServiceExecuteArgs,
    data: encodeIInterchainTokenServiceExecuteData,
  },
  expressExecute: {
    args: encodeIInterchainTokenServiceExpressExecuteArgs,
    data: encodeIInterchainTokenServiceExpressExecuteData,
  },
  getExpressExecutor: {
    args: encodeIInterchainTokenServiceGetExpressExecutorArgs,
    data: encodeIInterchainTokenServiceGetExpressExecutorData,
  },
  hasRole: {
    args: encodeIInterchainTokenServiceHasRoleArgs,
    data: encodeIInterchainTokenServiceHasRoleData,
  },
  interchainTokenAddress: {
    args: encodeIInterchainTokenServiceInterchainTokenAddressArgs,
    data: encodeIInterchainTokenServiceInterchainTokenAddressData,
  },
  interchainTokenId: {
    args: encodeIInterchainTokenServiceInterchainTokenIdArgs,
    data: encodeIInterchainTokenServiceInterchainTokenIdData,
  },
  interchainTransfer: {
    args: encodeIInterchainTokenServiceInterchainTransferArgs,
    data: encodeIInterchainTokenServiceInterchainTransferData,
  },
  isOperator: {
    args: encodeIInterchainTokenServiceIsOperatorArgs,
    data: encodeIInterchainTokenServiceIsOperatorData,
  },
  isTrustedAddress: {
    args: encodeIInterchainTokenServiceIsTrustedAddressArgs,
    data: encodeIInterchainTokenServiceIsTrustedAddressData,
  },
  linkToken: {
    args: encodeIInterchainTokenServiceLinkTokenArgs,
    data: encodeIInterchainTokenServiceLinkTokenData,
  },
  migrateInterchainToken: {
    args: encodeIInterchainTokenServiceMigrateInterchainTokenArgs,
    data: encodeIInterchainTokenServiceMigrateInterchainTokenData,
  },
  multicall: {
    args: encodeIInterchainTokenServiceMulticallArgs,
    data: encodeIInterchainTokenServiceMulticallData,
  },
  proposeOperatorship: {
    args: encodeIInterchainTokenServiceProposeOperatorshipArgs,
    data: encodeIInterchainTokenServiceProposeOperatorshipData,
  },
  proposeOwnership: {
    args: encodeIInterchainTokenServiceProposeOwnershipArgs,
    data: encodeIInterchainTokenServiceProposeOwnershipData,
  },
  registerCustomToken: {
    args: encodeIInterchainTokenServiceRegisterCustomTokenArgs,
    data: encodeIInterchainTokenServiceRegisterCustomTokenData,
  },
  registerTokenMetadata: {
    args: encodeIInterchainTokenServiceRegisterTokenMetadataArgs,
    data: encodeIInterchainTokenServiceRegisterTokenMetadataData,
  },
  registeredTokenAddress: {
    args: encodeIInterchainTokenServiceRegisteredTokenAddressArgs,
    data: encodeIInterchainTokenServiceRegisteredTokenAddressData,
  },
  removeTrustedAddress: {
    args: encodeIInterchainTokenServiceRemoveTrustedAddressArgs,
    data: encodeIInterchainTokenServiceRemoveTrustedAddressData,
  },
  setFlowLimits: {
    args: encodeIInterchainTokenServiceSetFlowLimitsArgs,
    data: encodeIInterchainTokenServiceSetFlowLimitsData,
  },
  setPauseStatus: {
    args: encodeIInterchainTokenServiceSetPauseStatusArgs,
    data: encodeIInterchainTokenServiceSetPauseStatusData,
  },
  setTrustedAddress: {
    args: encodeIInterchainTokenServiceSetTrustedAddressArgs,
    data: encodeIInterchainTokenServiceSetTrustedAddressData,
  },
  setup: {
    args: encodeIInterchainTokenServiceSetupArgs,
    data: encodeIInterchainTokenServiceSetupData,
  },
  tokenManagerAddress: {
    args: encodeIInterchainTokenServiceTokenManagerAddressArgs,
    data: encodeIInterchainTokenServiceTokenManagerAddressData,
  },
  tokenManagerImplementation: {
    args: encodeIInterchainTokenServiceTokenManagerImplementationArgs,
    data: encodeIInterchainTokenServiceTokenManagerImplementationData,
  },
  transferOperatorship: {
    args: encodeIInterchainTokenServiceTransferOperatorshipArgs,
    data: encodeIInterchainTokenServiceTransferOperatorshipData,
  },
  transferOwnership: {
    args: encodeIInterchainTokenServiceTransferOwnershipArgs,
    data: encodeIInterchainTokenServiceTransferOwnershipData,
  },
  transmitInterchainTransfer: {
    args: encodeIInterchainTokenServiceTransmitInterchainTransferArgs,
    data: encodeIInterchainTokenServiceTransmitInterchainTransferData,
  },
  trustedAddress: {
    args: encodeIInterchainTokenServiceTrustedAddressArgs,
    data: encodeIInterchainTokenServiceTrustedAddressData,
  },
  trustedAddressHash: {
    args: encodeIInterchainTokenServiceTrustedAddressHashArgs,
    data: encodeIInterchainTokenServiceTrustedAddressHashData,
  },
  upgrade: {
    args: encodeIInterchainTokenServiceUpgradeArgs,
    data: encodeIInterchainTokenServiceUpgradeData,
  },
};

export function createIInterchainTokenServiceReadClient(
  publicClient: PublicContractClient<typeof ABI_FILE.abi>,
) {
  return {
    chainName() {
      return publicClient.read("chainName");
    },
    chainNameHash() {
      return publicClient.read("chainNameHash");
    },
    contractCallValue(
      contractCallValueArgs: IInterchainTokenServiceContractCallValueArgs,
    ) {
      const encoder = IINTERCHAIN_TOKEN_SERVICE_ENCODERS["contractCallValue"];
      const encodedArgs = encoder.args(contractCallValueArgs);

      return publicClient.read("contractCallValue", { args: encodedArgs });
    },
    contractId() {
      return publicClient.read("contractId");
    },
    deployedTokenManager(
      deployedTokenManagerArgs: IInterchainTokenServiceDeployedTokenManagerArgs,
    ) {
      const encoder =
        IINTERCHAIN_TOKEN_SERVICE_ENCODERS["deployedTokenManager"];
      const encodedArgs = encoder.args(deployedTokenManagerArgs);

      return publicClient.read("deployedTokenManager", { args: encodedArgs });
    },
    gateway() {
      return publicClient.read("gateway");
    },
    getExpressExecutor(
      getExpressExecutorArgs: IInterchainTokenServiceGetExpressExecutorArgs,
    ) {
      const encoder = IINTERCHAIN_TOKEN_SERVICE_ENCODERS["getExpressExecutor"];
      const encodedArgs = encoder.args(getExpressExecutorArgs);

      return publicClient.read("getExpressExecutor", { args: encodedArgs });
    },
    hasRole(hasRoleArgs: IInterchainTokenServiceHasRoleArgs) {
      const encoder = IINTERCHAIN_TOKEN_SERVICE_ENCODERS["hasRole"];
      const encodedArgs = encoder.args(hasRoleArgs);

      return publicClient.read("hasRole", { args: encodedArgs });
    },
    implementation() {
      return publicClient.read("implementation");
    },
    interchainTokenAddress(
      interchainTokenAddressArgs: IInterchainTokenServiceInterchainTokenAddressArgs,
    ) {
      const encoder =
        IINTERCHAIN_TOKEN_SERVICE_ENCODERS["interchainTokenAddress"];
      const encodedArgs = encoder.args(interchainTokenAddressArgs);

      return publicClient.read("interchainTokenAddress", { args: encodedArgs });
    },
    interchainTokenDeployer() {
      return publicClient.read("interchainTokenDeployer");
    },
    interchainTokenFactory() {
      return publicClient.read("interchainTokenFactory");
    },
    interchainTokenId(
      interchainTokenIdArgs: IInterchainTokenServiceInterchainTokenIdArgs,
    ) {
      const encoder = IINTERCHAIN_TOKEN_SERVICE_ENCODERS["interchainTokenId"];
      const encodedArgs = encoder.args(interchainTokenIdArgs);

      return publicClient.read("interchainTokenId", { args: encodedArgs });
    },
    isOperator(isOperatorArgs: IInterchainTokenServiceIsOperatorArgs) {
      const encoder = IINTERCHAIN_TOKEN_SERVICE_ENCODERS["isOperator"];
      const encodedArgs = encoder.args(isOperatorArgs);

      return publicClient.read("isOperator", { args: encodedArgs });
    },
    isTrustedAddress(
      isTrustedAddressArgs: IInterchainTokenServiceIsTrustedAddressArgs,
    ) {
      const encoder = IINTERCHAIN_TOKEN_SERVICE_ENCODERS["isTrustedAddress"];
      const encodedArgs = encoder.args(isTrustedAddressArgs);

      return publicClient.read("isTrustedAddress", { args: encodedArgs });
    },
    owner() {
      return publicClient.read("owner");
    },
    paused() {
      return publicClient.read("paused");
    },
    pendingOwner() {
      return publicClient.read("pendingOwner");
    },
    registeredTokenAddress(
      registeredTokenAddressArgs: IInterchainTokenServiceRegisteredTokenAddressArgs,
    ) {
      const encoder =
        IINTERCHAIN_TOKEN_SERVICE_ENCODERS["registeredTokenAddress"];
      const encodedArgs = encoder.args(registeredTokenAddressArgs);

      return publicClient.read("registeredTokenAddress", { args: encodedArgs });
    },
    tokenHandler() {
      return publicClient.read("tokenHandler");
    },
    tokenManager() {
      return publicClient.read("tokenManager");
    },
    tokenManagerAddress(
      tokenManagerAddressArgs: IInterchainTokenServiceTokenManagerAddressArgs,
    ) {
      const encoder = IINTERCHAIN_TOKEN_SERVICE_ENCODERS["tokenManagerAddress"];
      const encodedArgs = encoder.args(tokenManagerAddressArgs);

      return publicClient.read("tokenManagerAddress", { args: encodedArgs });
    },
    tokenManagerDeployer() {
      return publicClient.read("tokenManagerDeployer");
    },
    tokenManagerImplementation(
      tokenManagerImplementationArgs: IInterchainTokenServiceTokenManagerImplementationArgs,
    ) {
      const encoder =
        IINTERCHAIN_TOKEN_SERVICE_ENCODERS["tokenManagerImplementation"];
      const encodedArgs = encoder.args(tokenManagerImplementationArgs);

      return publicClient.read("tokenManagerImplementation", {
        args: encodedArgs,
      });
    },
    trustedAddress(
      trustedAddressArgs: IInterchainTokenServiceTrustedAddressArgs,
    ) {
      const encoder = IINTERCHAIN_TOKEN_SERVICE_ENCODERS["trustedAddress"];
      const encodedArgs = encoder.args(trustedAddressArgs);

      return publicClient.read("trustedAddress", { args: encodedArgs });
    },
    trustedAddressHash(
      trustedAddressHashArgs: IInterchainTokenServiceTrustedAddressHashArgs,
    ) {
      const encoder = IINTERCHAIN_TOKEN_SERVICE_ENCODERS["trustedAddressHash"];
      const encodedArgs = encoder.args(trustedAddressHashArgs);

      return publicClient.read("trustedAddressHash", { args: encodedArgs });
    },
  };
}
