/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - node_modules/@axelar-network/interchain-token-service/artifacts/contracts/interfaces/IInterchainTokenService.sol/IInterchainTokenService.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import ABI_FILE from "./IInterchainTokenService.abi";

export type IInterchainTokenServiceCallContractWithInterchainTokenArgs = {
  tokenId: `0x${string}`;
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  data: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.callContractWithInterchainToken function args
 */
export const encodeIInterchainTokenServiceCallContractWithInterchainTokenArgs =
  ({
    tokenId,
    destinationChain,
    destinationAddress,
    amount,
    data,
  }: IInterchainTokenServiceCallContractWithInterchainTokenArgs) =>
    [tokenId, destinationChain, destinationAddress, amount, data] as const;

/**
 * Encoder function for IInterchainTokenService.callContractWithInterchainToken function data
 */
export const encodeIInterchainTokenServiceCallContractWithInterchainTokenData =
  ({
    tokenId,
    destinationChain,
    destinationAddress,
    amount,
    data,
  }: IInterchainTokenServiceCallContractWithInterchainTokenArgs) =>
    encodeFunctionData({
      functionName: "callContractWithInterchainToken",
      abi: ABI_FILE.abi,
      args: [tokenId, destinationChain, destinationAddress, amount, data],
    });

export type IInterchainTokenServiceContractCallValueArgs = {
  sourceChain: string;
  sourceAddress: string;
  payload: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.contractCallValue function args
 */
export const encodeIInterchainTokenServiceContractCallValueArgs = ({
  sourceChain,
  sourceAddress,
  payload,
}: IInterchainTokenServiceContractCallValueArgs) =>
  [sourceChain, sourceAddress, payload] as const;

/**
 * Encoder function for IInterchainTokenService.contractCallValue function data
 */
export const encodeIInterchainTokenServiceContractCallValueData = ({
  sourceChain,
  sourceAddress,
  payload,
}: IInterchainTokenServiceContractCallValueArgs) =>
  encodeFunctionData({
    functionName: "contractCallValue",
    abi: ABI_FILE.abi,
    args: [sourceChain, sourceAddress, payload],
  });

export type IInterchainTokenServiceContractCallWithTokenValueArgs = {
  sourceChain: string;
  sourceAddress: string;
  payload: `0x${string}`;
  symbol: string;
  amount: bigint;
};

/**
 * Factory function for IInterchainTokenService.contractCallWithTokenValue function args
 */
export const encodeIInterchainTokenServiceContractCallWithTokenValueArgs = ({
  sourceChain,
  sourceAddress,
  payload,
  symbol,
  amount,
}: IInterchainTokenServiceContractCallWithTokenValueArgs) =>
  [sourceChain, sourceAddress, payload, symbol, amount] as const;

/**
 * Encoder function for IInterchainTokenService.contractCallWithTokenValue function data
 */
export const encodeIInterchainTokenServiceContractCallWithTokenValueData = ({
  sourceChain,
  sourceAddress,
  payload,
  symbol,
  amount,
}: IInterchainTokenServiceContractCallWithTokenValueArgs) =>
  encodeFunctionData({
    functionName: "contractCallWithTokenValue",
    abi: ABI_FILE.abi,
    args: [sourceChain, sourceAddress, payload, symbol, amount],
  });

export type IInterchainTokenServiceDeployInterchainTokenArgs = {
  salt: `0x${string}`;
  destinationChain: string;
  name: string;
  symbol: string;
  decimals: number;
  distributor: `0x${string}`;
  gasValue: bigint;
};

/**
 * Factory function for IInterchainTokenService.deployInterchainToken function args
 */
export const encodeIInterchainTokenServiceDeployInterchainTokenArgs = ({
  salt,
  destinationChain,
  name,
  symbol,
  decimals,
  distributor,
  gasValue,
}: IInterchainTokenServiceDeployInterchainTokenArgs) =>
  [
    salt,
    destinationChain,
    name,
    symbol,
    decimals,
    distributor,
    gasValue,
  ] as const;

/**
 * Encoder function for IInterchainTokenService.deployInterchainToken function data
 */
export const encodeIInterchainTokenServiceDeployInterchainTokenData = ({
  salt,
  destinationChain,
  name,
  symbol,
  decimals,
  distributor,
  gasValue,
}: IInterchainTokenServiceDeployInterchainTokenArgs) =>
  encodeFunctionData({
    functionName: "deployInterchainToken",
    abi: ABI_FILE.abi,
    args: [
      salt,
      destinationChain,
      name,
      symbol,
      decimals,
      distributor,
      gasValue,
    ],
  });

export type IInterchainTokenServiceDeployTokenManagerArgs = {
  salt: `0x${string}`;
  destinationChain: string;
  tokenManagerType: number;
  params: `0x${string}`;
  gasValue: bigint;
};

/**
 * Factory function for IInterchainTokenService.deployTokenManager function args
 */
export const encodeIInterchainTokenServiceDeployTokenManagerArgs = ({
  salt,
  destinationChain,
  tokenManagerType,
  params,
  gasValue,
}: IInterchainTokenServiceDeployTokenManagerArgs) =>
  [salt, destinationChain, tokenManagerType, params, gasValue] as const;

/**
 * Encoder function for IInterchainTokenService.deployTokenManager function data
 */
export const encodeIInterchainTokenServiceDeployTokenManagerData = ({
  salt,
  destinationChain,
  tokenManagerType,
  params,
  gasValue,
}: IInterchainTokenServiceDeployTokenManagerArgs) =>
  encodeFunctionData({
    functionName: "deployTokenManager",
    abi: ABI_FILE.abi,
    args: [salt, destinationChain, tokenManagerType, params, gasValue],
  });

export type IInterchainTokenServiceExecuteArgs = {
  commandId: `0x${string}`;
  sourceChain: string;
  sourceAddress: string;
  payload: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.execute function args
 */
export const encodeIInterchainTokenServiceExecuteArgs = ({
  commandId,
  sourceChain,
  sourceAddress,
  payload,
}: IInterchainTokenServiceExecuteArgs) =>
  [commandId, sourceChain, sourceAddress, payload] as const;

/**
 * Encoder function for IInterchainTokenService.execute function data
 */
export const encodeIInterchainTokenServiceExecuteData = ({
  commandId,
  sourceChain,
  sourceAddress,
  payload,
}: IInterchainTokenServiceExecuteArgs) =>
  encodeFunctionData({
    functionName: "execute",
    abi: ABI_FILE.abi,
    args: [commandId, sourceChain, sourceAddress, payload],
  });

export type IInterchainTokenServiceExecuteWithTokenArgs = {
  commandId: `0x${string}`;
  sourceChain: string;
  sourceAddress: string;
  payload: `0x${string}`;
  tokenSymbol: string;
  amount: bigint;
};

/**
 * Factory function for IInterchainTokenService.executeWithToken function args
 */
export const encodeIInterchainTokenServiceExecuteWithTokenArgs = ({
  commandId,
  sourceChain,
  sourceAddress,
  payload,
  tokenSymbol,
  amount,
}: IInterchainTokenServiceExecuteWithTokenArgs) =>
  [
    commandId,
    sourceChain,
    sourceAddress,
    payload,
    tokenSymbol,
    amount,
  ] as const;

/**
 * Encoder function for IInterchainTokenService.executeWithToken function data
 */
export const encodeIInterchainTokenServiceExecuteWithTokenData = ({
  commandId,
  sourceChain,
  sourceAddress,
  payload,
  tokenSymbol,
  amount,
}: IInterchainTokenServiceExecuteWithTokenArgs) =>
  encodeFunctionData({
    functionName: "executeWithToken",
    abi: ABI_FILE.abi,
    args: [commandId, sourceChain, sourceAddress, payload, tokenSymbol, amount],
  });

export type IInterchainTokenServiceExpressExecuteArgs = {
  commandId: `0x${string}`;
  sourceChain: string;
  sourceAddress: string;
  payload: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.expressExecute function args
 */
export const encodeIInterchainTokenServiceExpressExecuteArgs = ({
  commandId,
  sourceChain,
  sourceAddress,
  payload,
}: IInterchainTokenServiceExpressExecuteArgs) =>
  [commandId, sourceChain, sourceAddress, payload] as const;

/**
 * Encoder function for IInterchainTokenService.expressExecute function data
 */
export const encodeIInterchainTokenServiceExpressExecuteData = ({
  commandId,
  sourceChain,
  sourceAddress,
  payload,
}: IInterchainTokenServiceExpressExecuteArgs) =>
  encodeFunctionData({
    functionName: "expressExecute",
    abi: ABI_FILE.abi,
    args: [commandId, sourceChain, sourceAddress, payload],
  });

export type IInterchainTokenServiceExpressExecuteWithTokenArgs = {
  commandId: `0x${string}`;
  sourceChain: string;
  sourceAddress: string;
  payload: `0x${string}`;
  symbol: string;
  amount: bigint;
};

/**
 * Factory function for IInterchainTokenService.expressExecuteWithToken function args
 */
export const encodeIInterchainTokenServiceExpressExecuteWithTokenArgs = ({
  commandId,
  sourceChain,
  sourceAddress,
  payload,
  symbol,
  amount,
}: IInterchainTokenServiceExpressExecuteWithTokenArgs) =>
  [commandId, sourceChain, sourceAddress, payload, symbol, amount] as const;

/**
 * Encoder function for IInterchainTokenService.expressExecuteWithToken function data
 */
export const encodeIInterchainTokenServiceExpressExecuteWithTokenData = ({
  commandId,
  sourceChain,
  sourceAddress,
  payload,
  symbol,
  amount,
}: IInterchainTokenServiceExpressExecuteWithTokenArgs) =>
  encodeFunctionData({
    functionName: "expressExecuteWithToken",
    abi: ABI_FILE.abi,
    args: [commandId, sourceChain, sourceAddress, payload, symbol, amount],
  });

export type IInterchainTokenServiceFlowInAmountArgs = {
  tokenId: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.flowInAmount function args
 */
export const encodeIInterchainTokenServiceFlowInAmountArgs = ({
  tokenId,
}: IInterchainTokenServiceFlowInAmountArgs) => [tokenId] as const;

/**
 * Encoder function for IInterchainTokenService.flowInAmount function data
 */
export const encodeIInterchainTokenServiceFlowInAmountData = ({
  tokenId,
}: IInterchainTokenServiceFlowInAmountArgs) =>
  encodeFunctionData({
    functionName: "flowInAmount",
    abi: ABI_FILE.abi,
    args: [tokenId],
  });

export type IInterchainTokenServiceFlowLimitArgs = { tokenId: `0x${string}` };

/**
 * Factory function for IInterchainTokenService.flowLimit function args
 */
export const encodeIInterchainTokenServiceFlowLimitArgs = ({
  tokenId,
}: IInterchainTokenServiceFlowLimitArgs) => [tokenId] as const;

/**
 * Encoder function for IInterchainTokenService.flowLimit function data
 */
export const encodeIInterchainTokenServiceFlowLimitData = ({
  tokenId,
}: IInterchainTokenServiceFlowLimitArgs) =>
  encodeFunctionData({
    functionName: "flowLimit",
    abi: ABI_FILE.abi,
    args: [tokenId],
  });

export type IInterchainTokenServiceFlowOutAmountArgs = {
  tokenId: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.flowOutAmount function args
 */
export const encodeIInterchainTokenServiceFlowOutAmountArgs = ({
  tokenId,
}: IInterchainTokenServiceFlowOutAmountArgs) => [tokenId] as const;

/**
 * Encoder function for IInterchainTokenService.flowOutAmount function data
 */
export const encodeIInterchainTokenServiceFlowOutAmountData = ({
  tokenId,
}: IInterchainTokenServiceFlowOutAmountArgs) =>
  encodeFunctionData({
    functionName: "flowOutAmount",
    abi: ABI_FILE.abi,
    args: [tokenId],
  });

export type IInterchainTokenServiceGetExpressExecutorArgs = {
  commandId: `0x${string}`;
  sourceChain: string;
  sourceAddress: string;
  payloadHash: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.getExpressExecutor function args
 */
export const encodeIInterchainTokenServiceGetExpressExecutorArgs = ({
  commandId,
  sourceChain,
  sourceAddress,
  payloadHash,
}: IInterchainTokenServiceGetExpressExecutorArgs) =>
  [commandId, sourceChain, sourceAddress, payloadHash] as const;

/**
 * Encoder function for IInterchainTokenService.getExpressExecutor function data
 */
export const encodeIInterchainTokenServiceGetExpressExecutorData = ({
  commandId,
  sourceChain,
  sourceAddress,
  payloadHash,
}: IInterchainTokenServiceGetExpressExecutorArgs) =>
  encodeFunctionData({
    functionName: "getExpressExecutor",
    abi: ABI_FILE.abi,
    args: [commandId, sourceChain, sourceAddress, payloadHash],
  });

export type IInterchainTokenServiceGetExpressExecutorWithTokenArgs = {
  commandId: `0x${string}`;
  sourceChain: string;
  sourceAddress: string;
  payloadHash: `0x${string}`;
  symbol: string;
  amount: bigint;
};

/**
 * Factory function for IInterchainTokenService.getExpressExecutorWithToken function args
 */
export const encodeIInterchainTokenServiceGetExpressExecutorWithTokenArgs = ({
  commandId,
  sourceChain,
  sourceAddress,
  payloadHash,
  symbol,
  amount,
}: IInterchainTokenServiceGetExpressExecutorWithTokenArgs) =>
  [commandId, sourceChain, sourceAddress, payloadHash, symbol, amount] as const;

/**
 * Encoder function for IInterchainTokenService.getExpressExecutorWithToken function data
 */
export const encodeIInterchainTokenServiceGetExpressExecutorWithTokenData = ({
  commandId,
  sourceChain,
  sourceAddress,
  payloadHash,
  symbol,
  amount,
}: IInterchainTokenServiceGetExpressExecutorWithTokenArgs) =>
  encodeFunctionData({
    functionName: "getExpressExecutorWithToken",
    abi: ABI_FILE.abi,
    args: [commandId, sourceChain, sourceAddress, payloadHash, symbol, amount],
  });

export type IInterchainTokenServiceInterchainTokenAddressArgs = {
  tokenId: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.interchainTokenAddress function args
 */
export const encodeIInterchainTokenServiceInterchainTokenAddressArgs = ({
  tokenId,
}: IInterchainTokenServiceInterchainTokenAddressArgs) => [tokenId] as const;

/**
 * Encoder function for IInterchainTokenService.interchainTokenAddress function data
 */
export const encodeIInterchainTokenServiceInterchainTokenAddressData = ({
  tokenId,
}: IInterchainTokenServiceInterchainTokenAddressArgs) =>
  encodeFunctionData({
    functionName: "interchainTokenAddress",
    abi: ABI_FILE.abi,
    args: [tokenId],
  });

export type IInterchainTokenServiceInterchainTokenIdArgs = {
  operator_: `0x${string}`;
  salt: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.interchainTokenId function args
 */
export const encodeIInterchainTokenServiceInterchainTokenIdArgs = ({
  operator_,
  salt,
}: IInterchainTokenServiceInterchainTokenIdArgs) => [operator_, salt] as const;

/**
 * Encoder function for IInterchainTokenService.interchainTokenId function data
 */
export const encodeIInterchainTokenServiceInterchainTokenIdData = ({
  operator_,
  salt,
}: IInterchainTokenServiceInterchainTokenIdArgs) =>
  encodeFunctionData({
    functionName: "interchainTokenId",
    abi: ABI_FILE.abi,
    args: [operator_, salt],
  });

export type IInterchainTokenServiceInterchainTransferArgs = {
  tokenId: `0x${string}`;
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.interchainTransfer function args
 */
export const encodeIInterchainTokenServiceInterchainTransferArgs = ({
  tokenId,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: IInterchainTokenServiceInterchainTransferArgs) =>
  [tokenId, destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for IInterchainTokenService.interchainTransfer function data
 */
export const encodeIInterchainTokenServiceInterchainTransferData = ({
  tokenId,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: IInterchainTokenServiceInterchainTransferArgs) =>
  encodeFunctionData({
    functionName: "interchainTransfer",
    abi: ABI_FILE.abi,
    args: [tokenId, destinationChain, destinationAddress, amount, metadata],
  });

export type IInterchainTokenServiceIsTrustedAddressArgs = {
  chain: string;
  address_: string;
};

/**
 * Factory function for IInterchainTokenService.isTrustedAddress function args
 */
export const encodeIInterchainTokenServiceIsTrustedAddressArgs = ({
  chain,
  address_,
}: IInterchainTokenServiceIsTrustedAddressArgs) => [chain, address_] as const;

/**
 * Encoder function for IInterchainTokenService.isTrustedAddress function data
 */
export const encodeIInterchainTokenServiceIsTrustedAddressData = ({
  chain,
  address_,
}: IInterchainTokenServiceIsTrustedAddressArgs) =>
  encodeFunctionData({
    functionName: "isTrustedAddress",
    abi: ABI_FILE.abi,
    args: [chain, address_],
  });

export type IInterchainTokenServiceMulticallArgs = { data: any };

/**
 * Factory function for IInterchainTokenService.multicall function args
 */
export const encodeIInterchainTokenServiceMulticallArgs = ({
  data,
}: IInterchainTokenServiceMulticallArgs) => [data] as const;

/**
 * Encoder function for IInterchainTokenService.multicall function data
 */
export const encodeIInterchainTokenServiceMulticallData = ({
  data,
}: IInterchainTokenServiceMulticallArgs) =>
  encodeFunctionData({
    functionName: "multicall",
    abi: ABI_FILE.abi,
    args: [data],
  });

export type IInterchainTokenServiceRemoveTrustedAddressArgs = { chain: string };

/**
 * Factory function for IInterchainTokenService.removeTrustedAddress function args
 */
export const encodeIInterchainTokenServiceRemoveTrustedAddressArgs = ({
  chain,
}: IInterchainTokenServiceRemoveTrustedAddressArgs) => [chain] as const;

/**
 * Encoder function for IInterchainTokenService.removeTrustedAddress function data
 */
export const encodeIInterchainTokenServiceRemoveTrustedAddressData = ({
  chain,
}: IInterchainTokenServiceRemoveTrustedAddressArgs) =>
  encodeFunctionData({
    functionName: "removeTrustedAddress",
    abi: ABI_FILE.abi,
    args: [chain],
  });

export type IInterchainTokenServiceSetFlowLimitsArgs = {
  tokenIds: any;
  flowLimits: any;
};

/**
 * Factory function for IInterchainTokenService.setFlowLimits function args
 */
export const encodeIInterchainTokenServiceSetFlowLimitsArgs = ({
  tokenIds,
  flowLimits,
}: IInterchainTokenServiceSetFlowLimitsArgs) => [tokenIds, flowLimits] as const;

/**
 * Encoder function for IInterchainTokenService.setFlowLimits function data
 */
export const encodeIInterchainTokenServiceSetFlowLimitsData = ({
  tokenIds,
  flowLimits,
}: IInterchainTokenServiceSetFlowLimitsArgs) =>
  encodeFunctionData({
    functionName: "setFlowLimits",
    abi: ABI_FILE.abi,
    args: [tokenIds, flowLimits],
  });

export type IInterchainTokenServiceSetPauseStatusArgs = { paused: boolean };

/**
 * Factory function for IInterchainTokenService.setPauseStatus function args
 */
export const encodeIInterchainTokenServiceSetPauseStatusArgs = ({
  paused,
}: IInterchainTokenServiceSetPauseStatusArgs) => [paused] as const;

/**
 * Encoder function for IInterchainTokenService.setPauseStatus function data
 */
export const encodeIInterchainTokenServiceSetPauseStatusData = ({
  paused,
}: IInterchainTokenServiceSetPauseStatusArgs) =>
  encodeFunctionData({
    functionName: "setPauseStatus",
    abi: ABI_FILE.abi,
    args: [paused],
  });

export type IInterchainTokenServiceSetTrustedAddressArgs = {
  chain: string;
  address_: string;
};

/**
 * Factory function for IInterchainTokenService.setTrustedAddress function args
 */
export const encodeIInterchainTokenServiceSetTrustedAddressArgs = ({
  chain,
  address_,
}: IInterchainTokenServiceSetTrustedAddressArgs) => [chain, address_] as const;

/**
 * Encoder function for IInterchainTokenService.setTrustedAddress function data
 */
export const encodeIInterchainTokenServiceSetTrustedAddressData = ({
  chain,
  address_,
}: IInterchainTokenServiceSetTrustedAddressArgs) =>
  encodeFunctionData({
    functionName: "setTrustedAddress",
    abi: ABI_FILE.abi,
    args: [chain, address_],
  });

export type IInterchainTokenServiceTokenManagerAddressArgs = {
  tokenId: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.tokenManagerAddress function args
 */
export const encodeIInterchainTokenServiceTokenManagerAddressArgs = ({
  tokenId,
}: IInterchainTokenServiceTokenManagerAddressArgs) => [tokenId] as const;

/**
 * Encoder function for IInterchainTokenService.tokenManagerAddress function data
 */
export const encodeIInterchainTokenServiceTokenManagerAddressData = ({
  tokenId,
}: IInterchainTokenServiceTokenManagerAddressArgs) =>
  encodeFunctionData({
    functionName: "tokenManagerAddress",
    abi: ABI_FILE.abi,
    args: [tokenId],
  });

export type IInterchainTokenServiceTokenManagerImplementationArgs = {
  tokenManagerType: bigint;
};

/**
 * Factory function for IInterchainTokenService.tokenManagerImplementation function args
 */
export const encodeIInterchainTokenServiceTokenManagerImplementationArgs = ({
  tokenManagerType,
}: IInterchainTokenServiceTokenManagerImplementationArgs) =>
  [tokenManagerType] as const;

/**
 * Encoder function for IInterchainTokenService.tokenManagerImplementation function data
 */
export const encodeIInterchainTokenServiceTokenManagerImplementationData = ({
  tokenManagerType,
}: IInterchainTokenServiceTokenManagerImplementationArgs) =>
  encodeFunctionData({
    functionName: "tokenManagerImplementation",
    abi: ABI_FILE.abi,
    args: [tokenManagerType],
  });

export type IInterchainTokenServiceTransmitInterchainTransferArgs = {
  tokenId: `0x${string}`;
  sourceAddress: `0x${string}`;
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.transmitInterchainTransfer function args
 */
export const encodeIInterchainTokenServiceTransmitInterchainTransferArgs = ({
  tokenId,
  sourceAddress,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: IInterchainTokenServiceTransmitInterchainTransferArgs) =>
  [
    tokenId,
    sourceAddress,
    destinationChain,
    destinationAddress,
    amount,
    metadata,
  ] as const;

/**
 * Encoder function for IInterchainTokenService.transmitInterchainTransfer function data
 */
export const encodeIInterchainTokenServiceTransmitInterchainTransferData = ({
  tokenId,
  sourceAddress,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: IInterchainTokenServiceTransmitInterchainTransferArgs) =>
  encodeFunctionData({
    functionName: "transmitInterchainTransfer",
    abi: ABI_FILE.abi,
    args: [
      tokenId,
      sourceAddress,
      destinationChain,
      destinationAddress,
      amount,
      metadata,
    ],
  });

export type IInterchainTokenServiceTrustedAddressArgs = { chain: string };

/**
 * Factory function for IInterchainTokenService.trustedAddress function args
 */
export const encodeIInterchainTokenServiceTrustedAddressArgs = ({
  chain,
}: IInterchainTokenServiceTrustedAddressArgs) => [chain] as const;

/**
 * Encoder function for IInterchainTokenService.trustedAddress function data
 */
export const encodeIInterchainTokenServiceTrustedAddressData = ({
  chain,
}: IInterchainTokenServiceTrustedAddressArgs) =>
  encodeFunctionData({
    functionName: "trustedAddress",
    abi: ABI_FILE.abi,
    args: [chain],
  });

export type IInterchainTokenServiceTrustedAddressHashArgs = { chain: string };

/**
 * Factory function for IInterchainTokenService.trustedAddressHash function args
 */
export const encodeIInterchainTokenServiceTrustedAddressHashArgs = ({
  chain,
}: IInterchainTokenServiceTrustedAddressHashArgs) => [chain] as const;

/**
 * Encoder function for IInterchainTokenService.trustedAddressHash function data
 */
export const encodeIInterchainTokenServiceTrustedAddressHashData = ({
  chain,
}: IInterchainTokenServiceTrustedAddressHashArgs) =>
  encodeFunctionData({
    functionName: "trustedAddressHash",
    abi: ABI_FILE.abi,
    args: [chain],
  });

export type IInterchainTokenServiceValidTokenAddressArgs = {
  tokenId: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.validTokenAddress function args
 */
export const encodeIInterchainTokenServiceValidTokenAddressArgs = ({
  tokenId,
}: IInterchainTokenServiceValidTokenAddressArgs) => [tokenId] as const;

/**
 * Encoder function for IInterchainTokenService.validTokenAddress function data
 */
export const encodeIInterchainTokenServiceValidTokenAddressData = ({
  tokenId,
}: IInterchainTokenServiceValidTokenAddressArgs) =>
  encodeFunctionData({
    functionName: "validTokenAddress",
    abi: ABI_FILE.abi,
    args: [tokenId],
  });

export type IInterchainTokenServiceValidTokenManagerAddressArgs = {
  tokenId: `0x${string}`;
};

/**
 * Factory function for IInterchainTokenService.validTokenManagerAddress function args
 */
export const encodeIInterchainTokenServiceValidTokenManagerAddressArgs = ({
  tokenId,
}: IInterchainTokenServiceValidTokenManagerAddressArgs) => [tokenId] as const;

/**
 * Encoder function for IInterchainTokenService.validTokenManagerAddress function data
 */
export const encodeIInterchainTokenServiceValidTokenManagerAddressData = ({
  tokenId,
}: IInterchainTokenServiceValidTokenManagerAddressArgs) =>
  encodeFunctionData({
    functionName: "validTokenManagerAddress",
    abi: ABI_FILE.abi,
    args: [tokenId],
  });

export const IINTERCHAIN_TOKEN_SERVICE_ENCODERS = {
  callContractWithInterchainToken:
    encodeIInterchainTokenServiceCallContractWithInterchainTokenArgs,
  contractCallValue: encodeIInterchainTokenServiceContractCallValueArgs,
  contractCallWithTokenValue:
    encodeIInterchainTokenServiceContractCallWithTokenValueArgs,
  deployInterchainToken: encodeIInterchainTokenServiceDeployInterchainTokenArgs,
  deployTokenManager: encodeIInterchainTokenServiceDeployTokenManagerArgs,
  execute: encodeIInterchainTokenServiceExecuteArgs,
  executeWithToken: encodeIInterchainTokenServiceExecuteWithTokenArgs,
  expressExecute: encodeIInterchainTokenServiceExpressExecuteArgs,
  expressExecuteWithToken:
    encodeIInterchainTokenServiceExpressExecuteWithTokenArgs,
  flowInAmount: encodeIInterchainTokenServiceFlowInAmountArgs,
  flowLimit: encodeIInterchainTokenServiceFlowLimitArgs,
  flowOutAmount: encodeIInterchainTokenServiceFlowOutAmountArgs,
  getExpressExecutor: encodeIInterchainTokenServiceGetExpressExecutorArgs,
  getExpressExecutorWithToken:
    encodeIInterchainTokenServiceGetExpressExecutorWithTokenArgs,
  interchainTokenAddress:
    encodeIInterchainTokenServiceInterchainTokenAddressArgs,
  interchainTokenId: encodeIInterchainTokenServiceInterchainTokenIdArgs,
  interchainTransfer: encodeIInterchainTokenServiceInterchainTransferArgs,
  isTrustedAddress: encodeIInterchainTokenServiceIsTrustedAddressArgs,
  multicall: encodeIInterchainTokenServiceMulticallArgs,
  removeTrustedAddress: encodeIInterchainTokenServiceRemoveTrustedAddressArgs,
  setFlowLimits: encodeIInterchainTokenServiceSetFlowLimitsArgs,
  setPauseStatus: encodeIInterchainTokenServiceSetPauseStatusArgs,
  setTrustedAddress: encodeIInterchainTokenServiceSetTrustedAddressArgs,
  tokenManagerAddress: encodeIInterchainTokenServiceTokenManagerAddressArgs,
  tokenManagerImplementation:
    encodeIInterchainTokenServiceTokenManagerImplementationArgs,
  transmitInterchainTransfer:
    encodeIInterchainTokenServiceTransmitInterchainTransferArgs,
  trustedAddress: encodeIInterchainTokenServiceTrustedAddressArgs,
  trustedAddressHash: encodeIInterchainTokenServiceTrustedAddressHashArgs,
  validTokenAddress: encodeIInterchainTokenServiceValidTokenAddressArgs,
  validTokenManagerAddress:
    encodeIInterchainTokenServiceValidTokenManagerAddressArgs,
};
