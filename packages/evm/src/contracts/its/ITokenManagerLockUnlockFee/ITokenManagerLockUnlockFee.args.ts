/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - node_modules/@axelar-network/interchain-token-service/artifacts/contracts/interfaces/ITokenManagerLockUnlockFee.sol/ITokenManagerLockUnlockFee.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import ABI_FILE from "./ITokenManagerLockUnlockFee.abi";

export type ITokenManagerLockUnlockFeeAcceptOperatorshipArgs = {
  fromOperator: `0x${string}`;
};

/**
 * Factory function for ITokenManagerLockUnlockFee.acceptOperatorship function args
 */
export const encodeITokenManagerLockUnlockFeeAcceptOperatorshipArgs = ({
  fromOperator,
}: ITokenManagerLockUnlockFeeAcceptOperatorshipArgs) => [fromOperator] as const;

/**
 * Encoder function for ITokenManagerLockUnlockFee.acceptOperatorship function data
 */
export const encodeITokenManagerLockUnlockFeeAcceptOperatorshipData = ({
  fromOperator,
}: ITokenManagerLockUnlockFeeAcceptOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "acceptOperatorship",
    abi: ABI_FILE.abi,
    args: [fromOperator],
  });

export type ITokenManagerLockUnlockFeeAddFlowLimiterArgs = {
  flowLimiter: `0x${string}`;
};

/**
 * Factory function for ITokenManagerLockUnlockFee.addFlowLimiter function args
 */
export const encodeITokenManagerLockUnlockFeeAddFlowLimiterArgs = ({
  flowLimiter,
}: ITokenManagerLockUnlockFeeAddFlowLimiterArgs) => [flowLimiter] as const;

/**
 * Encoder function for ITokenManagerLockUnlockFee.addFlowLimiter function data
 */
export const encodeITokenManagerLockUnlockFeeAddFlowLimiterData = ({
  flowLimiter,
}: ITokenManagerLockUnlockFeeAddFlowLimiterArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "addFlowLimiter",
    abi: ABI_FILE.abi,
    args: [flowLimiter],
  });

export type ITokenManagerLockUnlockFeeCallContractWithInterchainTokenArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  data: `0x${string}`;
};

/**
 * Factory function for ITokenManagerLockUnlockFee.callContractWithInterchainToken function args
 */
export const encodeITokenManagerLockUnlockFeeCallContractWithInterchainTokenArgs =
  ({
    destinationChain,
    destinationAddress,
    amount,
    data,
  }: ITokenManagerLockUnlockFeeCallContractWithInterchainTokenArgs) =>
    [destinationChain, destinationAddress, amount, data] as const;

/**
 * Encoder function for ITokenManagerLockUnlockFee.callContractWithInterchainToken function data
 */
export const encodeITokenManagerLockUnlockFeeCallContractWithInterchainTokenData =
  ({
    destinationChain,
    destinationAddress,
    amount,
    data,
  }: ITokenManagerLockUnlockFeeCallContractWithInterchainTokenArgs): `0x${string}` =>
    encodeFunctionData({
      functionName: "callContractWithInterchainToken",
      abi: ABI_FILE.abi,
      args: [destinationChain, destinationAddress, amount, data],
    });

export type ITokenManagerLockUnlockFeeGiveTokenArgs = {
  destinationAddress: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for ITokenManagerLockUnlockFee.giveToken function args
 */
export const encodeITokenManagerLockUnlockFeeGiveTokenArgs = ({
  destinationAddress,
  amount,
}: ITokenManagerLockUnlockFeeGiveTokenArgs) =>
  [destinationAddress, amount] as const;

/**
 * Encoder function for ITokenManagerLockUnlockFee.giveToken function data
 */
export const encodeITokenManagerLockUnlockFeeGiveTokenData = ({
  destinationAddress,
  amount,
}: ITokenManagerLockUnlockFeeGiveTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "giveToken",
    abi: ABI_FILE.abi,
    args: [destinationAddress, amount],
  });

export type ITokenManagerLockUnlockFeeHasRoleArgs = {
  account: `0x${string}`;
  role: number;
};

/**
 * Factory function for ITokenManagerLockUnlockFee.hasRole function args
 */
export const encodeITokenManagerLockUnlockFeeHasRoleArgs = ({
  account,
  role,
}: ITokenManagerLockUnlockFeeHasRoleArgs) => [account, role] as const;

/**
 * Encoder function for ITokenManagerLockUnlockFee.hasRole function data
 */
export const encodeITokenManagerLockUnlockFeeHasRoleData = ({
  account,
  role,
}: ITokenManagerLockUnlockFeeHasRoleArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "hasRole",
    abi: ABI_FILE.abi,
    args: [account, role],
  });

export type ITokenManagerLockUnlockFeeInterchainTransferArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for ITokenManagerLockUnlockFee.interchainTransfer function args
 */
export const encodeITokenManagerLockUnlockFeeInterchainTransferArgs = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: ITokenManagerLockUnlockFeeInterchainTransferArgs) =>
  [destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for ITokenManagerLockUnlockFee.interchainTransfer function data
 */
export const encodeITokenManagerLockUnlockFeeInterchainTransferData = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: ITokenManagerLockUnlockFeeInterchainTransferArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "interchainTransfer",
    abi: ABI_FILE.abi,
    args: [destinationChain, destinationAddress, amount, metadata],
  });

export type ITokenManagerLockUnlockFeeIsOperatorArgs = { addr: `0x${string}` };

/**
 * Factory function for ITokenManagerLockUnlockFee.isOperator function args
 */
export const encodeITokenManagerLockUnlockFeeIsOperatorArgs = ({
  addr,
}: ITokenManagerLockUnlockFeeIsOperatorArgs) => [addr] as const;

/**
 * Encoder function for ITokenManagerLockUnlockFee.isOperator function data
 */
export const encodeITokenManagerLockUnlockFeeIsOperatorData = ({
  addr,
}: ITokenManagerLockUnlockFeeIsOperatorArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "isOperator",
    abi: ABI_FILE.abi,
    args: [addr],
  });

export type ITokenManagerLockUnlockFeeParamsArgs = {
  operator_: `0x${string}`;
  tokenAddress_: `0x${string}`;
};

/**
 * Factory function for ITokenManagerLockUnlockFee.params function args
 */
export const encodeITokenManagerLockUnlockFeeParamsArgs = ({
  operator_,
  tokenAddress_,
}: ITokenManagerLockUnlockFeeParamsArgs) => [operator_, tokenAddress_] as const;

/**
 * Encoder function for ITokenManagerLockUnlockFee.params function data
 */
export const encodeITokenManagerLockUnlockFeeParamsData = ({
  operator_,
  tokenAddress_,
}: ITokenManagerLockUnlockFeeParamsArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "params",
    abi: ABI_FILE.abi,
    args: [operator_, tokenAddress_],
  });

export type ITokenManagerLockUnlockFeeProposeOperatorshipArgs = {
  operator_: `0x${string}`;
};

/**
 * Factory function for ITokenManagerLockUnlockFee.proposeOperatorship function args
 */
export const encodeITokenManagerLockUnlockFeeProposeOperatorshipArgs = ({
  operator_,
}: ITokenManagerLockUnlockFeeProposeOperatorshipArgs) => [operator_] as const;

/**
 * Encoder function for ITokenManagerLockUnlockFee.proposeOperatorship function data
 */
export const encodeITokenManagerLockUnlockFeeProposeOperatorshipData = ({
  operator_,
}: ITokenManagerLockUnlockFeeProposeOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "proposeOperatorship",
    abi: ABI_FILE.abi,
    args: [operator_],
  });

export type ITokenManagerLockUnlockFeeRemoveFlowLimiterArgs = {
  flowLimiter: `0x${string}`;
};

/**
 * Factory function for ITokenManagerLockUnlockFee.removeFlowLimiter function args
 */
export const encodeITokenManagerLockUnlockFeeRemoveFlowLimiterArgs = ({
  flowLimiter,
}: ITokenManagerLockUnlockFeeRemoveFlowLimiterArgs) => [flowLimiter] as const;

/**
 * Encoder function for ITokenManagerLockUnlockFee.removeFlowLimiter function data
 */
export const encodeITokenManagerLockUnlockFeeRemoveFlowLimiterData = ({
  flowLimiter,
}: ITokenManagerLockUnlockFeeRemoveFlowLimiterArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "removeFlowLimiter",
    abi: ABI_FILE.abi,
    args: [flowLimiter],
  });

export type ITokenManagerLockUnlockFeeSetFlowLimitArgs = { flowLimit_: bigint };

/**
 * Factory function for ITokenManagerLockUnlockFee.setFlowLimit function args
 */
export const encodeITokenManagerLockUnlockFeeSetFlowLimitArgs = ({
  flowLimit_,
}: ITokenManagerLockUnlockFeeSetFlowLimitArgs) => [flowLimit_] as const;

/**
 * Encoder function for ITokenManagerLockUnlockFee.setFlowLimit function data
 */
export const encodeITokenManagerLockUnlockFeeSetFlowLimitData = ({
  flowLimit_,
}: ITokenManagerLockUnlockFeeSetFlowLimitArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setFlowLimit",
    abi: ABI_FILE.abi,
    args: [flowLimit_],
  });

export type ITokenManagerLockUnlockFeeSetupArgs = { data: `0x${string}` };

/**
 * Factory function for ITokenManagerLockUnlockFee.setup function args
 */
export const encodeITokenManagerLockUnlockFeeSetupArgs = ({
  data,
}: ITokenManagerLockUnlockFeeSetupArgs) => [data] as const;

/**
 * Encoder function for ITokenManagerLockUnlockFee.setup function data
 */
export const encodeITokenManagerLockUnlockFeeSetupData = ({
  data,
}: ITokenManagerLockUnlockFeeSetupArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setup",
    abi: ABI_FILE.abi,
    args: [data],
  });

export type ITokenManagerLockUnlockFeeTakeTokenArgs = {
  sourceAddress: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for ITokenManagerLockUnlockFee.takeToken function args
 */
export const encodeITokenManagerLockUnlockFeeTakeTokenArgs = ({
  sourceAddress,
  amount,
}: ITokenManagerLockUnlockFeeTakeTokenArgs) => [sourceAddress, amount] as const;

/**
 * Encoder function for ITokenManagerLockUnlockFee.takeToken function data
 */
export const encodeITokenManagerLockUnlockFeeTakeTokenData = ({
  sourceAddress,
  amount,
}: ITokenManagerLockUnlockFeeTakeTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "takeToken",
    abi: ABI_FILE.abi,
    args: [sourceAddress, amount],
  });

export type ITokenManagerLockUnlockFeeTransferOperatorshipArgs = {
  operator_: `0x${string}`;
};

/**
 * Factory function for ITokenManagerLockUnlockFee.transferOperatorship function args
 */
export const encodeITokenManagerLockUnlockFeeTransferOperatorshipArgs = ({
  operator_,
}: ITokenManagerLockUnlockFeeTransferOperatorshipArgs) => [operator_] as const;

/**
 * Encoder function for ITokenManagerLockUnlockFee.transferOperatorship function data
 */
export const encodeITokenManagerLockUnlockFeeTransferOperatorshipData = ({
  operator_,
}: ITokenManagerLockUnlockFeeTransferOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transferOperatorship",
    abi: ABI_FILE.abi,
    args: [operator_],
  });

export type ITokenManagerLockUnlockFeeTransmitInterchainTransferArgs = {
  sender: `0x${string}`;
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for ITokenManagerLockUnlockFee.transmitInterchainTransfer function args
 */
export const encodeITokenManagerLockUnlockFeeTransmitInterchainTransferArgs = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: ITokenManagerLockUnlockFeeTransmitInterchainTransferArgs) =>
  [sender, destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for ITokenManagerLockUnlockFee.transmitInterchainTransfer function data
 */
export const encodeITokenManagerLockUnlockFeeTransmitInterchainTransferData = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: ITokenManagerLockUnlockFeeTransmitInterchainTransferArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transmitInterchainTransfer",
    abi: ABI_FILE.abi,
    args: [sender, destinationChain, destinationAddress, amount, metadata],
  });

export const ITOKEN_MANAGER_LOCK_UNLOCK_FEE_ENCODERS = {
  acceptOperatorship: {
    args: encodeITokenManagerLockUnlockFeeAcceptOperatorshipArgs,
    data: encodeITokenManagerLockUnlockFeeAcceptOperatorshipData,
  },
  addFlowLimiter: {
    args: encodeITokenManagerLockUnlockFeeAddFlowLimiterArgs,
    data: encodeITokenManagerLockUnlockFeeAddFlowLimiterData,
  },
  callContractWithInterchainToken: {
    args: encodeITokenManagerLockUnlockFeeCallContractWithInterchainTokenArgs,
    data: encodeITokenManagerLockUnlockFeeCallContractWithInterchainTokenData,
  },
  giveToken: {
    args: encodeITokenManagerLockUnlockFeeGiveTokenArgs,
    data: encodeITokenManagerLockUnlockFeeGiveTokenData,
  },
  hasRole: {
    args: encodeITokenManagerLockUnlockFeeHasRoleArgs,
    data: encodeITokenManagerLockUnlockFeeHasRoleData,
  },
  interchainTransfer: {
    args: encodeITokenManagerLockUnlockFeeInterchainTransferArgs,
    data: encodeITokenManagerLockUnlockFeeInterchainTransferData,
  },
  isOperator: {
    args: encodeITokenManagerLockUnlockFeeIsOperatorArgs,
    data: encodeITokenManagerLockUnlockFeeIsOperatorData,
  },
  params: {
    args: encodeITokenManagerLockUnlockFeeParamsArgs,
    data: encodeITokenManagerLockUnlockFeeParamsData,
  },
  proposeOperatorship: {
    args: encodeITokenManagerLockUnlockFeeProposeOperatorshipArgs,
    data: encodeITokenManagerLockUnlockFeeProposeOperatorshipData,
  },
  removeFlowLimiter: {
    args: encodeITokenManagerLockUnlockFeeRemoveFlowLimiterArgs,
    data: encodeITokenManagerLockUnlockFeeRemoveFlowLimiterData,
  },
  setFlowLimit: {
    args: encodeITokenManagerLockUnlockFeeSetFlowLimitArgs,
    data: encodeITokenManagerLockUnlockFeeSetFlowLimitData,
  },
  setup: {
    args: encodeITokenManagerLockUnlockFeeSetupArgs,
    data: encodeITokenManagerLockUnlockFeeSetupData,
  },
  takeToken: {
    args: encodeITokenManagerLockUnlockFeeTakeTokenArgs,
    data: encodeITokenManagerLockUnlockFeeTakeTokenData,
  },
  transferOperatorship: {
    args: encodeITokenManagerLockUnlockFeeTransferOperatorshipArgs,
    data: encodeITokenManagerLockUnlockFeeTransferOperatorshipData,
  },
  transmitInterchainTransfer: {
    args: encodeITokenManagerLockUnlockFeeTransmitInterchainTransferArgs,
    data: encodeITokenManagerLockUnlockFeeTransmitInterchainTransferData,
  },
};
