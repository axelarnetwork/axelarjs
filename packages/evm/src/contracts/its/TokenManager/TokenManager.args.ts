/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - node_modules/@axelar-network/interchain-token-service/artifacts/contracts/token-manager/TokenManager.sol/TokenManager.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import type { PublicContractClient } from "../../PublicContractClient";
import ABI_FILE from "./TokenManager.abi";

export type TokenManagerAcceptOperatorshipArgs = {
  fromOperator: `0x${string}`;
};

/**
 * Factory function for TokenManager.acceptOperatorship function args
 */
export const encodeTokenManagerAcceptOperatorshipArgs = ({
  fromOperator,
}: TokenManagerAcceptOperatorshipArgs) => [fromOperator] as const;

/**
 * Encoder function for TokenManager.acceptOperatorship function data
 */
export const encodeTokenManagerAcceptOperatorshipData = ({
  fromOperator,
}: TokenManagerAcceptOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "acceptOperatorship",
    abi: ABI_FILE.abi,
    args: [fromOperator],
  });

export type TokenManagerAddFlowInArgs = { amount: bigint };

/**
 * Factory function for TokenManager.addFlowIn function args
 */
export const encodeTokenManagerAddFlowInArgs = ({
  amount,
}: TokenManagerAddFlowInArgs) => [amount] as const;

/**
 * Encoder function for TokenManager.addFlowIn function data
 */
export const encodeTokenManagerAddFlowInData = ({
  amount,
}: TokenManagerAddFlowInArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "addFlowIn",
    abi: ABI_FILE.abi,
    args: [amount],
  });

export type TokenManagerAddFlowLimiterArgs = { flowLimiter: `0x${string}` };

/**
 * Factory function for TokenManager.addFlowLimiter function args
 */
export const encodeTokenManagerAddFlowLimiterArgs = ({
  flowLimiter,
}: TokenManagerAddFlowLimiterArgs) => [flowLimiter] as const;

/**
 * Encoder function for TokenManager.addFlowLimiter function data
 */
export const encodeTokenManagerAddFlowLimiterData = ({
  flowLimiter,
}: TokenManagerAddFlowLimiterArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "addFlowLimiter",
    abi: ABI_FILE.abi,
    args: [flowLimiter],
  });

export type TokenManagerAddFlowOutArgs = { amount: bigint };

/**
 * Factory function for TokenManager.addFlowOut function args
 */
export const encodeTokenManagerAddFlowOutArgs = ({
  amount,
}: TokenManagerAddFlowOutArgs) => [amount] as const;

/**
 * Encoder function for TokenManager.addFlowOut function data
 */
export const encodeTokenManagerAddFlowOutData = ({
  amount,
}: TokenManagerAddFlowOutArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "addFlowOut",
    abi: ABI_FILE.abi,
    args: [amount],
  });

export type TokenManagerGetTokenAddressFromParamsArgs = {
  params_: `0x${string}`;
};

/**
 * Factory function for TokenManager.getTokenAddressFromParams function args
 */
export const encodeTokenManagerGetTokenAddressFromParamsArgs = ({
  params_,
}: TokenManagerGetTokenAddressFromParamsArgs) => [params_] as const;

/**
 * Encoder function for TokenManager.getTokenAddressFromParams function data
 */
export const encodeTokenManagerGetTokenAddressFromParamsData = ({
  params_,
}: TokenManagerGetTokenAddressFromParamsArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "getTokenAddressFromParams",
    abi: ABI_FILE.abi,
    args: [params_],
  });

export type TokenManagerHasRoleArgs = { account: `0x${string}`; role: number };

/**
 * Factory function for TokenManager.hasRole function args
 */
export const encodeTokenManagerHasRoleArgs = ({
  account,
  role,
}: TokenManagerHasRoleArgs) => [account, role] as const;

/**
 * Encoder function for TokenManager.hasRole function data
 */
export const encodeTokenManagerHasRoleData = ({
  account,
  role,
}: TokenManagerHasRoleArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "hasRole",
    abi: ABI_FILE.abi,
    args: [account, role],
  });

export type TokenManagerIsFlowLimiterArgs = { addr: `0x${string}` };

/**
 * Factory function for TokenManager.isFlowLimiter function args
 */
export const encodeTokenManagerIsFlowLimiterArgs = ({
  addr,
}: TokenManagerIsFlowLimiterArgs) => [addr] as const;

/**
 * Encoder function for TokenManager.isFlowLimiter function data
 */
export const encodeTokenManagerIsFlowLimiterData = ({
  addr,
}: TokenManagerIsFlowLimiterArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "isFlowLimiter",
    abi: ABI_FILE.abi,
    args: [addr],
  });

export type TokenManagerIsOperatorArgs = { addr: `0x${string}` };

/**
 * Factory function for TokenManager.isOperator function args
 */
export const encodeTokenManagerIsOperatorArgs = ({
  addr,
}: TokenManagerIsOperatorArgs) => [addr] as const;

/**
 * Encoder function for TokenManager.isOperator function data
 */
export const encodeTokenManagerIsOperatorData = ({
  addr,
}: TokenManagerIsOperatorArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "isOperator",
    abi: ABI_FILE.abi,
    args: [addr],
  });

export type TokenManagerParamsArgs = {
  operator_: `0x${string}`;
  tokenAddress_: `0x${string}`;
};

/**
 * Factory function for TokenManager.params function args
 */
export const encodeTokenManagerParamsArgs = ({
  operator_,
  tokenAddress_,
}: TokenManagerParamsArgs) => [operator_, tokenAddress_] as const;

/**
 * Encoder function for TokenManager.params function data
 */
export const encodeTokenManagerParamsData = ({
  operator_,
  tokenAddress_,
}: TokenManagerParamsArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "params",
    abi: ABI_FILE.abi,
    args: [operator_, tokenAddress_],
  });

export type TokenManagerProposeOperatorshipArgs = { operator: `0x${string}` };

/**
 * Factory function for TokenManager.proposeOperatorship function args
 */
export const encodeTokenManagerProposeOperatorshipArgs = ({
  operator,
}: TokenManagerProposeOperatorshipArgs) => [operator] as const;

/**
 * Encoder function for TokenManager.proposeOperatorship function data
 */
export const encodeTokenManagerProposeOperatorshipData = ({
  operator,
}: TokenManagerProposeOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "proposeOperatorship",
    abi: ABI_FILE.abi,
    args: [operator],
  });

export type TokenManagerRemoveFlowLimiterArgs = { flowLimiter: `0x${string}` };

/**
 * Factory function for TokenManager.removeFlowLimiter function args
 */
export const encodeTokenManagerRemoveFlowLimiterArgs = ({
  flowLimiter,
}: TokenManagerRemoveFlowLimiterArgs) => [flowLimiter] as const;

/**
 * Encoder function for TokenManager.removeFlowLimiter function data
 */
export const encodeTokenManagerRemoveFlowLimiterData = ({
  flowLimiter,
}: TokenManagerRemoveFlowLimiterArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "removeFlowLimiter",
    abi: ABI_FILE.abi,
    args: [flowLimiter],
  });

export type TokenManagerSetFlowLimitArgs = { flowLimit_: bigint };

/**
 * Factory function for TokenManager.setFlowLimit function args
 */
export const encodeTokenManagerSetFlowLimitArgs = ({
  flowLimit_,
}: TokenManagerSetFlowLimitArgs) => [flowLimit_] as const;

/**
 * Encoder function for TokenManager.setFlowLimit function data
 */
export const encodeTokenManagerSetFlowLimitData = ({
  flowLimit_,
}: TokenManagerSetFlowLimitArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setFlowLimit",
    abi: ABI_FILE.abi,
    args: [flowLimit_],
  });

export type TokenManagerSetupArgs = { params_: `0x${string}` };

/**
 * Factory function for TokenManager.setup function args
 */
export const encodeTokenManagerSetupArgs = ({
  params_,
}: TokenManagerSetupArgs) => [params_] as const;

/**
 * Encoder function for TokenManager.setup function data
 */
export const encodeTokenManagerSetupData = ({
  params_,
}: TokenManagerSetupArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setup",
    abi: ABI_FILE.abi,
    args: [params_],
  });

export type TokenManagerTransferOperatorshipArgs = { operator: `0x${string}` };

/**
 * Factory function for TokenManager.transferOperatorship function args
 */
export const encodeTokenManagerTransferOperatorshipArgs = ({
  operator,
}: TokenManagerTransferOperatorshipArgs) => [operator] as const;

/**
 * Encoder function for TokenManager.transferOperatorship function data
 */
export const encodeTokenManagerTransferOperatorshipData = ({
  operator,
}: TokenManagerTransferOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transferOperatorship",
    abi: ABI_FILE.abi,
    args: [operator],
  });

export const TOKEN_MANAGER_ENCODERS = {
  acceptOperatorship: {
    args: encodeTokenManagerAcceptOperatorshipArgs,
    data: encodeTokenManagerAcceptOperatorshipData,
  },
  addFlowIn: {
    args: encodeTokenManagerAddFlowInArgs,
    data: encodeTokenManagerAddFlowInData,
  },
  addFlowLimiter: {
    args: encodeTokenManagerAddFlowLimiterArgs,
    data: encodeTokenManagerAddFlowLimiterData,
  },
  addFlowOut: {
    args: encodeTokenManagerAddFlowOutArgs,
    data: encodeTokenManagerAddFlowOutData,
  },
  getTokenAddressFromParams: {
    args: encodeTokenManagerGetTokenAddressFromParamsArgs,
    data: encodeTokenManagerGetTokenAddressFromParamsData,
  },
  hasRole: {
    args: encodeTokenManagerHasRoleArgs,
    data: encodeTokenManagerHasRoleData,
  },
  isFlowLimiter: {
    args: encodeTokenManagerIsFlowLimiterArgs,
    data: encodeTokenManagerIsFlowLimiterData,
  },
  isOperator: {
    args: encodeTokenManagerIsOperatorArgs,
    data: encodeTokenManagerIsOperatorData,
  },
  params: {
    args: encodeTokenManagerParamsArgs,
    data: encodeTokenManagerParamsData,
  },
  proposeOperatorship: {
    args: encodeTokenManagerProposeOperatorshipArgs,
    data: encodeTokenManagerProposeOperatorshipData,
  },
  removeFlowLimiter: {
    args: encodeTokenManagerRemoveFlowLimiterArgs,
    data: encodeTokenManagerRemoveFlowLimiterData,
  },
  setFlowLimit: {
    args: encodeTokenManagerSetFlowLimitArgs,
    data: encodeTokenManagerSetFlowLimitData,
  },
  setup: {
    args: encodeTokenManagerSetupArgs,
    data: encodeTokenManagerSetupData,
  },
  transferOperatorship: {
    args: encodeTokenManagerTransferOperatorshipArgs,
    data: encodeTokenManagerTransferOperatorshipData,
  },
};

export function createTokenManagerReadClient(
  publicClient: PublicContractClient<typeof ABI_FILE.abi>
) {
  return {
    getTokenAddressFromParams(
      getTokenAddressFromParamsArgs: TokenManagerGetTokenAddressFromParamsArgs
    ) {
      const encoder = TOKEN_MANAGER_ENCODERS["getTokenAddressFromParams"];
      const encodedArgs = encoder.args(getTokenAddressFromParamsArgs);

      return publicClient.read("getTokenAddressFromParams", {
        args: encodedArgs,
      });
    },
    hasRole(hasRoleArgs: TokenManagerHasRoleArgs) {
      const encoder = TOKEN_MANAGER_ENCODERS["hasRole"];
      const encodedArgs = encoder.args(hasRoleArgs);

      return publicClient.read("hasRole", { args: encodedArgs });
    },
    isFlowLimiter(isFlowLimiterArgs: TokenManagerIsFlowLimiterArgs) {
      const encoder = TOKEN_MANAGER_ENCODERS["isFlowLimiter"];
      const encodedArgs = encoder.args(isFlowLimiterArgs);

      return publicClient.read("isFlowLimiter", { args: encodedArgs });
    },
    isOperator(isOperatorArgs: TokenManagerIsOperatorArgs) {
      const encoder = TOKEN_MANAGER_ENCODERS["isOperator"];
      const encodedArgs = encoder.args(isOperatorArgs);

      return publicClient.read("isOperator", { args: encodedArgs });
    },
    params(paramsArgs: TokenManagerParamsArgs) {
      const encoder = TOKEN_MANAGER_ENCODERS["params"];
      const encodedArgs = encoder.args(paramsArgs);

      return publicClient.read("params", { args: encodedArgs });
    },
  };
}
