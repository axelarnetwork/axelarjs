/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - node_modules/@axelar-network/interchain-token-service/artifacts/contracts/token-manager/TokenManager.sol/TokenManager.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import type { PublicContractClient } from "../../PublicContractClient";
import ABI_FILE from "./TokenManager.abi";

export type TokenManagerAcceptOperatorshipArgs = {
  fromOperator: `0x${string}`;
};

/**
 * Factory function for TokenManager.acceptOperatorship function args
 */
export const encodeTokenManagerAcceptOperatorshipArgs = ({
  fromOperator,
}: TokenManagerAcceptOperatorshipArgs) => [fromOperator] as const;

/**
 * Encoder function for TokenManager.acceptOperatorship function data
 */
export const encodeTokenManagerAcceptOperatorshipData = ({
  fromOperator,
}: TokenManagerAcceptOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "acceptOperatorship",
    abi: ABI_FILE.abi,
    args: [fromOperator],
  });

export type TokenManagerAddFlowLimiterArgs = { flowLimiter: `0x${string}` };

/**
 * Factory function for TokenManager.addFlowLimiter function args
 */
export const encodeTokenManagerAddFlowLimiterArgs = ({
  flowLimiter,
}: TokenManagerAddFlowLimiterArgs) => [flowLimiter] as const;

/**
 * Encoder function for TokenManager.addFlowLimiter function data
 */
export const encodeTokenManagerAddFlowLimiterData = ({
  flowLimiter,
}: TokenManagerAddFlowLimiterArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "addFlowLimiter",
    abi: ABI_FILE.abi,
    args: [flowLimiter],
  });

export type TokenManagerCallContractWithInterchainTokenArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  data: `0x${string}`;
};

/**
 * Factory function for TokenManager.callContractWithInterchainToken function args
 */
export const encodeTokenManagerCallContractWithInterchainTokenArgs = ({
  destinationChain,
  destinationAddress,
  amount,
  data,
}: TokenManagerCallContractWithInterchainTokenArgs) =>
  [destinationChain, destinationAddress, amount, data] as const;

/**
 * Encoder function for TokenManager.callContractWithInterchainToken function data
 */
export const encodeTokenManagerCallContractWithInterchainTokenData = ({
  destinationChain,
  destinationAddress,
  amount,
  data,
}: TokenManagerCallContractWithInterchainTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "callContractWithInterchainToken",
    abi: ABI_FILE.abi,
    args: [destinationChain, destinationAddress, amount, data],
  });

export type TokenManagerGetTokenAddressFromParamsArgs = {
  params: `0x${string}`;
};

/**
 * Factory function for TokenManager.getTokenAddressFromParams function args
 */
export const encodeTokenManagerGetTokenAddressFromParamsArgs = ({
  params,
}: TokenManagerGetTokenAddressFromParamsArgs) => [params] as const;

/**
 * Encoder function for TokenManager.getTokenAddressFromParams function data
 */
export const encodeTokenManagerGetTokenAddressFromParamsData = ({
  params,
}: TokenManagerGetTokenAddressFromParamsArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "getTokenAddressFromParams",
    abi: ABI_FILE.abi,
    args: [params],
  });

export type TokenManagerGiveTokenArgs = {
  destinationAddress: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for TokenManager.giveToken function args
 */
export const encodeTokenManagerGiveTokenArgs = ({
  destinationAddress,
  amount,
}: TokenManagerGiveTokenArgs) => [destinationAddress, amount] as const;

/**
 * Encoder function for TokenManager.giveToken function data
 */
export const encodeTokenManagerGiveTokenData = ({
  destinationAddress,
  amount,
}: TokenManagerGiveTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "giveToken",
    abi: ABI_FILE.abi,
    args: [destinationAddress, amount],
  });

export type TokenManagerHasRoleArgs = { account: `0x${string}`; role: number };

/**
 * Factory function for TokenManager.hasRole function args
 */
export const encodeTokenManagerHasRoleArgs = ({
  account,
  role,
}: TokenManagerHasRoleArgs) => [account, role] as const;

/**
 * Encoder function for TokenManager.hasRole function data
 */
export const encodeTokenManagerHasRoleData = ({
  account,
  role,
}: TokenManagerHasRoleArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "hasRole",
    abi: ABI_FILE.abi,
    args: [account, role],
  });

export type TokenManagerInterchainTransferArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for TokenManager.interchainTransfer function args
 */
export const encodeTokenManagerInterchainTransferArgs = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerInterchainTransferArgs) =>
  [destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for TokenManager.interchainTransfer function data
 */
export const encodeTokenManagerInterchainTransferData = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerInterchainTransferArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "interchainTransfer",
    abi: ABI_FILE.abi,
    args: [destinationChain, destinationAddress, amount, metadata],
  });

export type TokenManagerIsOperatorArgs = { addr: `0x${string}` };

/**
 * Factory function for TokenManager.isOperator function args
 */
export const encodeTokenManagerIsOperatorArgs = ({
  addr,
}: TokenManagerIsOperatorArgs) => [addr] as const;

/**
 * Encoder function for TokenManager.isOperator function data
 */
export const encodeTokenManagerIsOperatorData = ({
  addr,
}: TokenManagerIsOperatorArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "isOperator",
    abi: ABI_FILE.abi,
    args: [addr],
  });

export type TokenManagerProposeOperatorshipArgs = { operator: `0x${string}` };

/**
 * Factory function for TokenManager.proposeOperatorship function args
 */
export const encodeTokenManagerProposeOperatorshipArgs = ({
  operator,
}: TokenManagerProposeOperatorshipArgs) => [operator] as const;

/**
 * Encoder function for TokenManager.proposeOperatorship function data
 */
export const encodeTokenManagerProposeOperatorshipData = ({
  operator,
}: TokenManagerProposeOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "proposeOperatorship",
    abi: ABI_FILE.abi,
    args: [operator],
  });

export type TokenManagerRemoveFlowLimiterArgs = { flowLimiter: `0x${string}` };

/**
 * Factory function for TokenManager.removeFlowLimiter function args
 */
export const encodeTokenManagerRemoveFlowLimiterArgs = ({
  flowLimiter,
}: TokenManagerRemoveFlowLimiterArgs) => [flowLimiter] as const;

/**
 * Encoder function for TokenManager.removeFlowLimiter function data
 */
export const encodeTokenManagerRemoveFlowLimiterData = ({
  flowLimiter,
}: TokenManagerRemoveFlowLimiterArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "removeFlowLimiter",
    abi: ABI_FILE.abi,
    args: [flowLimiter],
  });

export type TokenManagerSetFlowLimitArgs = { flowLimit_: bigint };

/**
 * Factory function for TokenManager.setFlowLimit function args
 */
export const encodeTokenManagerSetFlowLimitArgs = ({
  flowLimit_,
}: TokenManagerSetFlowLimitArgs) => [flowLimit_] as const;

/**
 * Encoder function for TokenManager.setFlowLimit function data
 */
export const encodeTokenManagerSetFlowLimitData = ({
  flowLimit_,
}: TokenManagerSetFlowLimitArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setFlowLimit",
    abi: ABI_FILE.abi,
    args: [flowLimit_],
  });

export type TokenManagerSetupArgs = { params: `0x${string}` };

/**
 * Factory function for TokenManager.setup function args
 */
export const encodeTokenManagerSetupArgs = ({
  params,
}: TokenManagerSetupArgs) => [params] as const;

/**
 * Encoder function for TokenManager.setup function data
 */
export const encodeTokenManagerSetupData = ({
  params,
}: TokenManagerSetupArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "setup",
    abi: ABI_FILE.abi,
    args: [params],
  });

export type TokenManagerTakeTokenArgs = {
  sourceAddress: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for TokenManager.takeToken function args
 */
export const encodeTokenManagerTakeTokenArgs = ({
  sourceAddress,
  amount,
}: TokenManagerTakeTokenArgs) => [sourceAddress, amount] as const;

/**
 * Encoder function for TokenManager.takeToken function data
 */
export const encodeTokenManagerTakeTokenData = ({
  sourceAddress,
  amount,
}: TokenManagerTakeTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "takeToken",
    abi: ABI_FILE.abi,
    args: [sourceAddress, amount],
  });

export type TokenManagerTransferOperatorshipArgs = { operator: `0x${string}` };

/**
 * Factory function for TokenManager.transferOperatorship function args
 */
export const encodeTokenManagerTransferOperatorshipArgs = ({
  operator,
}: TokenManagerTransferOperatorshipArgs) => [operator] as const;

/**
 * Encoder function for TokenManager.transferOperatorship function data
 */
export const encodeTokenManagerTransferOperatorshipData = ({
  operator,
}: TokenManagerTransferOperatorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transferOperatorship",
    abi: ABI_FILE.abi,
    args: [operator],
  });

export type TokenManagerTransmitInterchainTransferArgs = {
  sender: `0x${string}`;
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for TokenManager.transmitInterchainTransfer function args
 */
export const encodeTokenManagerTransmitInterchainTransferArgs = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerTransmitInterchainTransferArgs) =>
  [sender, destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for TokenManager.transmitInterchainTransfer function data
 */
export const encodeTokenManagerTransmitInterchainTransferData = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerTransmitInterchainTransferArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transmitInterchainTransfer",
    abi: ABI_FILE.abi,
    args: [sender, destinationChain, destinationAddress, amount, metadata],
  });

export const TOKEN_MANAGER_ENCODERS = {
  acceptOperatorship: {
    args: encodeTokenManagerAcceptOperatorshipArgs,
    data: encodeTokenManagerAcceptOperatorshipData,
  },
  addFlowLimiter: {
    args: encodeTokenManagerAddFlowLimiterArgs,
    data: encodeTokenManagerAddFlowLimiterData,
  },
  callContractWithInterchainToken: {
    args: encodeTokenManagerCallContractWithInterchainTokenArgs,
    data: encodeTokenManagerCallContractWithInterchainTokenData,
  },
  getTokenAddressFromParams: {
    args: encodeTokenManagerGetTokenAddressFromParamsArgs,
    data: encodeTokenManagerGetTokenAddressFromParamsData,
  },
  giveToken: {
    args: encodeTokenManagerGiveTokenArgs,
    data: encodeTokenManagerGiveTokenData,
  },
  hasRole: {
    args: encodeTokenManagerHasRoleArgs,
    data: encodeTokenManagerHasRoleData,
  },
  interchainTransfer: {
    args: encodeTokenManagerInterchainTransferArgs,
    data: encodeTokenManagerInterchainTransferData,
  },
  isOperator: {
    args: encodeTokenManagerIsOperatorArgs,
    data: encodeTokenManagerIsOperatorData,
  },
  proposeOperatorship: {
    args: encodeTokenManagerProposeOperatorshipArgs,
    data: encodeTokenManagerProposeOperatorshipData,
  },
  removeFlowLimiter: {
    args: encodeTokenManagerRemoveFlowLimiterArgs,
    data: encodeTokenManagerRemoveFlowLimiterData,
  },
  setFlowLimit: {
    args: encodeTokenManagerSetFlowLimitArgs,
    data: encodeTokenManagerSetFlowLimitData,
  },
  setup: {
    args: encodeTokenManagerSetupArgs,
    data: encodeTokenManagerSetupData,
  },
  takeToken: {
    args: encodeTokenManagerTakeTokenArgs,
    data: encodeTokenManagerTakeTokenData,
  },
  transferOperatorship: {
    args: encodeTokenManagerTransferOperatorshipArgs,
    data: encodeTokenManagerTransferOperatorshipData,
  },
  transmitInterchainTransfer: {
    args: encodeTokenManagerTransmitInterchainTransferArgs,
    data: encodeTokenManagerTransmitInterchainTransferData,
  },
};

export function createTokenManagerReadClient(
  publicClient: PublicContractClient<typeof ABI_FILE.abi>
) {
  return {
    getTokenAddressFromParams(
      getTokenAddressFromParamsArgs: TokenManagerGetTokenAddressFromParamsArgs
    ) {
      const encoder = TOKEN_MANAGER_ENCODERS["getTokenAddressFromParams"];
      const encodedArgs = encoder.args(getTokenAddressFromParamsArgs);

      return publicClient.read("getTokenAddressFromParams", {
        args: encodedArgs,
      });
    },
    hasRole(hasRoleArgs: TokenManagerHasRoleArgs) {
      const encoder = TOKEN_MANAGER_ENCODERS["hasRole"];
      const encodedArgs = encoder.args(hasRoleArgs);

      return publicClient.read("hasRole", { args: encodedArgs });
    },
    isOperator(isOperatorArgs: TokenManagerIsOperatorArgs) {
      const encoder = TOKEN_MANAGER_ENCODERS["isOperator"];
      const encodedArgs = encoder.args(isOperatorArgs);

      return publicClient.read("isOperator", { args: encodedArgs });
    },
  };
}
