/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - node_modules/@axelar-network/interchain-token-service/artifacts/contracts/interfaces/IDistributable.sol/IDistributable.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import ABI_FILE from "./IDistributable.abi";

export type IDistributableAcceptDistributorshipArgs = {
  fromDistributor: `0x${string}`;
};

/**
 * Factory function for IDistributable.acceptDistributorship function args
 */
export const encodeIDistributableAcceptDistributorshipArgs = ({
  fromDistributor,
}: IDistributableAcceptDistributorshipArgs) => [fromDistributor] as const;

/**
 * Encoder function for IDistributable.acceptDistributorship function data
 */
export const encodeIDistributableAcceptDistributorshipData = ({
  fromDistributor,
}: IDistributableAcceptDistributorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "acceptDistributorship",
    abi: ABI_FILE.abi,
    args: [fromDistributor],
  });

export type IDistributableHasRoleArgs = {
  account: `0x${string}`;
  role: number;
};

/**
 * Factory function for IDistributable.hasRole function args
 */
export const encodeIDistributableHasRoleArgs = ({
  account,
  role,
}: IDistributableHasRoleArgs) => [account, role] as const;

/**
 * Encoder function for IDistributable.hasRole function data
 */
export const encodeIDistributableHasRoleData = ({
  account,
  role,
}: IDistributableHasRoleArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "hasRole",
    abi: ABI_FILE.abi,
    args: [account, role],
  });

export type IDistributableIsDistributorArgs = { addr: `0x${string}` };

/**
 * Factory function for IDistributable.isDistributor function args
 */
export const encodeIDistributableIsDistributorArgs = ({
  addr,
}: IDistributableIsDistributorArgs) => [addr] as const;

/**
 * Encoder function for IDistributable.isDistributor function data
 */
export const encodeIDistributableIsDistributorData = ({
  addr,
}: IDistributableIsDistributorArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "isDistributor",
    abi: ABI_FILE.abi,
    args: [addr],
  });

export type IDistributableProposeDistributorshipArgs = {
  distributor_: `0x${string}`;
};

/**
 * Factory function for IDistributable.proposeDistributorship function args
 */
export const encodeIDistributableProposeDistributorshipArgs = ({
  distributor_,
}: IDistributableProposeDistributorshipArgs) => [distributor_] as const;

/**
 * Encoder function for IDistributable.proposeDistributorship function data
 */
export const encodeIDistributableProposeDistributorshipData = ({
  distributor_,
}: IDistributableProposeDistributorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "proposeDistributorship",
    abi: ABI_FILE.abi,
    args: [distributor_],
  });

export type IDistributableTransferDistributorshipArgs = {
  distributor_: `0x${string}`;
};

/**
 * Factory function for IDistributable.transferDistributorship function args
 */
export const encodeIDistributableTransferDistributorshipArgs = ({
  distributor_,
}: IDistributableTransferDistributorshipArgs) => [distributor_] as const;

/**
 * Encoder function for IDistributable.transferDistributorship function data
 */
export const encodeIDistributableTransferDistributorshipData = ({
  distributor_,
}: IDistributableTransferDistributorshipArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transferDistributorship",
    abi: ABI_FILE.abi,
    args: [distributor_],
  });

export const IDISTRIBUTABLE_ENCODERS = {
  acceptDistributorship: encodeIDistributableAcceptDistributorshipArgs,
  hasRole: encodeIDistributableHasRoleArgs,
  isDistributor: encodeIDistributableIsDistributorArgs,
  proposeDistributorship: encodeIDistributableProposeDistributorshipArgs,
  transferDistributorship: encodeIDistributableTransferDistributorshipArgs,
};
