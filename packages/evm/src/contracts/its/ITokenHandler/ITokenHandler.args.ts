/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - node_modules/@axelar-network/interchain-token-service/artifacts/contracts/interfaces/ITokenHandler.sol/ITokenHandler.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import ABI_FILE from "./ITokenHandler.abi";

export type ITokenHandlerGiveTokenArgs = {
  tokenManagerType: bigint;
  tokenAddress: `0x${string}`;
  tokenManager: `0x${string}`;
  to: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for ITokenHandler.giveToken function args
 */
export const encodeITokenHandlerGiveTokenArgs = ({
  tokenManagerType,
  tokenAddress,
  tokenManager,
  to,
  amount,
}: ITokenHandlerGiveTokenArgs) =>
  [tokenManagerType, tokenAddress, tokenManager, to, amount] as const;

/**
 * Encoder function for ITokenHandler.giveToken function data
 */
export const encodeITokenHandlerGiveTokenData = ({
  tokenManagerType,
  tokenAddress,
  tokenManager,
  to,
  amount,
}: ITokenHandlerGiveTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "giveToken",
    abi: ABI_FILE.abi,
    args: [tokenManagerType, tokenAddress, tokenManager, to, amount],
  });

export type ITokenHandlerTakeTokenArgs = {
  tokenManagerType: bigint;
  tokenAddress: `0x${string}`;
  tokenManager: `0x${string}`;
  from: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for ITokenHandler.takeToken function args
 */
export const encodeITokenHandlerTakeTokenArgs = ({
  tokenManagerType,
  tokenAddress,
  tokenManager,
  from,
  amount,
}: ITokenHandlerTakeTokenArgs) =>
  [tokenManagerType, tokenAddress, tokenManager, from, amount] as const;

/**
 * Encoder function for ITokenHandler.takeToken function data
 */
export const encodeITokenHandlerTakeTokenData = ({
  tokenManagerType,
  tokenAddress,
  tokenManager,
  from,
  amount,
}: ITokenHandlerTakeTokenArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "takeToken",
    abi: ABI_FILE.abi,
    args: [tokenManagerType, tokenAddress, tokenManager, from, amount],
  });

export type ITokenHandlerTransferTokenFromArgs = {
  tokenManagerType: bigint;
  tokenAddress: `0x${string}`;
  from: `0x${string}`;
  to: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for ITokenHandler.transferTokenFrom function args
 */
export const encodeITokenHandlerTransferTokenFromArgs = ({
  tokenManagerType,
  tokenAddress,
  from,
  to,
  amount,
}: ITokenHandlerTransferTokenFromArgs) =>
  [tokenManagerType, tokenAddress, from, to, amount] as const;

/**
 * Encoder function for ITokenHandler.transferTokenFrom function data
 */
export const encodeITokenHandlerTransferTokenFromData = ({
  tokenManagerType,
  tokenAddress,
  from,
  to,
  amount,
}: ITokenHandlerTransferTokenFromArgs): `0x${string}` =>
  encodeFunctionData({
    functionName: "transferTokenFrom",
    abi: ABI_FILE.abi,
    args: [tokenManagerType, tokenAddress, from, to, amount],
  });

export const ITOKEN_HANDLER_ENCODERS = {
  giveToken: {
    args: encodeITokenHandlerGiveTokenArgs,
    data: encodeITokenHandlerGiveTokenData,
  },
  takeToken: {
    args: encodeITokenHandlerTakeTokenArgs,
    data: encodeITokenHandlerTakeTokenData,
  },
  transferTokenFrom: {
    args: encodeITokenHandlerTransferTokenFromArgs,
    data: encodeITokenHandlerTransferTokenFromData,
  },
};
