/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - node_modules/@axelar-network/interchain-token-service/artifacts/contracts/interchain-token/ERC20.sol/ERC20.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import ABI_FILE from "./erc20.abi";

export type ERC20ApproveArgs = { spender: `0x${string}`; amount: bigint };

/**
 * Factory function for ERC20.approve function args
 */
export const encodeERC20ApproveArgs = ({ spender, amount }: ERC20ApproveArgs) =>
  [spender, amount] as const;

/**
 * Encoder function for ERC20.approve function data
 */
export const encodeERC20ApproveData = ({ spender, amount }: ERC20ApproveArgs) =>
  encodeFunctionData({
    functionName: "approve",
    abi: ABI_FILE.abi,
    args: [spender, amount],
  });

export type ERC20DecreaseAllowanceArgs = {
  spender: `0x${string}`;
  subtractedValue: bigint;
};

/**
 * Factory function for ERC20.decreaseAllowance function args
 */
export const encodeERC20DecreaseAllowanceArgs = ({
  spender,
  subtractedValue,
}: ERC20DecreaseAllowanceArgs) => [spender, subtractedValue] as const;

/**
 * Encoder function for ERC20.decreaseAllowance function data
 */
export const encodeERC20DecreaseAllowanceData = ({
  spender,
  subtractedValue,
}: ERC20DecreaseAllowanceArgs) =>
  encodeFunctionData({
    functionName: "decreaseAllowance",
    abi: ABI_FILE.abi,
    args: [spender, subtractedValue],
  });

export type ERC20IncreaseAllowanceArgs = {
  spender: `0x${string}`;
  addedValue: bigint;
};

/**
 * Factory function for ERC20.increaseAllowance function args
 */
export const encodeERC20IncreaseAllowanceArgs = ({
  spender,
  addedValue,
}: ERC20IncreaseAllowanceArgs) => [spender, addedValue] as const;

/**
 * Encoder function for ERC20.increaseAllowance function data
 */
export const encodeERC20IncreaseAllowanceData = ({
  spender,
  addedValue,
}: ERC20IncreaseAllowanceArgs) =>
  encodeFunctionData({
    functionName: "increaseAllowance",
    abi: ABI_FILE.abi,
    args: [spender, addedValue],
  });

export type ERC20TransferArgs = { recipient: `0x${string}`; amount: bigint };

/**
 * Factory function for ERC20.transfer function args
 */
export const encodeERC20TransferArgs = ({
  recipient,
  amount,
}: ERC20TransferArgs) => [recipient, amount] as const;

/**
 * Encoder function for ERC20.transfer function data
 */
export const encodeERC20TransferData = ({
  recipient,
  amount,
}: ERC20TransferArgs) =>
  encodeFunctionData({
    functionName: "transfer",
    abi: ABI_FILE.abi,
    args: [recipient, amount],
  });

export type ERC20TransferFromArgs = {
  sender: `0x${string}`;
  recipient: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for ERC20.transferFrom function args
 */
export const encodeERC20TransferFromArgs = ({
  sender,
  recipient,
  amount,
}: ERC20TransferFromArgs) => [sender, recipient, amount] as const;

/**
 * Encoder function for ERC20.transferFrom function data
 */
export const encodeERC20TransferFromData = ({
  sender,
  recipient,
  amount,
}: ERC20TransferFromArgs) =>
  encodeFunctionData({
    functionName: "transferFrom",
    abi: ABI_FILE.abi,
    args: [sender, recipient, amount],
  });
