/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - node_modules/@axelar-network/interchain-token-service/artifacts/contracts/interchain-token/BaseInterchainToken.sol/BaseInterchainToken.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import ABI_FILE from "./base-interchain-token.abi";

export type BaseInterchainTokenApproveArgs = {
  spender: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for BaseInterchainToken.approve function args
 */
export const encodeBaseInterchainTokenApproveArgs = ({
  spender,
  amount,
}: BaseInterchainTokenApproveArgs) => [spender, amount] as const;

/**
 * Encoder function for BaseInterchainToken.approve function data
 */
export const encodeBaseInterchainTokenApproveData = ({
  spender,
  amount,
}: BaseInterchainTokenApproveArgs) =>
  encodeFunctionData({
    functionName: "approve",
    abi: ABI_FILE.abi,
    args: [spender, amount],
  });

export type BaseInterchainTokenDecreaseAllowanceArgs = {
  spender: `0x${string}`;
  subtractedValue: bigint;
};

/**
 * Factory function for BaseInterchainToken.decreaseAllowance function args
 */
export const encodeBaseInterchainTokenDecreaseAllowanceArgs = ({
  spender,
  subtractedValue,
}: BaseInterchainTokenDecreaseAllowanceArgs) =>
  [spender, subtractedValue] as const;

/**
 * Encoder function for BaseInterchainToken.decreaseAllowance function data
 */
export const encodeBaseInterchainTokenDecreaseAllowanceData = ({
  spender,
  subtractedValue,
}: BaseInterchainTokenDecreaseAllowanceArgs) =>
  encodeFunctionData({
    functionName: "decreaseAllowance",
    abi: ABI_FILE.abi,
    args: [spender, subtractedValue],
  });

export type BaseInterchainTokenIncreaseAllowanceArgs = {
  spender: `0x${string}`;
  addedValue: bigint;
};

/**
 * Factory function for BaseInterchainToken.increaseAllowance function args
 */
export const encodeBaseInterchainTokenIncreaseAllowanceArgs = ({
  spender,
  addedValue,
}: BaseInterchainTokenIncreaseAllowanceArgs) => [spender, addedValue] as const;

/**
 * Encoder function for BaseInterchainToken.increaseAllowance function data
 */
export const encodeBaseInterchainTokenIncreaseAllowanceData = ({
  spender,
  addedValue,
}: BaseInterchainTokenIncreaseAllowanceArgs) =>
  encodeFunctionData({
    functionName: "increaseAllowance",
    abi: ABI_FILE.abi,
    args: [spender, addedValue],
  });

export type BaseInterchainTokenInterchainTransferArgs = {
  destinationChain: string;
  recipient: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for BaseInterchainToken.interchainTransfer function args
 */
export const encodeBaseInterchainTokenInterchainTransferArgs = ({
  destinationChain,
  recipient,
  amount,
  metadata,
}: BaseInterchainTokenInterchainTransferArgs) =>
  [destinationChain, recipient, amount, metadata] as const;

/**
 * Encoder function for BaseInterchainToken.interchainTransfer function data
 */
export const encodeBaseInterchainTokenInterchainTransferData = ({
  destinationChain,
  recipient,
  amount,
  metadata,
}: BaseInterchainTokenInterchainTransferArgs) =>
  encodeFunctionData({
    functionName: "interchainTransfer",
    abi: ABI_FILE.abi,
    args: [destinationChain, recipient, amount, metadata],
  });

export type BaseInterchainTokenInterchainTransferFromArgs = {
  sender: `0x${string}`;
  destinationChain: string;
  recipient: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for BaseInterchainToken.interchainTransferFrom function args
 */
export const encodeBaseInterchainTokenInterchainTransferFromArgs = ({
  sender,
  destinationChain,
  recipient,
  amount,
  metadata,
}: BaseInterchainTokenInterchainTransferFromArgs) =>
  [sender, destinationChain, recipient, amount, metadata] as const;

/**
 * Encoder function for BaseInterchainToken.interchainTransferFrom function data
 */
export const encodeBaseInterchainTokenInterchainTransferFromData = ({
  sender,
  destinationChain,
  recipient,
  amount,
  metadata,
}: BaseInterchainTokenInterchainTransferFromArgs) =>
  encodeFunctionData({
    functionName: "interchainTransferFrom",
    abi: ABI_FILE.abi,
    args: [sender, destinationChain, recipient, amount, metadata],
  });

export type BaseInterchainTokenTransferArgs = {
  recipient: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for BaseInterchainToken.transfer function args
 */
export const encodeBaseInterchainTokenTransferArgs = ({
  recipient,
  amount,
}: BaseInterchainTokenTransferArgs) => [recipient, amount] as const;

/**
 * Encoder function for BaseInterchainToken.transfer function data
 */
export const encodeBaseInterchainTokenTransferData = ({
  recipient,
  amount,
}: BaseInterchainTokenTransferArgs) =>
  encodeFunctionData({
    functionName: "transfer",
    abi: ABI_FILE.abi,
    args: [recipient, amount],
  });

export type BaseInterchainTokenTransferFromArgs = {
  sender: `0x${string}`;
  recipient: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for BaseInterchainToken.transferFrom function args
 */
export const encodeBaseInterchainTokenTransferFromArgs = ({
  sender,
  recipient,
  amount,
}: BaseInterchainTokenTransferFromArgs) => [sender, recipient, amount] as const;

/**
 * Encoder function for BaseInterchainToken.transferFrom function data
 */
export const encodeBaseInterchainTokenTransferFromData = ({
  sender,
  recipient,
  amount,
}: BaseInterchainTokenTransferFromArgs) =>
  encodeFunctionData({
    functionName: "transferFrom",
    abi: ABI_FILE.abi,
    args: [sender, recipient, amount],
  });

export const BASE_INTERCHAIN_TOKEN_ENCODERS = {
  approve: encodeBaseInterchainTokenApproveArgs,
  decreaseAllowance: encodeBaseInterchainTokenDecreaseAllowanceArgs,
  increaseAllowance: encodeBaseInterchainTokenIncreaseAllowanceArgs,
  interchainTransfer: encodeBaseInterchainTokenInterchainTransferArgs,
  interchainTransferFrom: encodeBaseInterchainTokenInterchainTransferFromArgs,
  transfer: encodeBaseInterchainTokenTransferArgs,
  transferFrom: encodeBaseInterchainTokenTransferFromArgs,
};
