#!/usr/bin/env node

const path = require("path");
const fs = require("fs");
const prettier = require("prettier");

const kebabToPascalCase = (str = "") =>
  str
    .split("-")
    .reduce(
      (acc, x) => acc.concat((x[0] ?? "").toUpperCase().concat(x.slice(1))),
      ""
    );

const kebabToConstantCase = (str = "") => str.toUpperCase().replace(/\-/g, "_");

const capitalize = (str = "") =>
  (str[0] ?? "").toUpperCase().concat(str.slice(1));

const PACKAGE_NAME = "@axelar-network/interchain-token-service";

const CONTRACT_FOLDERS = [
  "interchain-token-service",
  "interchain-token",
  "token-manager",
];

const getInputType = (input) => {
  switch (input.type) {
    // string types
    case "address":
    case "bytes32":
    case "bytes":
      return "`0x${string}`";
    case "string":
      return "string";
    // number types
    case "uint256":
      return "bigint";
    case "uint8":
      return "number";
    // boolean
    case "bool":
      return "boolean";
    // default
    default:
      return "any";
  }
};

async function main() {
  for (const folder of CONTRACT_FOLDERS) {
    const pascalName = kebabToPascalCase(folder);
    const constantName = kebabToConstantCase(folder);

    const GENERATED_DISCLAIMER = `
    /**
     * This file was generated by scripts/codegen.cjs
     * 
     * Original abi file: 
     * - ${PACKAGE_NAME}/dist/${folder}/${pascalName}.sol/${pascalName}.json
     * 
     * DO NOT EDIT MANUALLY
     */
    `;

    const {
      contractName,
      abi,
    } = require(`${PACKAGE_NAME}/dist/${folder}/${pascalName}.sol/${pascalName}.json`);

    const indexFile = `
${GENERATED_DISCLAIMER}

import { Chain } from "viem";

import { PublicContractClient } from "../PublicContractClient";
import ABI_FILE from "./${folder}.abi";
export * from "./${folder}.args";

export const ${constantName}_ABI = ABI_FILE.abi;

export class ${contractName}Client extends PublicContractClient<
  typeof ABI_FILE.abi
> {
  static ABI = ABI_FILE.abi;
  static contractName = ABI_FILE.contractName;

  constructor(options: { chain: Chain; address: \`0x\${string}\` }) {
    super({
      abi: ${constantName}_ABI,
      address: options.address,
      chain: options.chain,
    });
  }
}`;

    const abiJsonFile = `${JSON.stringify({ contractName, abi }, null, 2)}`;

    const abiFile = `
${GENERATED_DISCLAIMER}

export default ${abiJsonFile} as const;`;

    const basePath = path.join(__dirname, "..", "src", "contracts", folder);

    // create folder if it doesn't exist
    if (!fs.existsSync(basePath)) {
      fs.mkdirSync(basePath);
    }

    // write index file
    fs.writeFileSync(
      path.join(basePath, "index.ts"),
      prettier.format(indexFile, { parser: "babel-ts" })
    );

    // write abi file
    fs.writeFileSync(
      path.join(basePath, `${folder}.abi.ts`),
      prettier.format(abiFile, { parser: "babel-ts" })
    );

    // write abi json file
    fs.writeFileSync(
      path.join(basePath, `${folder}.abi.json`),
      prettier.format(abiJsonFile, { parser: "json" })
    );

    // only generate args file if there are functions with inputs
    const abiFns = abi.filter(
      (x) =>
        x.type === "function" &&
        x.inputs.length &&
        x.inputs.every((input) => input.name)
    );

    const fnArgsFactories = abiFns
      .map(({ name, inputs }) => {
        const argNames = inputs.map(({ name = "" }) => name).join(", ");

        const argsType = inputs
          .map((input) => `${input.name}: ${getInputType(input)}`)
          .join("; ");

        const capitalizedFnName = capitalize(name);
        const typeName = `${pascalName}${capitalizedFnName}Args`;
        const typeAliasExport = `export type ${typeName} = {${argsType}}`;
        const fnExport = `
        /**
        * Factory function for ${pascalName}.${name} function args
        */
        export const encode${pascalName}${capitalizedFnName}Args = ({${argNames}}: ${typeName}) => [${argNames}] as const;

        /**
        * Encoder function for ${pascalName}.${name} function data
        */
        export const encode${pascalName}${capitalizedFnName}Data = ({${argNames}}: ${typeName}) => encodeFunctionData({
          functionName: "${name}",
          abi: ABI_FILE.abi,
          args:[${argNames}]
        });
        `;

        return `${typeAliasExport}\n\n${fnExport}`;
      })
      .join("\n\n");

    const argsFile = `
      ${GENERATED_DISCLAIMER}

      import { encodeFunctionData } from "viem";
      import ABI_FILE from "./${folder}.abi";

      ${fnArgsFactories}
      `;

    fs.writeFileSync(
      path.join(basePath, `${folder}.args.ts`),
      prettier.format(argsFile, { parser: "babel-ts" })
    );

    console.log(`Synced ${folder} contract ABI.`, {
      functions: abiFns.length,
    });
  }

  console.log(
    `Synced ${CONTRACT_FOLDERS.length} contract ABIs.\n`,
    "Generated code can be found in ./src/contracts"
  );
}

main();
