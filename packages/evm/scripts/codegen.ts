#!/usr/bin/env zx
import fs from "fs/promises";
import path from "path";
import prettier from "prettier";
import { $ } from "zx";

$.verbose = false;

const kebabToPascalCase = (str = "") =>
  str
    .split("-")
    .reduce(
      (acc, x) => acc.concat((x[0] ?? "").toUpperCase().concat(x.slice(1))),
      ""
    );

const kebabToConstantCase = (str = "") => str.toUpperCase().replace(/\-/g, "_");

const capitalize = (str = "") =>
  (str[0] ?? "").toUpperCase().concat(str.slice(1));

const PACKAGE_NAME = "@axelar-network/interchain-token-service";

const CONTRACT_FOLDERS = [
  "interchain-token-service",
  "interchain-token",
  "token-manager",
];

type ABIInputItem = {
  name: string;
  type: string;
};

type ABIItem = {
  name: string;
  type: string;
  inputs: {
    name: string;
    type: string;
  }[];
};

const getInputType = (input: ABIInputItem) => {
  switch (input.type) {
    // string types
    case "address":
    case "bytes32":
    case "bytes":
      return "`0x${string}`";
    case "string":
      return "string";
    // number types
    case "uint256":
      return "bigint";
    case "uint8":
      return "number";
    // boolean
    case "bool":
      return "boolean";
    // default
    default:
      return "any";
  }
};

async function main() {
  for (const folder of CONTRACT_FOLDERS) {
    const pascalName = kebabToPascalCase(folder);
    const constantName = kebabToConstantCase(folder);

    const GENERATED_DISCLAIMER = `
    /**
     * This file was generated by scripts/codegen.cjs
     * 
     * Original abi file: 
     * - ${PACKAGE_NAME}/dist/${folder}/${pascalName}.sol/${pascalName}.json
     * 
     * DO NOT EDIT MANUALLY
     */
    `;

    const { stdout: abiFileJson } =
      await $`cat node_modules/${PACKAGE_NAME}/dist/${folder}/${pascalName}.sol/${pascalName}.json`;

    const { abi, contractName } = JSON.parse(abiFileJson) as {
      abi: ABIItem[];
      contractName: string;
    };

    const abiJsonFile = `${JSON.stringify({ contractName, abi }, null, 2)}`;

    const basePath = path.join("src", "contracts", folder);

    // only generate args file if there are functions with inputs
    const abiFns = abi.filter(
      (x) =>
        x.type === "function" &&
        x.inputs.length &&
        x.inputs.every((input) => input.name)
    );

    const argsFile = `
      import { encodeFunctionData } from "viem";

      import ABI_FILE from "./${folder}.abi";

      ${abiFns
        .map(({ name, inputs }) => {
          const argNames = inputs.map(({ name = "" }) => name).join(", ");

          const argsType = inputs
            .map((input) => `${input.name}: ${getInputType(input)}`)
            .join("; ");

          const fnName = capitalize(name);
          const typeName = `${pascalName}${fnName}Args`;

          return `
            export type ${typeName} = {${argsType}}
  
            /**
             * Factory function for ${pascalName}.${name} function args
             */
             export const encode${pascalName}${fnName}Args = ({${argNames}}: ${typeName}) => [${argNames}] as const;
   
             /**
             * Encoder function for ${pascalName}.${name} function data
             */
             export const encode${pascalName}${fnName}Data = ({${argNames}}: ${typeName}) => encodeFunctionData({
               functionName: "${name}",
               abi: ABI_FILE.abi,
               args:[${argNames}]
             });
          `;
        })
        .join("\n\n")}
    `;

    const abiFile = `
      export default ${abiJsonFile} as const;
    `;

    const indexFile = `
      import { Chain } from "viem";

      import { PublicContractClient } from "../PublicContractClient";
      import ABI_FILE from "./${folder}.abi";
      
      export * from "./${folder}.args";

      export const ${constantName}_ABI = ABI_FILE.abi;

      export class ${contractName}Client extends PublicContractClient<
        typeof ABI_FILE.abi
      > {
        static ABI = ABI_FILE.abi;
        static contractName = ABI_FILE.contractName;

        constructor(options: { chain: Chain; address: \`0x\${string}\` }) {
          super({
            abi: ${constantName}_ABI,
            address: options.address,
            chain: options.chain,
          });
        }
      }
    `;

    $`mkdir -p ${basePath}`;

    const files = [
      {
        name: "index.ts",
        content: indexFile,
        parser: "babel-ts",
      },
      {
        name: `${folder}.abi.ts`,
        content: abiFile,
        parser: "babel-ts",
      },
      {
        name: `${folder}.args.ts`,
        content: argsFile,
        parser: "babel-ts",
      },
    ];

    await Promise.all(
      files.map(async ({ name, content, parser }) =>
        fs.writeFile(
          path.join(basePath, name),
          prettier.format(
            parser === "json"
              ? content
              : `${GENERATED_DISCLAIMER}\n\n${content}`,
            { parser }
          )
        )
      )
    );

    console.info(`Synced ${folder} contract ABI.`, {
      functions: abiFns.length,
    });
  }

  console.info(
    `Synced ${CONTRACT_FOLDERS.length} contract ABIs.\n`,
    "Generated code can be found in ./src/contracts"
  );
}

main();
